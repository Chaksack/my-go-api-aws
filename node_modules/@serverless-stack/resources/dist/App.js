"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const cdk = __importStar(require("aws-cdk-lib"));
const s3 = __importStar(require("aws-cdk-lib/aws-s3"));
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const core_1 = require("@serverless-stack/core");
const Stack_1 = require("./Stack");
const Construct_1 = require("./Construct");
const FunctionalStack_1 = require("./FunctionalStack");
function exitWithMessage(message) {
    console.error(message);
    process.exit(1);
}
class App extends cdk.App {
    constructor(deployProps = {}, props = {}) {
        super(props);
        /**
         * Is the app being deployed locally
         */
        this.local = false;
        /**
         * A list of Lambda functions in the app
         */
        this.lambdaHandlers = [];
        this.siteEnvironments = [];
        this.appPath = process.cwd();
        this.stage = deployProps.stage || "dev";
        this.name = deployProps.name || "my-app";
        this.region =
            deployProps.region || process.env.CDK_DEFAULT_REGION || "us-east-1";
        this.lint = deployProps.lint === false ? false : true;
        this.account = process.env.CDK_DEFAULT_ACCOUNT || "my-account";
        this.typeCheck = deployProps.typeCheck === false ? false : true;
        this.esbuildConfig = deployProps.esbuildConfig;
        this.buildDir = deployProps.buildDir || ".build";
        this.skipBuild = deployProps.skipBuild || false;
        this.defaultFunctionProps = [];
        this.synthCallback = deployProps.synthCallback;
        core_1.State.init(this.appPath);
        if (deployProps.debugEndpoint) {
            this.local = true;
            core_1.State.Function.reset(this.appPath);
            this.debugEndpoint = deployProps.debugEndpoint;
            this.debugBucketArn = deployProps.debugBucketArn;
            this.debugBucketName = deployProps.debugBucketName;
            this.debugStartedAt = deployProps.debugStartedAt;
            this.debugIncreaseTimeout = deployProps.debugIncreaseTimeout;
            if (deployProps.debugBridge) {
                this.debugBridge = deployProps.debugBridge;
            }
        }
    }
    get defaultRemovalPolicy() {
        return this._defaultRemovalPolicy;
    }
    logicalPrefixedName(logicalName) {
        const namePrefix = this.name === "" ? "" : `${this.name}-`;
        return `${this.stage}-${namePrefix}${logicalName}`;
    }
    setDefaultRemovalPolicy(policy) {
        this._defaultRemovalPolicy = policy;
    }
    setDefaultFunctionProps(props) {
        if (this.lambdaHandlers.length > 0)
            throw new Error("Cannot call 'setDefaultFunctionProps' after a stack with functions has been created. Please use 'addDefaultFunctionEnv' or 'addDefaultFunctionPermissions' to add more default properties. Read more about this change here: https://docs.serverless-stack.com/constructs/App#upgrading-to-v0420");
        this.defaultFunctionProps.push(props);
    }
    addDefaultFunctionPermissions(permissions) {
        this.defaultFunctionProps.push({
            permissions,
        });
    }
    addDefaultFunctionEnv(environment) {
        this.defaultFunctionProps.push({
            environment,
        });
    }
    addDefaultFunctionLayers(layers) {
        this.defaultFunctionProps.push({
            layers,
        });
    }
    synth(options = {}) {
        this.buildConstructsMetadata();
        for (const child of this.node.children) {
            if ((0, Construct_1.isStackConstruct)(child)) {
                // Tag stacks
                cdk.Tags.of(child).add("sst:app", this.name);
                cdk.Tags.of(child).add("sst:stage", this.stage);
                // Set removal policy
                if (this._defaultRemovalPolicy)
                    this.applyRemovalPolicy(child, this._defaultRemovalPolicy);
                // Stack names need to be parameterized with the stage name
                if (!child.stackName.startsWith(`${this.stage}-`) &&
                    !child.stackName.endsWith(`-${this.stage}`) &&
                    child.stackName.indexOf(`-${this.stage}-`) === -1) {
                    throw new Error(`Stack "${child.stackName}" is not parameterized with the stage name. The stack name needs to either start with "$stage-", end in "-$stage", or contain the stage name "-$stage-".`);
                }
            }
        }
        const cloudAssembly = super.synth(options);
        // Run callback after synth has finished
        if (this.synthCallback) {
            this.synthCallback(this.lambdaHandlers, this.siteEnvironments);
        }
        return cloudAssembly;
    }
    isJestTest() {
        // Check the env var set inside test/setup-tests.js
        return process.env.JEST_RESOURCES_TESTS === "enabled";
    }
    registerLambdaHandler(handler) {
        this.lambdaHandlers.push(handler);
    }
    registerSiteEnvironment(environment) {
        this.siteEnvironments.push(environment);
    }
    getInputFilesFromEsbuildMetafile(file) {
        let metaJson;
        try {
            metaJson = fs.readJsonSync(file);
        }
        catch (e) {
            exitWithMessage("There was a problem reading the esbuild metafile.");
        }
        return Object.keys(metaJson.inputs).map((input) => path.resolve(input));
    }
    buildConstructsMetadata() {
        const constructs = this.buildConstructsMetadata_collectConstructs(this);
        const byStack = {};
        const local = [];
        for (const c of constructs) {
            const stack = Stack_1.Stack.of(c);
            const list = byStack[stack.node.id] || [];
            const metadata = c.getConstructMetadata();
            const item = Object.assign({ id: c.node.id, addr: c.node.addr, stack: Stack_1.Stack.of(c).stackName }, metadata);
            local.push(item);
            list.push(Object.assign(Object.assign({}, item), { local: undefined }));
            byStack[stack.node.id] = list;
        }
        // Register constructs
        for (const child of this.node.children) {
            if (child instanceof Stack_1.Stack) {
                const stackName = child.node.id;
                child.addConstructsMetadata(byStack[stackName] || []);
            }
        }
        fs.writeJSONSync(core_1.State.resolve(this.appPath, "constructs.json"), local);
    }
    buildConstructsMetadata_collectConstructs(construct) {
        return [
            (0, Construct_1.isSSTConstruct)(construct) ? construct : undefined,
            ...construct.node.children.flatMap((c) => this.buildConstructsMetadata_collectConstructs(c)),
        ].filter((c) => Boolean(c));
    }
    applyRemovalPolicy(current, policy) {
        if (current instanceof cdk.CfnResource)
            current.applyRemovalPolicy(policy);
        // Had to copy this in to enable deleting objects in bucket
        // https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-s3/lib/bucket.ts#L1910
        if (current instanceof s3.Bucket &&
            !current.node.tryFindChild("AutoDeleteObjectsCustomResource")) {
            const AUTO_DELETE_OBJECTS_RESOURCE_TYPE = "Custom::S3AutoDeleteObjects";
            const provider = cdk.CustomResourceProvider.getOrCreateProvider(current, AUTO_DELETE_OBJECTS_RESOURCE_TYPE, {
                codeDirectory: path.join(require.resolve("aws-cdk-lib/aws-s3"), "../lib/auto-delete-objects-handler"),
                runtime: cdk.CustomResourceProviderRuntime.NODEJS_12_X,
                description: `Lambda function for auto-deleting objects in ${current.bucketName} S3 bucket.`,
            });
            // Use a bucket policy to allow the custom resource to delete
            // objects in the bucket
            current.addToResourcePolicy(new iam.PolicyStatement({
                actions: [
                    // list objects
                    "s3:GetBucket*",
                    "s3:List*",
                    // and then delete them
                    "s3:DeleteObject*",
                ],
                resources: [current.bucketArn, current.arnForObjects("*")],
                principals: [new iam.ArnPrincipal(provider.roleArn)],
            }));
            const customResource = new cdk.CustomResource(current, "AutoDeleteObjectsCustomResource", {
                resourceType: AUTO_DELETE_OBJECTS_RESOURCE_TYPE,
                serviceToken: provider.serviceToken,
                properties: {
                    BucketName: current.bucketName,
                },
            });
            // Ensure bucket policy is deleted AFTER the custom resource otherwise
            // we don't have permissions to list and delete in the bucket.
            // (add a `if` to make TS happy)
            if (current.policy) {
                customResource.node.addDependency(current.policy);
            }
        }
        current.node.children.forEach((resource) => this.applyRemovalPolicy(resource, policy));
    }
    // Functional Stack
    // This is a magical global to avoid having to pass app everywhere.
    // We only every have one instance of app
    stack(fn, props) {
        return (0, FunctionalStack_1.stack)(this, fn, props);
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,