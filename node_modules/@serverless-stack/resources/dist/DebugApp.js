"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugApp = void 0;
const cdk = __importStar(require("aws-cdk-lib"));
const Construct_1 = require("./Construct");
class DebugApp extends cdk.App {
    constructor(deployProps) {
        super();
        this.name = deployProps.name;
        this.stage = deployProps.stage;
        this.region = deployProps.region;
        this.account = process.env.CDK_DEFAULT_ACCOUNT || "my-account";
    }
    synth(options = {}) {
        // Check app has stack
        const stacks = this.node.children.filter((child) => (0, Construct_1.isSSTDebugStack)(child));
        if (stacks.length > 1) {
            console.error(`Error: You can only create 1 DebugStack inside the "debugApp()" callback.\n`);
            process.exit(1);
        }
        if (stacks.length === 0) {
            console.error(`Error: The "debugApp()" callback is not creating a DebugStack.\n`);
            process.exit(1);
        }
        for (const child of this.node.children) {
            if ((0, Construct_1.isStackConstruct)(child)) {
                // Stack names need to be parameterized with the stage name
                if (!child.stackName.startsWith(`${this.stage}-`) &&
                    !child.stackName.endsWith(`-${this.stage}`) &&
                    child.stackName.indexOf(`-${this.stage}-`) === -1) {
                    console.error(`Error: Stack "${child.stackName}" is not parameterized with the stage name. The stack name needs to either start with "$stage-", end in "-$stage", or contain the stage name "-$stage-".\n`);
                    process.exit(1);
                }
            }
        }
        return super.synth(options);
    }
    logicalPrefixedName(logicalName) {
        return `${this.stage}-${this.name}-${logicalName}`;
    }
}
exports.DebugApp = DebugApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdBcHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRGVidWdBcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpREFBbUM7QUFFbkMsMkNBQWdFO0FBcUJoRSxNQUFhLFFBQVMsU0FBUSxHQUFHLENBQUMsR0FBRztJQU1uQyxZQUFZLFdBQWdDO1FBQzFDLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLFlBQVksQ0FBQztJQUNqRSxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQXFDLEVBQUU7UUFDM0Msc0JBQXNCO1FBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ2pELElBQUEsMkJBQWUsRUFBQyxLQUFLLENBQUMsQ0FDdkIsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckIsT0FBTyxDQUFDLEtBQUssQ0FBQyw2RUFBNkUsQ0FBQyxDQUFDO1lBQzdGLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakI7UUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztZQUNsRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBRUQsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUN0QyxJQUFJLElBQUEsNEJBQWdCLEVBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzNCLDJEQUEyRDtnQkFDM0QsSUFDRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDO29CQUM3QyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUMzQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNqRDtvQkFDQSxPQUFPLENBQUMsS0FBSyxDQUNYLGlCQUFpQixLQUFLLENBQUMsU0FBUyw0SkFBNEosQ0FDN0wsQ0FBQztvQkFDRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNqQjthQUNGO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELG1CQUFtQixDQUFDLFdBQW1CO1FBQ3JDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7SUFDckQsQ0FBQztDQUNGO0FBbkRELDRCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCAqIGFzIGN4YXBpIGZyb20gXCJhd3MtY2RrLWxpYi9jeC1hcGlcIjtcbmltcG9ydCB7IGlzU3RhY2tDb25zdHJ1Y3QsIGlzU1NURGVidWdTdGFjayB9IGZyb20gXCIuL0NvbnN0cnVjdFwiO1xuaW1wb3J0IHsgRGVidWdTdGFjayB9IGZyb20gXCIuL0RlYnVnU3RhY2tcIjtcblxuLyoqXG4gKiBEZXBsb3kgcHJvcHMgZm9yIGFwcHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVidWdBcHBEZXBsb3lQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgYXBwIG5hbWUsIHVzZWQgdG8gcHJlZml4IHN0YWNrcy5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBzdGFnZSB0byBkZXBsb3kgdGhpcyBhcHAgdG8uXG4gICAqL1xuICBzdGFnZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHJlZ2lvbiB0byBkZXBsb3kgdGhpcyBhcHAgdG8uXG4gICAqL1xuICByZWdpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIERlYnVnQXBwIGV4dGVuZHMgY2RrLkFwcCB7XG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBzdGFnZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcmVnaW9uOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBhY2NvdW50OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZGVwbG95UHJvcHM6IERlYnVnQXBwRGVwbG95UHJvcHMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5uYW1lID0gZGVwbG95UHJvcHMubmFtZTtcbiAgICB0aGlzLnN0YWdlID0gZGVwbG95UHJvcHMuc3RhZ2U7XG4gICAgdGhpcy5yZWdpb24gPSBkZXBsb3lQcm9wcy5yZWdpb247XG4gICAgdGhpcy5hY2NvdW50ID0gcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCB8fCBcIm15LWFjY291bnRcIjtcbiAgfVxuXG4gIHN5bnRoKG9wdGlvbnM6IGNkay5TdGFnZVN5bnRoZXNpc09wdGlvbnMgPSB7fSk6IGN4YXBpLkNsb3VkQXNzZW1ibHkge1xuICAgIC8vIENoZWNrIGFwcCBoYXMgc3RhY2tcbiAgICBjb25zdCBzdGFja3MgPSB0aGlzLm5vZGUuY2hpbGRyZW4uZmlsdGVyKChjaGlsZCkgPT5cbiAgICAgIGlzU1NURGVidWdTdGFjayhjaGlsZClcbiAgICApO1xuICAgIGlmIChzdGFja3MubGVuZ3RoID4gMSkge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3I6IFlvdSBjYW4gb25seSBjcmVhdGUgMSBEZWJ1Z1N0YWNrIGluc2lkZSB0aGUgXCJkZWJ1Z0FwcCgpXCIgY2FsbGJhY2suXFxuYCk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICAgIGlmIChzdGFja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvcjogVGhlIFwiZGVidWdBcHAoKVwiIGNhbGxiYWNrIGlzIG5vdCBjcmVhdGluZyBhIERlYnVnU3RhY2suXFxuYCk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGlmIChpc1N0YWNrQ29uc3RydWN0KGNoaWxkKSkge1xuICAgICAgICAvLyBTdGFjayBuYW1lcyBuZWVkIHRvIGJlIHBhcmFtZXRlcml6ZWQgd2l0aCB0aGUgc3RhZ2UgbmFtZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWNoaWxkLnN0YWNrTmFtZS5zdGFydHNXaXRoKGAke3RoaXMuc3RhZ2V9LWApICYmXG4gICAgICAgICAgIWNoaWxkLnN0YWNrTmFtZS5lbmRzV2l0aChgLSR7dGhpcy5zdGFnZX1gKSAmJlxuICAgICAgICAgIGNoaWxkLnN0YWNrTmFtZS5pbmRleE9mKGAtJHt0aGlzLnN0YWdlfS1gKSA9PT0gLTFcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBFcnJvcjogU3RhY2sgXCIke2NoaWxkLnN0YWNrTmFtZX1cIiBpcyBub3QgcGFyYW1ldGVyaXplZCB3aXRoIHRoZSBzdGFnZSBuYW1lLiBUaGUgc3RhY2sgbmFtZSBuZWVkcyB0byBlaXRoZXIgc3RhcnQgd2l0aCBcIiRzdGFnZS1cIiwgZW5kIGluIFwiLSRzdGFnZVwiLCBvciBjb250YWluIHRoZSBzdGFnZSBuYW1lIFwiLSRzdGFnZS1cIi5cXG5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuc3ludGgob3B0aW9ucyk7XG4gIH1cblxuICBsb2dpY2FsUHJlZml4ZWROYW1lKGxvZ2ljYWxOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnN0YWdlfS0ke3RoaXMubmFtZX0tJHtsb2dpY2FsTmFtZX1gO1xuICB9XG59XG4iXX0=