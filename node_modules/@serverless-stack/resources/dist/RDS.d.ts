import { Construct } from 'constructs';
import * as ec2 from "aws-cdk-lib/aws-ec2";
import * as rds from "aws-cdk-lib/aws-rds";
import { SSTConstruct } from "./Construct";
import { Function as Fn } from "./Function";
export interface RDSProps {
    /**
     * Additional properties for the cluster.
     */
    rdsServerlessCluster?: RDSCdkServerlessClusterProps;
    /**
     * Database engine of the cluster.
     */
    engine: RDSEngineType;
    /**
     * Name of a database which is automatically created inside the cluster
     */
    defaultDatabaseName: string;
    /**
     * Scaling configuration of the cluster.
     *
     * @default - The cluster is automatically paused after 5 minutes of being idle.
     * minimum capacity: 2 ACU
     * maximum capacity: 16 ACU
     */
    scaling?: RDSScalingProps;
    /**
     * Path to the directory that contains the migration scripts.
     *
     * @default - Migrations not automatically run on deploy.
     */
    migrations?: string;
}
export interface RDSScalingProps {
    /**
     * The time before the cluster is paused.
     *
     * Pass in true to pause after 5 minutes of inactive. And pass in false to
     * disable pausing.
     *
     * Or pass in the number of minutes to wait before the cluster is paused.
     *
     * @default - true
     */
    autoPause?: boolean | number;
    /**
     * The minimum capacity for the cluster.
     *
     * @default - ACU_2
     */
    minCapacity?: keyof typeof rds.AuroraCapacityUnit;
    /**
     * The maximum capacity for the cluster.
     *
     * @default - ACU_16
     */
    maxCapacity?: keyof typeof rds.AuroraCapacityUnit;
}
export declare type RDSEngineType = "mysql5.6" | "mysql5.7" | "postgresql10.14";
export interface RDSCdkServerlessClusterProps extends Omit<rds.ServerlessClusterProps, "vpc" | "engine" | "defaultDatabaseName" | "scaling"> {
    readonly vpc?: ec2.IVpc;
}
export declare class RDS extends Construct implements SSTConstruct {
    readonly rdsServerlessCluster: rds.ServerlessCluster;
    readonly migratorFunction?: Fn;
    private readonly engine;
    private readonly defaultDatabaseName;
    constructor(scope: Construct, id: string, props: RDSProps);
    get clusterArn(): string;
    get clusterIdentifier(): string;
    get clusterEndpoint(): rds.Endpoint;
    get secretArn(): string;
    getConstructMetadata(): {
        type: "RDS";
        data: {
            engine: string;
            secretArn: string;
            clusterArn: string;
            clusterIdentifier: string;
            defaultDatabaseName: string;
            migrator: {
                node: string;
                stack: string;
            } | undefined;
        };
    };
    private validateRDSServerlessClusterProps;
    private validateRequiredProps;
    private validateMigrationsFileExists;
    private getEngine;
    private getScaling;
    private getVpc;
    private getVpcSubnets;
    private createMigrationsFunction;
    private createMigrationCustomResource;
    private generateMigrationsHash;
}
