"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const constructs_1 = require("constructs");
const sns = __importStar(require("aws-cdk-lib/aws-sns"));
const snsSubscriptions = __importStar(require("aws-cdk-lib/aws-sns-subscriptions"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const Queue_1 = require("./Queue");
/////////////////////
// Construct
/////////////////////
class Topic extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { snsTopic, subscribers, defaultFunctionProps } = props || {};
        this.subscribers = [];
        this.permissionsAttachedForAllSubscribers = [];
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Create Topic
        ////////////////////
        if ((0, Construct_1.isCDKConstruct)(snsTopic)) {
            this.snsTopic = snsTopic;
        }
        else {
            const snsTopicProps = (snsTopic || {});
            this.snsTopic = new sns.Topic(this, "Topic", Object.assign({ topicName: root.logicalPrefixedName(id) }, snsTopicProps));
        }
        ///////////////////////////
        // Create Subscribers
        ///////////////////////////
        this.addSubscribers(this, subscribers || []);
    }
    get topicArn() {
        return this.snsTopic.topicArn;
    }
    get topicName() {
        return this.snsTopic.topicName;
    }
    get subscriberFunctions() {
        return this.subscribers.filter((subscriber) => subscriber instanceof Function_1.Function);
    }
    get snsSubscriptions() {
        return this.subscribers.map((sub) => {
            let children;
            // look for sns.Subscription inside Queue.sqsQueue
            if (sub instanceof Queue_1.Queue) {
                children = sub.sqsQueue.node.children;
            }
            // look for sns.Subscription inside Function
            else {
                children = sub.node.children;
            }
            const child = children.find((child) => {
                return (0, Construct_1.isCDKConstructOf)(child, "aws-cdk-lib.aws_sns.Subscription");
            });
            return child;
        });
    }
    addSubscribers(scope, subscribers) {
        subscribers.forEach((subscriber) => this.addSubscriber(scope, subscriber));
    }
    attachPermissions(permissions) {
        this.subscribers
            .filter((subscriber) => subscriber instanceof Function_1.Function)
            .forEach((subscriber) => subscriber.attachPermissions(permissions));
        this.permissionsAttachedForAllSubscribers.push(permissions);
    }
    attachPermissionsToSubscriber(index, permissions) {
        const subscriber = this.subscribers[index];
        if (!(subscriber instanceof Function_1.Function)) {
            throw new Error(`Cannot attach permissions to the "${this.node.id}" Topic subscriber because it's not a Lambda function`);
        }
        subscriber.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Topic",
            data: {
                topicArn: this.snsTopic.topicArn,
                subscribers: this.subscribers.map((s) => (0, Construct_1.getFunctionRef)(s)),
            },
        };
    }
    addSubscriber(scope, subscriber) {
        if (subscriber instanceof Queue_1.Queue ||
            subscriber.queue) {
            subscriber = subscriber;
            this.addQueueSubscriber(scope, subscriber);
        }
        else {
            subscriber = subscriber;
            this.addFunctionSubscriber(scope, subscriber);
        }
    }
    addQueueSubscriber(scope, subscriber) {
        // Parse subscriber props
        let subscriberProps;
        let queue;
        if (subscriber instanceof Queue_1.Queue) {
            subscriber = subscriber;
            queue = subscriber;
        }
        else {
            subscriber = subscriber;
            subscriberProps = subscriber.subscriberProps;
            queue = subscriber.queue;
        }
        this.subscribers.push(queue);
        // Create Subscription
        this.snsTopic.addSubscription(new snsSubscriptions.SqsSubscription(queue.sqsQueue, subscriberProps));
    }
    addFunctionSubscriber(scope, subscriber) {
        // Parse subscriber props
        let subscriberProps;
        let functionDefinition;
        if (subscriber.function) {
            subscriber = subscriber;
            subscriberProps = subscriber.subscriberProps;
            functionDefinition = subscriber.function;
        }
        else {
            subscriber = subscriber;
            functionDefinition = subscriber;
        }
        // Create function
        const i = this.subscribers.length;
        const fn = Function_1.Function.fromDefinition(scope, `Subscriber_${this.node.id}_${i}`, functionDefinition, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the subscribers using FunctionProps, so the Topic construct can apply the "defaultFunctionProps" to them.`);
        this.subscribers.push(fn);
        // Create Subscription
        this.snsTopic.addSubscription(new snsSubscriptions.LambdaSubscription(fn, subscriberProps));
        // Attach existing permissions
        this.permissionsAttachedForAllSubscribers.forEach((permissions) => fn.attachPermissions(permissions));
    }
}
exports.Topic = Topic;
//# sourceMappingURL=data:application/json;base64,