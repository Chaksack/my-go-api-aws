"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const constructs_1 = require("constructs");
const cdk = __importStar(require("aws-cdk-lib"));
const sqs = __importStar(require("aws-cdk-lib/aws-sqs"));
const lambdaEventSources = __importStar(require("aws-cdk-lib/aws-lambda-event-sources"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
class Queue extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { 
        // Queue props
        sqsQueue, 
        // Function props
        consumer, } = props || {};
        this.permissionsAttachedForAllConsumers = [];
        ////////////////////
        // Create Queue
        ////////////////////
        if ((0, Construct_1.isCDKConstruct)(sqsQueue)) {
            this.sqsQueue = sqsQueue;
        }
        else {
            const sqsQueueProps = sqsQueue || {};
            // If debugIncreaseTimeout is enabled (ie. sst start):
            // - Set visibilityTimeout to > 900s. This is because Lambda timeout is
            //   set to 900s, and visibilityTimeout has to be greater or equal to it.
            //   This will give people more time to debug the function without timing
            //   out the request.
            let debugOverrideProps;
            if (root.debugIncreaseTimeout) {
                if (!sqsQueueProps.visibilityTimeout ||
                    sqsQueueProps.visibilityTimeout.toSeconds() < 900) {
                    debugOverrideProps = {
                        visibilityTimeout: cdk.Duration.seconds(900),
                    };
                }
            }
            const name = root.logicalPrefixedName(id) + (sqsQueueProps.fifo ? ".fifo" : "");
            this.sqsQueue = new sqs.Queue(this, "Queue", Object.assign(Object.assign({ queueName: name }, sqsQueueProps), (debugOverrideProps || {})));
        }
        ///////////////////////////
        // Create Consumer
        ///////////////////////////
        if (consumer) {
            this.addConsumer(this, consumer);
        }
    }
    addConsumer(scope, consumer) {
        if (this.consumerFunction) {
            throw new Error("Cannot configure more than 1 consumer for a Queue");
        }
        // Parse consumer props
        let consumerProps;
        let functionDefinition;
        if (consumer.function) {
            consumer = consumer;
            consumerProps = consumer.consumerProps;
            functionDefinition = consumer.function;
        }
        else {
            consumer = consumer;
            functionDefinition = consumer;
        }
        // Create function
        this.consumerFunction = Function_1.Function.fromDefinition(scope, `Consumer_${this.node.id}`, functionDefinition);
        this.consumerFunction.addEventSource(new lambdaEventSources.SqsEventSource(this.sqsQueue, consumerProps));
        // Attach permissions
        this.permissionsAttachedForAllConsumers.forEach((permissions) => {
            if (this.consumerFunction) {
                this.consumerFunction.attachPermissions(permissions);
            }
        });
    }
    attachPermissions(permissions) {
        if (this.consumerFunction) {
            this.consumerFunction.attachPermissions(permissions);
        }
        this.permissionsAttachedForAllConsumers.push(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Queue",
            data: {
                name: this.sqsQueue.queueName,
                url: this.sqsQueue.queueUrl,
                consumer: (0, Construct_1.getFunctionRef)(this.consumerFunction),
            },
        };
    }
}
exports.Queue = Queue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvUXVldWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBdUM7QUFDdkMsaURBQW1DO0FBQ25DLHlEQUEyQztBQUMzQyx5RkFBMkU7QUFFM0UsMkNBQTJFO0FBQzNFLHlDQUFnRTtBQWFoRSxNQUFhLEtBQU0sU0FBUSxzQkFBUztJQUtsQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQzFELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFXLENBQUM7UUFDcEMsTUFBTTtRQUNKLGNBQWM7UUFDZCxRQUFRO1FBQ1IsaUJBQWlCO1FBQ2pCLFFBQVEsR0FDVCxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLGtDQUFrQyxHQUFHLEVBQUUsQ0FBQztRQUU3QyxvQkFBb0I7UUFDcEIsZUFBZTtRQUNmLG9CQUFvQjtRQUNwQixJQUFJLElBQUEsMEJBQWMsRUFBQyxRQUFRLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQXFCLENBQUM7U0FDdkM7YUFBTTtZQUNMLE1BQU0sYUFBYSxHQUFtQixRQUFRLElBQUksRUFBRSxDQUFDO1lBRXJELHNEQUFzRDtZQUN0RCx1RUFBdUU7WUFDdkUseUVBQXlFO1lBQ3pFLHlFQUF5RTtZQUN6RSxxQkFBcUI7WUFDckIsSUFBSSxrQkFBa0IsQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtnQkFDN0IsSUFDRSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUI7b0JBQ2hDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsR0FBRyxHQUFHLEVBQ2pEO29CQUNBLGtCQUFrQixHQUFHO3dCQUNuQixpQkFBaUIsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7cUJBQzdDLENBQUM7aUJBQ0g7YUFDRjtZQUVELE1BQU0sSUFBSSxHQUNSLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sZ0NBQ3pDLFNBQVMsRUFBRSxJQUFJLElBQ1osYUFBYSxHQUNiLENBQUMsa0JBQWtCLElBQUksRUFBRSxDQUFDLEVBQzdCLENBQUM7U0FDSjtRQUVELDJCQUEyQjtRQUMzQixrQkFBa0I7UUFDbEIsMkJBQTJCO1FBQzNCLElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRU0sV0FBVyxDQUNoQixLQUFnQixFQUNoQixRQUFpRDtRQUVqRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7U0FDdEU7UUFFRCx1QkFBdUI7UUFDdkIsSUFBSSxhQUFhLENBQUM7UUFDbEIsSUFBSSxrQkFBa0IsQ0FBQztRQUN2QixJQUFLLFFBQStCLENBQUMsUUFBUSxFQUFFO1lBQzdDLFFBQVEsR0FBRyxRQUE4QixDQUFDO1lBQzFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO1lBQ3ZDLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7U0FDeEM7YUFBTTtZQUNMLFFBQVEsR0FBRyxRQUE4QixDQUFDO1lBQzFDLGtCQUFrQixHQUFHLFFBQVEsQ0FBQztTQUMvQjtRQUVELGtCQUFrQjtRQUNsQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsbUJBQUUsQ0FBQyxjQUFjLENBQ3ZDLEtBQUssRUFDTCxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQzFCLGtCQUFrQixDQUNuQixDQUFDO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FDbEMsSUFBSSxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FDcEUsQ0FBQztRQUVGLHFCQUFxQjtRQUNyQixJQUFJLENBQUMsa0NBQWtDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDOUQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUN0RDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFdBQXdCO1FBQy9DLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN0RDtRQUVELElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVNLG9CQUFvQjtRQUN6QixPQUFPO1lBQ0wsSUFBSSxFQUFFLE9BQWdCO1lBQ3RCLElBQUksRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTO2dCQUM3QixHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRO2dCQUMzQixRQUFRLEVBQUUsSUFBQSwwQkFBYyxFQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQzthQUNoRDtTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFuSEQsc0JBbUhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCAqIGFzIHNxcyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNxc1wiO1xuaW1wb3J0ICogYXMgbGFtYmRhRXZlbnRTb3VyY2VzIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLWV2ZW50LXNvdXJjZXNcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL0FwcFwiO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25SZWYsIFNTVENvbnN0cnVjdCwgaXNDREtDb25zdHJ1Y3QgfSBmcm9tIFwiLi9Db25zdHJ1Y3RcIjtcbmltcG9ydCB7IEZ1bmN0aW9uIGFzIEZuLCBGdW5jdGlvbkRlZmluaXRpb24gfSBmcm9tIFwiLi9GdW5jdGlvblwiO1xuaW1wb3J0IHsgUGVybWlzc2lvbnMgfSBmcm9tIFwiLi91dGlsL3Blcm1pc3Npb25cIjtcblxuZXhwb3J0IGludGVyZmFjZSBRdWV1ZVByb3BzIHtcbiAgcmVhZG9ubHkgc3FzUXVldWU/OiBzcXMuSVF1ZXVlIHwgc3FzLlF1ZXVlUHJvcHM7XG4gIHJlYWRvbmx5IGNvbnN1bWVyPzogRnVuY3Rpb25EZWZpbml0aW9uIHwgUXVldWVDb25zdW1lclByb3BzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXVlQ29uc3VtZXJQcm9wcyB7XG4gIHJlYWRvbmx5IGZ1bmN0aW9uOiBGdW5jdGlvbkRlZmluaXRpb247XG4gIHJlYWRvbmx5IGNvbnN1bWVyUHJvcHM/OiBsYW1iZGFFdmVudFNvdXJjZXMuU3FzRXZlbnRTb3VyY2VQcm9wcztcbn1cblxuZXhwb3J0IGNsYXNzIFF1ZXVlIGV4dGVuZHMgQ29uc3RydWN0IGltcGxlbWVudHMgU1NUQ29uc3RydWN0IHtcbiAgcHVibGljIHJlYWRvbmx5IHNxc1F1ZXVlOiBzcXMuUXVldWU7XG4gIHB1YmxpYyBjb25zdW1lckZ1bmN0aW9uPzogRm47XG4gIHByaXZhdGUgcmVhZG9ubHkgcGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbENvbnN1bWVyczogUGVybWlzc2lvbnNbXTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IFF1ZXVlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgY29uc3Qgcm9vdCA9IHNjb3BlLm5vZGUucm9vdCBhcyBBcHA7XG4gICAgY29uc3Qge1xuICAgICAgLy8gUXVldWUgcHJvcHNcbiAgICAgIHNxc1F1ZXVlLFxuICAgICAgLy8gRnVuY3Rpb24gcHJvcHNcbiAgICAgIGNvbnN1bWVyLFxuICAgIH0gPSBwcm9wcyB8fCB7fTtcbiAgICB0aGlzLnBlcm1pc3Npb25zQXR0YWNoZWRGb3JBbGxDb25zdW1lcnMgPSBbXTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ3JlYXRlIFF1ZXVlXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBpZiAoaXNDREtDb25zdHJ1Y3Qoc3FzUXVldWUpKSB7XG4gICAgICB0aGlzLnNxc1F1ZXVlID0gc3FzUXVldWUgYXMgc3FzLlF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzcXNRdWV1ZVByb3BzOiBzcXMuUXVldWVQcm9wcyA9IHNxc1F1ZXVlIHx8IHt9O1xuXG4gICAgICAvLyBJZiBkZWJ1Z0luY3JlYXNlVGltZW91dCBpcyBlbmFibGVkIChpZS4gc3N0IHN0YXJ0KTpcbiAgICAgIC8vIC0gU2V0IHZpc2liaWxpdHlUaW1lb3V0IHRvID4gOTAwcy4gVGhpcyBpcyBiZWNhdXNlIExhbWJkYSB0aW1lb3V0IGlzXG4gICAgICAvLyAgIHNldCB0byA5MDBzLCBhbmQgdmlzaWJpbGl0eVRpbWVvdXQgaGFzIHRvIGJlIGdyZWF0ZXIgb3IgZXF1YWwgdG8gaXQuXG4gICAgICAvLyAgIFRoaXMgd2lsbCBnaXZlIHBlb3BsZSBtb3JlIHRpbWUgdG8gZGVidWcgdGhlIGZ1bmN0aW9uIHdpdGhvdXQgdGltaW5nXG4gICAgICAvLyAgIG91dCB0aGUgcmVxdWVzdC5cbiAgICAgIGxldCBkZWJ1Z092ZXJyaWRlUHJvcHM7XG4gICAgICBpZiAocm9vdC5kZWJ1Z0luY3JlYXNlVGltZW91dCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIXNxc1F1ZXVlUHJvcHMudmlzaWJpbGl0eVRpbWVvdXQgfHxcbiAgICAgICAgICBzcXNRdWV1ZVByb3BzLnZpc2liaWxpdHlUaW1lb3V0LnRvU2Vjb25kcygpIDwgOTAwXG4gICAgICAgICkge1xuICAgICAgICAgIGRlYnVnT3ZlcnJpZGVQcm9wcyA9IHtcbiAgICAgICAgICAgIHZpc2liaWxpdHlUaW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcyg5MDApLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbmFtZSA9XG4gICAgICAgIHJvb3QubG9naWNhbFByZWZpeGVkTmFtZShpZCkgKyAoc3FzUXVldWVQcm9wcy5maWZvID8gXCIuZmlmb1wiIDogXCJcIik7XG4gICAgICB0aGlzLnNxc1F1ZXVlID0gbmV3IHNxcy5RdWV1ZSh0aGlzLCBcIlF1ZXVlXCIsIHtcbiAgICAgICAgcXVldWVOYW1lOiBuYW1lLFxuICAgICAgICAuLi5zcXNRdWV1ZVByb3BzLFxuICAgICAgICAuLi4oZGVidWdPdmVycmlkZVByb3BzIHx8IHt9KSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIENyZWF0ZSBDb25zdW1lclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGlmIChjb25zdW1lcikge1xuICAgICAgdGhpcy5hZGRDb25zdW1lcih0aGlzLCBjb25zdW1lcik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFkZENvbnN1bWVyKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgY29uc3VtZXI6IEZ1bmN0aW9uRGVmaW5pdGlvbiB8IFF1ZXVlQ29uc3VtZXJQcm9wc1xuICApOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb25zdW1lckZ1bmN0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29uZmlndXJlIG1vcmUgdGhhbiAxIGNvbnN1bWVyIGZvciBhIFF1ZXVlXCIpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIGNvbnN1bWVyIHByb3BzXG4gICAgbGV0IGNvbnN1bWVyUHJvcHM7XG4gICAgbGV0IGZ1bmN0aW9uRGVmaW5pdGlvbjtcbiAgICBpZiAoKGNvbnN1bWVyIGFzIFF1ZXVlQ29uc3VtZXJQcm9wcykuZnVuY3Rpb24pIHtcbiAgICAgIGNvbnN1bWVyID0gY29uc3VtZXIgYXMgUXVldWVDb25zdW1lclByb3BzO1xuICAgICAgY29uc3VtZXJQcm9wcyA9IGNvbnN1bWVyLmNvbnN1bWVyUHJvcHM7XG4gICAgICBmdW5jdGlvbkRlZmluaXRpb24gPSBjb25zdW1lci5mdW5jdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3VtZXIgPSBjb25zdW1lciBhcyBGdW5jdGlvbkRlZmluaXRpb247XG4gICAgICBmdW5jdGlvbkRlZmluaXRpb24gPSBjb25zdW1lcjtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgZnVuY3Rpb25cbiAgICB0aGlzLmNvbnN1bWVyRnVuY3Rpb24gPSBGbi5mcm9tRGVmaW5pdGlvbihcbiAgICAgIHNjb3BlLFxuICAgICAgYENvbnN1bWVyXyR7dGhpcy5ub2RlLmlkfWAsXG4gICAgICBmdW5jdGlvbkRlZmluaXRpb25cbiAgICApO1xuICAgIHRoaXMuY29uc3VtZXJGdW5jdGlvbi5hZGRFdmVudFNvdXJjZShcbiAgICAgIG5ldyBsYW1iZGFFdmVudFNvdXJjZXMuU3FzRXZlbnRTb3VyY2UodGhpcy5zcXNRdWV1ZSwgY29uc3VtZXJQcm9wcylcbiAgICApO1xuXG4gICAgLy8gQXR0YWNoIHBlcm1pc3Npb25zXG4gICAgdGhpcy5wZXJtaXNzaW9uc0F0dGFjaGVkRm9yQWxsQ29uc3VtZXJzLmZvckVhY2goKHBlcm1pc3Npb25zKSA9PiB7XG4gICAgICBpZiAodGhpcy5jb25zdW1lckZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuY29uc3VtZXJGdW5jdGlvbi5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXR0YWNoUGVybWlzc2lvbnMocGVybWlzc2lvbnM6IFBlcm1pc3Npb25zKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29uc3VtZXJGdW5jdGlvbikge1xuICAgICAgdGhpcy5jb25zdW1lckZ1bmN0aW9uLmF0dGFjaFBlcm1pc3Npb25zKHBlcm1pc3Npb25zKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlcm1pc3Npb25zQXR0YWNoZWRGb3JBbGxDb25zdW1lcnMucHVzaChwZXJtaXNzaW9ucyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q29uc3RydWN0TWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUXVldWVcIiBhcyBjb25zdCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogdGhpcy5zcXNRdWV1ZS5xdWV1ZU5hbWUsXG4gICAgICAgIHVybDogdGhpcy5zcXNRdWV1ZS5xdWV1ZVVybCxcbiAgICAgICAgY29uc3VtZXI6IGdldEZ1bmN0aW9uUmVmKHRoaXMuY29uc3VtZXJGdW5jdGlvbiksXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==