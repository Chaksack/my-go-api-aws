"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViteStaticSite = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const StaticSite_1 = require("./StaticSite");
/////////////////////
// Construct
/////////////////////
class ViteStaticSite extends StaticSite_1.StaticSite {
    constructor(scope, id, props) {
        const { path: sitePath, environment, typesPath } = props || {};
        // generate buildCommand
        let defaultBuildCommand = "npm run build";
        if (fs.existsSync(path.join(sitePath, "yarn.lock"))) {
            defaultBuildCommand = "yarn build";
        }
        // create types file
        const filePath = path.resolve(path.join(sitePath, typesPath || "src/sst-env.d.ts"));
        generateTypesFile(filePath, environment);
        super(scope, id, Object.assign({ indexPage: "index.html", errorPage: StaticSite_1.StaticSiteErrorOptions.REDIRECT_TO_INDEX_PAGE, buildCommand: defaultBuildCommand, buildOutput: "dist", fileOptions: [
                {
                    exclude: "*",
                    include: "*.html",
                    cacheControl: "max-age=0,no-cache,no-store,must-revalidate",
                },
                {
                    exclude: "*",
                    include: ["*.js", "*.css"],
                    cacheControl: "max-age=31536000,public,immutable",
                },
            ] }, props));
    }
}
exports.ViteStaticSite = ViteStaticSite;
function generateTypesFile(typesFullPath, environment) {
    const content = `/// <reference types="vite/client" />

interface ImportMetaEnv {
${Object.keys(environment || {}).map(key => `  readonly ${key}: string`).join("\n")}
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}`;
    fs.ensureDirSync(path.dirname(typesFullPath));
    fs.writeFileSync(typesFullPath, content);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVml0ZVN0YXRpY1NpdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVml0ZVN0YXRpY1NpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBNkI7QUFDN0IsNkNBQStCO0FBRy9CLDZDQUlzQjtBQVV0QixxQkFBcUI7QUFDckIsWUFBWTtBQUNaLHFCQUFxQjtBQUVyQixNQUFhLGNBQWUsU0FBUSx1QkFBVTtJQUM1QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTBCO1FBQ2xFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBRS9ELHdCQUF3QjtRQUN4QixJQUFJLG1CQUFtQixHQUFHLGVBQWUsQ0FBQztRQUMxQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsRUFBRTtZQUNuRCxtQkFBbUIsR0FBRyxZQUFZLENBQUM7U0FDcEM7UUFFRCxvQkFBb0I7UUFDcEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLElBQUksa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUV6QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsa0JBQ2IsU0FBUyxFQUFFLFlBQVksRUFDdkIsU0FBUyxFQUFFLG1DQUFzQixDQUFDLHNCQUFzQixFQUN4RCxZQUFZLEVBQUUsbUJBQW1CLEVBQ2pDLFdBQVcsRUFBRSxNQUFNLEVBQ25CLFdBQVcsRUFBRTtnQkFDWDtvQkFDRSxPQUFPLEVBQUUsR0FBRztvQkFDWixPQUFPLEVBQUUsUUFBUTtvQkFDakIsWUFBWSxFQUFFLDZDQUE2QztpQkFDNUQ7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLEdBQUc7b0JBQ1osT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztvQkFDMUIsWUFBWSxFQUFFLG1DQUFtQztpQkFDbEQ7YUFDRixJQUNFLEtBQUssRUFDUixDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBbENELHdDQWtDQztBQUVELFNBQVMsaUJBQWlCLENBQUMsYUFBcUIsRUFBRSxXQUF1QztJQUN2RixNQUFNLE9BQU8sR0FDZjs7O0VBR0UsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7O0VBS2pGLENBQUM7SUFFRCxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuaW1wb3J0IHtcbiAgU3RhdGljU2l0ZSxcbiAgU3RhdGljU2l0ZVByb3BzLFxuICBTdGF0aWNTaXRlRXJyb3JPcHRpb25zLFxufSBmcm9tIFwiLi9TdGF0aWNTaXRlXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW50ZXJmYWNlc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBpbnRlcmZhY2UgVml0ZVN0YXRpY1NpdGVQcm9wcyBleHRlbmRzIFN0YXRpY1NpdGVQcm9wcyB7XG4gIHJlYWRvbmx5IHR5cGVzUGF0aD86IHN0cmluZztcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDb25zdHJ1Y3Rcbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgY2xhc3MgVml0ZVN0YXRpY1NpdGUgZXh0ZW5kcyBTdGF0aWNTaXRlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFZpdGVTdGF0aWNTaXRlUHJvcHMpIHtcbiAgICBjb25zdCB7IHBhdGg6IHNpdGVQYXRoLCBlbnZpcm9ubWVudCwgdHlwZXNQYXRoIH0gPSBwcm9wcyB8fCB7fTtcblxuICAgIC8vIGdlbmVyYXRlIGJ1aWxkQ29tbWFuZFxuICAgIGxldCBkZWZhdWx0QnVpbGRDb21tYW5kID0gXCJucG0gcnVuIGJ1aWxkXCI7XG4gICAgaWYgKGZzLmV4aXN0c1N5bmMocGF0aC5qb2luKHNpdGVQYXRoLCBcInlhcm4ubG9ja1wiKSkpIHtcbiAgICAgIGRlZmF1bHRCdWlsZENvbW1hbmQgPSBcInlhcm4gYnVpbGRcIjtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgdHlwZXMgZmlsZVxuICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbihzaXRlUGF0aCwgdHlwZXNQYXRoIHx8IFwic3JjL3NzdC1lbnYuZC50c1wiKSk7XG4gICAgZ2VuZXJhdGVUeXBlc0ZpbGUoZmlsZVBhdGgsIGVudmlyb25tZW50KTtcblxuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgaW5kZXhQYWdlOiBcImluZGV4Lmh0bWxcIixcbiAgICAgIGVycm9yUGFnZTogU3RhdGljU2l0ZUVycm9yT3B0aW9ucy5SRURJUkVDVF9UT19JTkRFWF9QQUdFLFxuICAgICAgYnVpbGRDb21tYW5kOiBkZWZhdWx0QnVpbGRDb21tYW5kLFxuICAgICAgYnVpbGRPdXRwdXQ6IFwiZGlzdFwiLFxuICAgICAgZmlsZU9wdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGV4Y2x1ZGU6IFwiKlwiLFxuICAgICAgICAgIGluY2x1ZGU6IFwiKi5odG1sXCIsXG4gICAgICAgICAgY2FjaGVDb250cm9sOiBcIm1heC1hZ2U9MCxuby1jYWNoZSxuby1zdG9yZSxtdXN0LXJldmFsaWRhdGVcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGV4Y2x1ZGU6IFwiKlwiLFxuICAgICAgICAgIGluY2x1ZGU6IFtcIiouanNcIiwgXCIqLmNzc1wiXSxcbiAgICAgICAgICBjYWNoZUNvbnRyb2w6IFwibWF4LWFnZT0zMTUzNjAwMCxwdWJsaWMsaW1tdXRhYmxlXCIsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgLi4ucHJvcHMsXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVUeXBlc0ZpbGUodHlwZXNGdWxsUGF0aDogc3RyaW5nLCBlbnZpcm9ubWVudD86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pIHtcbiAgY29uc3QgY29udGVudCA9XG5gLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJ2aXRlL2NsaWVudFwiIC8+XG5cbmludGVyZmFjZSBJbXBvcnRNZXRhRW52IHtcbiR7T2JqZWN0LmtleXMoZW52aXJvbm1lbnQgfHwge30pLm1hcChrZXkgPT4gYCAgcmVhZG9ubHkgJHtrZXl9OiBzdHJpbmdgKS5qb2luKFwiXFxuXCIpfVxufVxuXG5pbnRlcmZhY2UgSW1wb3J0TWV0YSB7XG4gIHJlYWRvbmx5IGVudjogSW1wb3J0TWV0YUVudlxufWA7XG5cbiAgZnMuZW5zdXJlRGlyU3luYyhwYXRoLmRpcm5hbWUodHlwZXNGdWxsUGF0aCkpO1xuICBmcy53cml0ZUZpbGVTeW5jKHR5cGVzRnVsbFBhdGgsIGNvbnRlbnQpO1xufVxuIl19