"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.use = exports.stack = void 0;
const Stack_1 = require("./Stack");
function stack(app, fn, props) {
    currentApp = app;
    currentStack = fn;
    const id = (props === null || props === void 0 ? void 0 : props.id) || fn.name;
    const exists = getExports(app).has(fn);
    if (exists)
        throw new Error(`StackDuplicates: Attempting to initialize stack ${id} several times`);
    const stack = new EmptyStack(app, id, props);
    const ctx = {
        app,
        stack,
    };
    const returns = fn(ctx);
    if (returns && "then" in returns)
        return returns.then((data) => {
            getExports(app).set(fn, data);
        });
    getExports(app).set(fn, returns);
    return app;
}
exports.stack = stack;
let currentApp;
let currentStack;
const cache = new Map();
function getExports(app) {
    if (!cache.has(app))
        cache.set(app, new Map());
    return cache.get(app);
}
function use(stack) {
    if (!currentApp)
        throw new Error("No app is set");
    const exports = getExports(currentApp);
    if (!exports.has(stack))
        throw new Error(`StackWrongOrder: Initialize "${stack.name}" stack before "${currentStack === null || currentStack === void 0 ? void 0 : currentStack.name}" stack`);
    return exports.get(stack);
}
exports.use = use;
class EmptyStack extends Stack_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb25hbFN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0Z1bmN0aW9uYWxTdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBNEM7QUFFNUMsU0FBZ0IsS0FBSyxDQUNuQixHQUFRLEVBQ1IsRUFBd0IsRUFDeEIsS0FBb0M7SUFFcEMsVUFBVSxHQUFHLEdBQUcsQ0FBQztJQUNqQixZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sRUFBRSxHQUFHLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEVBQUUsS0FBSSxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkMsSUFBSSxNQUFNO1FBQ1IsTUFBTSxJQUFJLEtBQUssQ0FDYixtREFBbUQsRUFBRSxnQkFBZ0IsQ0FDdEUsQ0FBQztJQUVKLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxHQUFHLEdBQWlCO1FBQ3hCLEdBQUc7UUFDSCxLQUFLO0tBQ04sQ0FBQztJQUNGLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixJQUFJLE9BQU8sSUFBSSxNQUFNLElBQUksT0FBTztRQUM5QixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtZQUNoQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVMLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQTNCRCxzQkEyQkM7QUFFRCxJQUFJLFVBQWUsQ0FBQztBQUNwQixJQUFJLFlBQWtDLENBQUM7QUFDdkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQXVDLENBQUM7QUFFN0QsU0FBUyxVQUFVLENBQUMsR0FBUTtJQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDL0MsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBRSxDQUFDO0FBQ3pCLENBQUM7QUFFRCxTQUFnQixHQUFHLENBQUksS0FBeUI7SUFDOUMsSUFBSSxDQUFDLFVBQVU7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDckIsTUFBTSxJQUFJLEtBQUssQ0FDYixnQ0FBZ0MsS0FBSyxDQUFDLElBQUksbUJBQW1CLFlBQVksYUFBWixZQUFZLHVCQUFaLFlBQVksQ0FBRSxJQUFJLFNBQVMsQ0FDekYsQ0FBQztJQUNKLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBUkQsa0JBUUM7QUFTRCxNQUFNLFVBQVcsU0FBUSxhQUFLO0lBQzVCLFlBQVksS0FBVSxFQUFFLEVBQVUsRUFBRSxLQUFrQjtRQUNwRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjtcbmltcG9ydCB7IFN0YWNrLCBTdGFja1Byb3BzIH0gZnJvbSBcIi4vU3RhY2tcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YWNrKFxuICBhcHA6IEFwcCxcbiAgZm46IEZ1bmN0aW9uYWxTdGFjazxhbnk+LFxuICBwcm9wcz86IFN0YWNrUHJvcHMgJiB7IGlkPzogc3RyaW5nIH1cbikge1xuICBjdXJyZW50QXBwID0gYXBwO1xuICBjdXJyZW50U3RhY2sgPSBmbjtcbiAgY29uc3QgaWQgPSBwcm9wcz8uaWQgfHwgZm4ubmFtZTtcbiAgY29uc3QgZXhpc3RzID0gZ2V0RXhwb3J0cyhhcHApLmhhcyhmbik7XG4gIGlmIChleGlzdHMpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFN0YWNrRHVwbGljYXRlczogQXR0ZW1wdGluZyB0byBpbml0aWFsaXplIHN0YWNrICR7aWR9IHNldmVyYWwgdGltZXNgXG4gICAgKTtcblxuICBjb25zdCBzdGFjayA9IG5ldyBFbXB0eVN0YWNrKGFwcCwgaWQsIHByb3BzKTtcbiAgY29uc3QgY3R4OiBTdGFja0NvbnRleHQgPSB7XG4gICAgYXBwLFxuICAgIHN0YWNrLFxuICB9O1xuICBjb25zdCByZXR1cm5zID0gZm4oY3R4KTtcbiAgaWYgKHJldHVybnMgJiYgXCJ0aGVuXCIgaW4gcmV0dXJucylcbiAgICByZXR1cm4gcmV0dXJucy50aGVuKChkYXRhOiBhbnkpID0+IHtcbiAgICAgIGdldEV4cG9ydHMoYXBwKS5zZXQoZm4sIGRhdGEpO1xuICAgIH0pO1xuXG4gIGdldEV4cG9ydHMoYXBwKS5zZXQoZm4sIHJldHVybnMpO1xuICByZXR1cm4gYXBwO1xufVxuXG5sZXQgY3VycmVudEFwcDogQXBwO1xubGV0IGN1cnJlbnRTdGFjazogRnVuY3Rpb25hbFN0YWNrPGFueT47XG5jb25zdCBjYWNoZSA9IG5ldyBNYXA8QXBwLCBNYXA8RnVuY3Rpb25hbFN0YWNrPGFueT4sIGFueT4+KCk7XG5cbmZ1bmN0aW9uIGdldEV4cG9ydHMoYXBwOiBBcHApIHtcbiAgaWYgKCFjYWNoZS5oYXMoYXBwKSkgY2FjaGUuc2V0KGFwcCwgbmV3IE1hcCgpKTtcbiAgcmV0dXJuIGNhY2hlLmdldChhcHApITtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZTxUPihzdGFjazogRnVuY3Rpb25hbFN0YWNrPFQ+KTogVCB7XG4gIGlmICghY3VycmVudEFwcCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gYXBwIGlzIHNldFwiKTtcbiAgY29uc3QgZXhwb3J0cyA9IGdldEV4cG9ydHMoY3VycmVudEFwcCk7XG4gIGlmICghZXhwb3J0cy5oYXMoc3RhY2spKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBTdGFja1dyb25nT3JkZXI6IEluaXRpYWxpemUgXCIke3N0YWNrLm5hbWV9XCIgc3RhY2sgYmVmb3JlIFwiJHtjdXJyZW50U3RhY2s/Lm5hbWV9XCIgc3RhY2tgXG4gICAgKTtcbiAgcmV0dXJuIGV4cG9ydHMuZ2V0KHN0YWNrKTtcbn1cblxuZXhwb3J0IHR5cGUgU3RhY2tDb250ZXh0ID0ge1xuICBhcHA6IEFwcDtcbiAgc3RhY2s6IFN0YWNrO1xufTtcblxuZXhwb3J0IHR5cGUgRnVuY3Rpb25hbFN0YWNrPFQ+ID0gKGN0eDogU3RhY2tDb250ZXh0KSA9PiBUIHwgUHJvbWlzZTxUPjtcblxuY2xhc3MgRW1wdHlTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IEFwcCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gIH1cbn1cbiJdfQ==