"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = void 0;
const constructs_1 = require("constructs");
const s3 = __importStar(require("aws-cdk-lib/aws-s3"));
const s3Notifications = __importStar(require("aws-cdk-lib/aws-s3-notifications"));
const Queue_1 = require("./Queue");
const Topic_1 = require("./Topic");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
class Bucket extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { s3Bucket, notifications, defaultFunctionProps } = props || {};
        this.notifications = [];
        this.permissionsAttachedForAllNotifications = [];
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Create Bucket
        ////////////////////
        if ((0, Construct_1.isCDKConstruct)(s3Bucket)) {
            this.s3Bucket = s3Bucket;
        }
        else {
            const s3BucketProps = (s3Bucket || {});
            this.s3Bucket = new s3.Bucket(this, "Bucket", Object.assign({}, s3BucketProps));
        }
        ///////////////////////////
        // Create Notifications
        ///////////////////////////
        this.addNotifications(this, notifications || []);
    }
    get bucketArn() {
        return this.s3Bucket.bucketArn;
    }
    get bucketName() {
        return this.s3Bucket.bucketName;
    }
    get notificationFunctions() {
        return this.notifications.filter((notification) => notification instanceof Function_1.Function);
    }
    addNotifications(scope, notifications) {
        notifications.forEach((notification) => this.addNotification(scope, notification));
    }
    attachPermissions(permissions) {
        this.notifications
            .filter((notification) => notification instanceof Function_1.Function)
            .forEach((notification) => notification.attachPermissions(permissions));
        this.permissionsAttachedForAllNotifications.push(permissions);
    }
    attachPermissionsToNotification(index, permissions) {
        const notification = this.notifications[index];
        if (!(notification instanceof Function_1.Function)) {
            throw new Error(`Cannot attach permissions to the "${this.node.id}" Bucket notification because it's not a Lambda function`);
        }
        notification.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Bucket",
            data: {
                name: this.s3Bucket.bucketName,
                notifications: this.notifications.map((n) => (0, Construct_1.getFunctionRef)(n)),
            },
        };
    }
    addNotification(scope, notification) {
        if (notification instanceof Queue_1.Queue ||
            notification.queue) {
            notification = notification;
            this.addQueueNotification(scope, notification);
        }
        else if (notification instanceof Topic_1.Topic ||
            notification.topic) {
            notification = notification;
            this.addTopicNotification(scope, notification);
        }
        else {
            notification = notification;
            this.addFunctionNotification(scope, notification);
        }
    }
    addQueueNotification(scope, notification) {
        // Parse notification props
        let notificationProps;
        let queue;
        if (notification instanceof Queue_1.Queue) {
            notification = notification;
            queue = notification;
        }
        else {
            notification = notification;
            notificationProps = notification.notificationProps;
            queue = notification.queue;
        }
        this.notifications.push(queue);
        // Create Notifications
        const events = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.events) || [
            s3.EventType.OBJECT_CREATED,
            s3.EventType.OBJECT_REMOVED,
        ];
        const filters = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.filters) || [];
        events.forEach((event) => this.s3Bucket.addEventNotification(event, new s3Notifications.SqsDestination(queue.sqsQueue), ...filters));
    }
    addTopicNotification(scope, notification) {
        // Parse notification props
        let notificationProps;
        let topic;
        if (notification instanceof Topic_1.Topic) {
            notification = notification;
            topic = notification;
        }
        else {
            notification = notification;
            notificationProps = notification.notificationProps;
            topic = notification.topic;
        }
        this.notifications.push(topic);
        // Create Notifications
        const events = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.events) || [
            s3.EventType.OBJECT_CREATED,
            s3.EventType.OBJECT_REMOVED,
        ];
        const filters = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.filters) || [];
        events.forEach((event) => this.s3Bucket.addEventNotification(event, new s3Notifications.SnsDestination(topic.snsTopic), ...filters));
    }
    addFunctionNotification(scope, notification) {
        // parse notification
        let notificationFunction, notificationProps;
        if (notification.function) {
            notification = notification;
            notificationFunction = notification.function;
            notificationProps = notification.notificationProps;
        }
        else {
            notificationFunction = notification;
        }
        // create function
        const i = this.notifications.length;
        const fn = Function_1.Function.fromDefinition(scope, `Notification_${this.node.id}_${i}`, notificationFunction, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the consumers using FunctionProps, so the Table construct can apply the "defaultFunctionProps" to them.`);
        this.notifications.push(fn);
        // create Notifications
        const events = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.events) || [
            s3.EventType.OBJECT_CREATED,
            s3.EventType.OBJECT_REMOVED,
        ];
        const filters = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.filters) || [];
        events.forEach((event) => this.s3Bucket.addEventNotification(event, new s3Notifications.LambdaDestination(fn), ...filters));
        // attached permissions
        this.permissionsAttachedForAllNotifications.forEach((permissions) => fn.attachPermissions(permissions));
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,