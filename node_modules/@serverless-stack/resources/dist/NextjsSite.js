"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NextjsSite = void 0;
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const constructs_1 = require("constructs");
const cdk = __importStar(require("aws-cdk-lib"));
const s3 = __importStar(require("aws-cdk-lib/aws-s3"));
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const sqs = __importStar(require("aws-cdk-lib/aws-sqs"));
const logs = __importStar(require("aws-cdk-lib/aws-logs"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const route53 = __importStar(require("aws-cdk-lib/aws-route53"));
const s3Assets = __importStar(require("aws-cdk-lib/aws-s3-assets"));
const cloudfront = __importStar(require("aws-cdk-lib/aws-cloudfront"));
const acm = __importStar(require("aws-cdk-lib/aws-certificatemanager"));
const lambda_layer_awscli_1 = require("aws-cdk-lib/lambda-layer-awscli");
const origins = __importStar(require("aws-cdk-lib/aws-cloudfront-origins"));
const route53Targets = __importStar(require("aws-cdk-lib/aws-route53-targets"));
const route53Patterns = __importStar(require("aws-cdk-lib/aws-route53-patterns"));
const lambdaEventSources = __importStar(require("aws-cdk-lib/aws-lambda-event-sources"));
const Construct_1 = require("./Construct");
const BaseSite_1 = require("./BaseSite");
const permission_1 = require("./util/permission");
const builder_1 = require("./util/builder");
const crossRegionHelper = __importStar(require("./nextjs-site/cross-region-helper"));
class NextjsSite extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        // Local development or skip build => stub asset
        this.isPlaceholder =
            (root.local || root.skipBuild) && !props.disablePlaceholder;
        const buildDir = root.buildDir;
        const fileSizeLimit = root.isJestTest()
            ? // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore: "jestFileSizeLimitOverride" not exposed in props
                props.jestFileSizeLimitOverride || 200
            : 200;
        this.props = props;
        this.awsCliLayer = new lambda_layer_awscli_1.AwsCliLayer(this, "AwsCliLayer");
        this.registerSiteEnvironment();
        // Build app
        if (this.isPlaceholder) {
            this.buildOutDir = null;
            this.assets = this.zipAppStubAssets();
            this.routesManifest = null;
        }
        else {
            this.buildOutDir = root.isJestTest()
                ? // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore: "jestBuildOutputPath" not exposed in props
                    props.jestBuildOutputPath || this.buildApp()
                : this.buildApp();
            this.assets = this.zipAppAssets(fileSizeLimit, buildDir);
            this.routesManifest = this.readRoutesManifest();
        }
        // Create Bucket
        this.s3Bucket = this.createS3Bucket();
        // Handle Incremental Static Regeneration
        this.sqsRegenerationQueue = this.createRegenerationQueue();
        this.regenerationFunction = this.createRegenerationFunction();
        // Create Lambda@Edge functions (always created in us-east-1)
        this.edgeLambdaRole = this.createEdgeFunctionRole();
        this.mainFunctionVersion = this.createEdgeFunction("Main", "default-lambda");
        this.apiFunctionVersion = this.createEdgeFunction("Api", "api-lambda");
        this.imageFunctionVersion = this.createEdgeFunction("Image", "image-lambda");
        // Create Custom Domain
        this.validateCustomDomainSettings();
        this.hostedZone = this.lookupHostedZone();
        this.acmCertificate = this.createCertificate();
        // Create S3 Deployment
        const s3deployCR = this.createS3Deployment();
        // Create CloudFront
        this.cfDistribution = this.createCloudFrontDistribution();
        this.cfDistribution.node.addDependency(s3deployCR);
        // Invalidate CloudFront
        const invalidationCR = this.createCloudFrontInvalidation();
        invalidationCR.node.addDependency(this.cfDistribution);
        // Connect Custom Domain to CloudFront Distribution
        this.createRoute53Records();
    }
    get url() {
        return `https://${this.cfDistribution.distributionDomainName}`;
    }
    get customDomainUrl() {
        const { customDomain } = this.props;
        if (!customDomain) {
            return;
        }
        if (typeof customDomain === "string") {
            return `https://${customDomain}`;
        }
        else {
            return `https://${customDomain.domainName}`;
        }
    }
    get bucketArn() {
        return this.s3Bucket.bucketArn;
    }
    get bucketName() {
        return this.s3Bucket.bucketName;
    }
    get distributionId() {
        return this.cfDistribution.distributionId;
    }
    get distributionDomain() {
        return this.cfDistribution.distributionDomainName;
    }
    attachPermissions(permissions) {
        (0, permission_1.attachPermissionsToRole)(this.edgeLambdaRole, permissions);
    }
    getConstructMetadata() {
        return {
            type: "NextSite",
            data: {
                distributionId: this.cfDistribution.distributionId,
                customDomainUrl: this.customDomainUrl,
            },
        };
    }
    zipAppAssets(fileSizeLimit, buildDir) {
        // validate buildOutput exists
        const siteOutputPath = path.resolve(path.join(this.buildOutDir, "assets"));
        if (!fs.existsSync(siteOutputPath)) {
            throw new Error(`No build output found at "${siteOutputPath}" for the "${this.node.id}" NextjsSite.`);
        }
        // create zip files
        const script = path.join(__dirname, "../assets/BaseSite/archiver.js");
        const zipPath = path.resolve(path.join(buildDir, `NextjsSite-${this.node.id}-${this.node.addr}`));
        // clear zip path to ensure no partX.zip remain from previous build
        fs.removeSync(zipPath);
        const result = cross_spawn_1.default.sync("node", [script, siteOutputPath, zipPath, `${fileSizeLimit}`], {
            stdio: "inherit",
        });
        if (result.status !== 0) {
            console.error(`There was a problem generating the "${this.node.id}" NextjsSite package.`);
            process.exit(1);
        }
        // create assets
        const assets = [];
        for (let partId = 0;; partId++) {
            const zipFilePath = path.join(zipPath, `part${partId}.zip`);
            if (!fs.existsSync(zipFilePath)) {
                break;
            }
            assets.push(new s3Assets.Asset(this, `Asset${partId}`, {
                path: zipFilePath,
            }));
        }
        return assets;
    }
    zipAppStubAssets() {
        return [
            new s3Assets.Asset(this, "Asset", {
                path: path.resolve(__dirname, "../assets/NextjsSite/site-stub"),
            }),
        ];
    }
    createEdgeFunction(name, handlerPath) {
        // Use real code if:
        // - Next.js app was build; AND
        // - the Lambda code directory is not empty
        const hasRealCode = typeof this.buildOutDir === "string" &&
            fs.pathExistsSync(path.join(this.buildOutDir, handlerPath, "index.js"));
        // Create function asset
        const assetPath = hasRealCode && this.buildOutDir
            ? path.join(this.buildOutDir, handlerPath)
            : path.join(__dirname, "../assets/NextjsSite/edge-lambda-stub");
        const asset = new s3Assets.Asset(this, `${name}FunctionAsset`, {
            path: assetPath,
        });
        // Create function based on region
        const root = this.node.root;
        return root.region === "us-east-1"
            ? this.createEdgeFunctionInUE1(name, assetPath, asset, hasRealCode)
            : this.createEdgeFunctionInNonUE1(name, assetPath, asset, hasRealCode);
    }
    createEdgeFunctionInUE1(name, assetPath, asset, hasRealCode) {
        const { defaultFunctionProps: fnProps } = this.props;
        // Create function
        const fn = new lambda.Function(this, `${name}Function`, {
            description: `${name} handler for Next.js`,
            handler: "index-wrapper.handler",
            currentVersionOptions: {
                removalPolicy: cdk.RemovalPolicy.DESTROY,
            },
            logRetention: logs.RetentionDays.THREE_DAYS,
            code: lambda.Code.fromAsset(assetPath),
            runtime: lambda.Runtime.NODEJS_12_X,
            memorySize: (fnProps === null || fnProps === void 0 ? void 0 : fnProps.memorySize) || 512,
            timeout: cdk.Duration.seconds((fnProps === null || fnProps === void 0 ? void 0 : fnProps.timeout) || 10),
            role: this.edgeLambdaRole,
        });
        // Create alias
        fn.currentVersion.addAlias("live");
        // Deploy after the code is updated
        if (hasRealCode) {
            const updaterCR = this.createLambdaCodeReplacer(name, asset);
            fn.node.addDependency(updaterCR);
        }
        return fn.currentVersion;
    }
    createEdgeFunctionInNonUE1(name, assetPath, asset, hasRealCode) {
        const { defaultFunctionProps: fnProps } = this.props;
        // If app region is NOT us-east-1, create a Function in us-east-1
        // using a Custom Resource
        // Create a S3 bucket in us-east-1 to store Lambda code. Create
        // 1 bucket for all Edge functions.
        const bucketCR = crossRegionHelper.getOrCreateBucket(this);
        const bucketName = bucketCR.getAttString("BucketName");
        // Create a Lambda function in us-east-1
        const functionCR = crossRegionHelper.createFunction(this, name, this.edgeLambdaRole, bucketName, {
            Description: `handler for Next.js`,
            Handler: "index-wrapper.handler",
            Code: {
                S3Bucket: asset.s3BucketName,
                S3Key: asset.s3ObjectKey,
            },
            Runtime: lambda.Runtime.NODEJS_12_X.name,
            MemorySize: (fnProps === null || fnProps === void 0 ? void 0 : fnProps.memorySize) || 512,
            Timeout: cdk.Duration.seconds((fnProps === null || fnProps === void 0 ? void 0 : fnProps.timeout) || 10).toSeconds(),
            Role: this.edgeLambdaRole.roleArn,
        });
        const functionArn = functionCR.getAttString("FunctionArn");
        // Create a Lambda function version in us-east-1
        const versionCR = crossRegionHelper.createVersion(this, name, functionArn);
        const versionId = versionCR.getAttString("Version");
        crossRegionHelper.updateVersionLogicalId(functionCR, versionCR);
        // Deploy after the code is updated
        if (hasRealCode) {
            const updaterCR = this.createLambdaCodeReplacer(name, asset);
            functionCR.node.addDependency(updaterCR);
        }
        return lambda.Version.fromVersionArn(this, `${name}FunctionVersion`, `${functionArn}:${versionId}`);
    }
    createEdgeFunctionRole() {
        const { defaultFunctionProps: fnProps } = this.props;
        // Create function role
        const role = new iam.Role(this, `EdgeLambdaRole`, {
            assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal("lambda.amazonaws.com"), new iam.ServicePrincipal("edgelambda.amazonaws.com")),
            managedPolicies: [
                iam.ManagedPolicy.fromManagedPolicyArn(this, "EdgeLambdaPolicy", "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"),
            ],
        });
        // Attach permission
        this.s3Bucket.grantReadWrite(role);
        this.sqsRegenerationQueue.grantSendMessages(role);
        this.regenerationFunction.grantInvoke(role);
        if (fnProps === null || fnProps === void 0 ? void 0 : fnProps.permissions) {
            (0, permission_1.attachPermissionsToRole)(role, fnProps.permissions);
        }
        return role;
    }
    createRegenerationQueue() {
        const { sqsRegenerationQueue } = this.props;
        return new sqs.Queue(this, "RegenerationQueue", Object.assign(Object.assign({}, (sqsRegenerationQueue || {})), { 
            // We call the queue the same name as the bucket so that we can easily
            // reference it from within the lambda@edge, given we can't use env vars
            // in a lambda@edge
            queueName: `${this.s3Bucket.bucketName}.fifo`, fifo: true, removalPolicy: cdk.RemovalPolicy.DESTROY }));
    }
    createRegenerationFunction() {
        // Use real code if:
        // - Next.js app was build; AND
        // - the Lambda code directory is not empty
        let code;
        let updaterCR;
        if (this.buildOutDir &&
            fs.pathExistsSync(path.join(this.buildOutDir, "regeneration-lambda", "index.js"))) {
            const asset = new s3Assets.Asset(this, `RegenerationFunctionAsset`, {
                path: path.join(this.buildOutDir, "regeneration-lambda"),
            });
            code = lambda.Code.fromAsset(path.join(this.buildOutDir, "regeneration-lambda"));
            updaterCR = this.createLambdaCodeReplacer("Regeneration", asset);
        }
        else {
            code = lambda.Code.fromInline("  ");
        }
        // Create function
        const { defaultFunctionProps: fnProps } = this.props;
        const fn = new lambda.Function(this, "RegenerationFunction", {
            handler: "index-wrapper.handler",
            runtime: lambda.Runtime.NODEJS_12_X,
            memorySize: (fnProps === null || fnProps === void 0 ? void 0 : fnProps.memorySize) || 1024,
            timeout: cdk.Duration.seconds((fnProps === null || fnProps === void 0 ? void 0 : fnProps.timeout) || 30),
            code,
        });
        fn.addEventSource(new lambdaEventSources.SqsEventSource(this.sqsRegenerationQueue));
        // Grant permissions
        this.s3Bucket.grantReadWrite(fn);
        // Deploy after the code is updated
        if (updaterCR) {
            fn.node.addDependency(updaterCR);
        }
        return fn;
    }
    createLambdaCodeReplacer(name, asset) {
        // Note: Source code for the Lambda functions have "{{ ENV_KEY }}" in them.
        //       They need to be replaced with real values before the Lambda
        //       functions get deployed.
        var _a;
        const providerId = "LambdaCodeReplacerProvider";
        const resId = `${name}LambdaCodeReplacer`;
        const stack = cdk.Stack.of(this);
        let provider = stack.node.tryFindChild(providerId);
        // Create provider if not already created
        if (!provider) {
            provider = new lambda.Function(stack, providerId, {
                code: lambda.Code.fromAsset(path.join(__dirname, "../assets/NextjsSite/custom-resource")),
                layers: [this.awsCliLayer],
                runtime: lambda.Runtime.PYTHON_3_7,
                handler: "lambda-code-updater.handler",
                timeout: cdk.Duration.minutes(15),
                memorySize: 1024,
            });
        }
        // Allow provider to perform search/replace on the asset
        (_a = provider.role) === null || _a === void 0 ? void 0 : _a.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ["s3:*"],
            resources: [`arn:aws:s3:::${asset.s3BucketName}/${asset.s3ObjectKey}`],
        }));
        // Create custom resource
        const resource = new cdk.CustomResource(this, resId, {
            serviceToken: provider.functionArn,
            resourceType: "Custom::SSTLambdaCodeUpdater",
            properties: {
                Source: {
                    BucketName: asset.s3BucketName,
                    ObjectKey: asset.s3ObjectKey,
                },
                ReplaceValues: this.getLambdaContentReplaceValues(),
            },
        });
        return resource;
    }
    buildApp() {
        const { path: sitePath } = this.props;
        // validate site path exists
        if (!fs.existsSync(sitePath)) {
            throw new Error(`No path found at "${path.resolve(sitePath)}" for the "${this.node.id}" NextjsSite.`);
        }
        // Build command
        // Note: probably could pass JSON string also, but this felt safer.
        const root = this.node.root;
        const pathHash = (0, builder_1.getHandlerHash)(sitePath);
        const buildOutput = path.join(root.buildDir, pathHash);
        const configBuffer = Buffer.from(JSON.stringify({
            cwd: path.resolve(sitePath),
            args: ["build"],
        }));
        // Run build
        console.log(chalk_1.default.grey(`Building Next.js site ${sitePath}`));
        const result = cross_spawn_1.default.sync("node", [
            path.join(__dirname, "../assets/NextjsSite/build/build.js"),
            "--path",
            path.resolve(sitePath),
            "--output",
            path.resolve(buildOutput),
            "--config",
            configBuffer.toString("base64"),
        ], {
            cwd: sitePath,
            stdio: "inherit",
            env: Object.assign(Object.assign({}, process.env), (0, BaseSite_1.getBuildCmdEnvironment)(this.props.environment)),
        });
        if (result.status !== 0) {
            console.error(`There was a problem building the "${this.node.id}" NextjsSite.`);
            process.exit(1);
        }
        return buildOutput;
    }
    createS3Bucket() {
        const { s3Bucket } = this.props;
        return new s3.Bucket(this, "S3Bucket", Object.assign({ publicReadAccess: true, autoDeleteObjects: true, removalPolicy: cdk.RemovalPolicy.DESTROY }, (s3Bucket || {})));
    }
    createS3Deployment() {
        // Create a Lambda function that will be doing the uploading
        const uploader = new lambda.Function(this, "S3Uploader", {
            code: lambda.Code.fromAsset(path.join(__dirname, "../assets/BaseSite/custom-resource")),
            layers: [this.awsCliLayer],
            runtime: lambda.Runtime.PYTHON_3_7,
            handler: "s3-upload.handler",
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
        });
        this.s3Bucket.grantReadWrite(uploader);
        this.assets.forEach((asset) => asset.grantRead(uploader));
        // Create the custom resource function
        const handler = new lambda.Function(this, "S3Handler", {
            code: lambda.Code.fromAsset(path.join(__dirname, "../assets/BaseSite/custom-resource")),
            layers: [this.awsCliLayer],
            runtime: lambda.Runtime.PYTHON_3_7,
            handler: "s3-handler.handler",
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
            environment: {
                UPLOADER_FUNCTION_NAME: uploader.functionName,
            },
        });
        this.s3Bucket.grantReadWrite(handler);
        uploader.grantInvoke(handler);
        // Create custom resource
        const fileOptions = [
            {
                exclude: "*",
                include: "public/*",
                cacheControl: "public,max-age=31536000,must-revalidate",
            },
            {
                exclude: "*",
                include: "static/*",
                cacheControl: "public,max-age=31536000,must-revalidate",
            },
            {
                exclude: "*",
                include: "static-pages/*",
                cacheControl: "public,max-age=0,s-maxage=2678400,must-revalidate",
            },
            {
                exclude: "*",
                include: "_next/data/*",
                cacheControl: "public,max-age=0,s-maxage=2678400,must-revalidate",
            },
            {
                exclude: "*",
                include: "_next/static/*",
                cacheControl: "public,max-age=31536000,immutable",
            },
        ];
        return new cdk.CustomResource(this, "S3Deployment", {
            serviceToken: handler.functionArn,
            resourceType: "Custom::SSTBucketDeployment",
            properties: {
                Sources: this.assets.map((asset) => ({
                    BucketName: asset.s3BucketName,
                    ObjectKey: asset.s3ObjectKey,
                })),
                DestinationBucketName: this.s3Bucket.bucketName,
                FileOptions: (fileOptions || []).map(({ exclude, include, cacheControl }) => {
                    return [
                        "--exclude",
                        exclude,
                        "--include",
                        include,
                        "--cache-control",
                        cacheControl,
                    ];
                }),
                ReplaceValues: this.getS3ContentReplaceValues(),
            },
        });
    }
    /////////////////////
    // CloudFront Distribution
    /////////////////////
    createCloudFrontDistribution() {
        var _a, _b, _c, _d;
        const { cfCachePolicies, cfDistribution, customDomain } = this.props;
        const cfDistributionProps = cfDistribution || {};
        // Validate input
        if (cfDistributionProps.certificate) {
            throw new Error(`Do not configure the "cfDistribution.certificate". Use the "customDomain" to configure the NextjsSite domain certificate.`);
        }
        if (cfDistributionProps.domainNames) {
            throw new Error(`Do not configure the "cfDistribution.domainNames". Use the "customDomain" to configure the NextjsSite domain.`);
        }
        // Build domainNames
        const domainNames = [];
        if (!customDomain) {
            // no domain
        }
        else if (typeof customDomain === "string") {
            domainNames.push(customDomain);
        }
        else {
            domainNames.push(customDomain.domainName);
        }
        // Build behavior
        const origin = new origins.S3Origin(this.s3Bucket);
        const viewerProtocolPolicy = cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS;
        if (this.isPlaceholder) {
            return new cloudfront.Distribution(this, "Distribution", {
                defaultRootObject: "index.html",
                errorResponses: (0, BaseSite_1.buildErrorResponsesForRedirectToIndex)("index.html"),
                domainNames,
                certificate: this.acmCertificate,
                defaultBehavior: {
                    origin,
                    viewerProtocolPolicy,
                },
            });
        }
        // Build Edge functions
        const edgeLambdas = [
            {
                includeBody: true,
                eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,
                functionVersion: this.mainFunctionVersion,
            },
            {
                eventType: cloudfront.LambdaEdgeEventType.ORIGIN_RESPONSE,
                functionVersion: this.mainFunctionVersion,
            },
        ];
        // Build cache policy
        const staticCachePolicy = (_a = cfCachePolicies === null || cfCachePolicies === void 0 ? void 0 : cfCachePolicies.staticCachePolicy) !== null && _a !== void 0 ? _a : this.createCloudFrontStaticCachePolicy();
        const imageCachePolicy = (_b = cfCachePolicies === null || cfCachePolicies === void 0 ? void 0 : cfCachePolicies.imageCachePolicy) !== null && _b !== void 0 ? _b : this.createCloudFrontImageCachePolicy();
        const lambdaCachePolicy = (_c = cfCachePolicies === null || cfCachePolicies === void 0 ? void 0 : cfCachePolicies.lambdaCachePolicy) !== null && _c !== void 0 ? _c : this.createCloudFrontLambdaCachePolicy();
        // Create Distribution
        return new cloudfront.Distribution(this, "Distribution", Object.assign(Object.assign({ 
            // these values can be overwritten by cfDistributionProps
            defaultRootObject: "" }, cfDistributionProps), { 
            // these values can NOT be overwritten by cfDistributionProps
            domainNames, certificate: this.acmCertificate, defaultBehavior: Object.assign(Object.assign({ viewerProtocolPolicy,
                origin, allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS, cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS, compress: true, cachePolicy: lambdaCachePolicy }, (cfDistributionProps.defaultBehavior || {})), { 
                // concatenate edgeLambdas
                edgeLambdas: [
                    ...edgeLambdas,
                    ...(((_d = cfDistributionProps.defaultBehavior) === null || _d === void 0 ? void 0 : _d.edgeLambdas) || []),
                ] }), additionalBehaviors: Object.assign({ [this.pathPattern("_next/image*")]: {
                    viewerProtocolPolicy,
                    origin,
                    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,
                    cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,
                    compress: true,
                    cachePolicy: imageCachePolicy,
                    originRequestPolicy: new cloudfront.OriginRequestPolicy(this, "ImageOriginRequest", {
                        queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.all(),
                    }),
                    edgeLambdas: [
                        {
                            eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,
                            functionVersion: this.imageFunctionVersion,
                        },
                    ],
                }, [this.pathPattern("_next/data/*")]: {
                    viewerProtocolPolicy,
                    origin,
                    allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS,
                    cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,
                    compress: true,
                    cachePolicy: lambdaCachePolicy,
                    edgeLambdas,
                }, [this.pathPattern("_next/*")]: {
                    viewerProtocolPolicy,
                    origin,
                    allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS,
                    cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,
                    compress: true,
                    cachePolicy: staticCachePolicy,
                }, [this.pathPattern("static/*")]: {
                    viewerProtocolPolicy,
                    origin,
                    allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS,
                    cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,
                    compress: true,
                    cachePolicy: staticCachePolicy,
                }, [this.pathPattern("api/*")]: {
                    viewerProtocolPolicy,
                    origin,
                    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,
                    cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,
                    compress: true,
                    cachePolicy: lambdaCachePolicy,
                    edgeLambdas: [
                        {
                            includeBody: true,
                            eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,
                            functionVersion: this.apiFunctionVersion,
                        },
                    ],
                } }, (cfDistributionProps.additionalBehaviors || {})) }));
    }
    createCloudFrontStaticCachePolicy() {
        return new cloudfront.CachePolicy(this, "StaticsCache", NextjsSite.staticCachePolicyProps);
    }
    createCloudFrontImageCachePolicy() {
        return new cloudfront.CachePolicy(this, "ImageCache", NextjsSite.imageCachePolicyProps);
    }
    createCloudFrontLambdaCachePolicy() {
        return new cloudfront.CachePolicy(this, "LambdaCache", NextjsSite.lambdaCachePolicyProps);
    }
    createCloudFrontInvalidation() {
        // Create a Lambda function that will be doing the invalidation
        const invalidator = new lambda.Function(this, "CloudFrontInvalidator", {
            code: lambda.Code.fromAsset(path.join(__dirname, "../assets/BaseSite/custom-resource")),
            layers: [this.awsCliLayer],
            runtime: lambda.Runtime.PYTHON_3_7,
            handler: "cf-invalidate.handler",
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
        });
        // Grant permissions to invalidate CF Distribution
        invalidator.addToRolePolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                "cloudfront:GetInvalidation",
                "cloudfront:CreateInvalidation",
            ],
            resources: ["*"],
        }));
        // need the BuildId field so this CR gets updated on each deploy
        let buildId;
        if (this.isPlaceholder) {
            buildId = "live";
        }
        else {
            const buildIdFile = path.resolve(this.buildOutDir, "assets", "BUILD_ID");
            buildId = fs.readFileSync(buildIdFile).toString();
        }
        // Create custom resource
        const waitForInvalidation = this.props.waitForInvalidation === false ? false : true;
        return new cdk.CustomResource(this, "CloudFrontInvalidation", {
            serviceToken: invalidator.functionArn,
            resourceType: "Custom::SSTCloudFrontInvalidation",
            properties: {
                BuildId: buildId,
                DistributionId: this.cfDistribution.distributionId,
                DistributionPaths: ["/*"],
                WaitForInvalidation: waitForInvalidation,
            },
        });
    }
    /////////////////////
    // Custom Domain
    /////////////////////
    validateCustomDomainSettings() {
        const { customDomain } = this.props;
        if (!customDomain) {
            return;
        }
        if (typeof customDomain === "string") {
            return;
        }
        if (customDomain.isExternalDomain === true) {
            if (!customDomain.certificate) {
                throw new Error(`A valid certificate is required when "isExternalDomain" is set to "true".`);
            }
            if (customDomain.domainAlias) {
                throw new Error(`Domain alias is only supported for domains hosted on Amazon Route 53. Do not set the "customDomain.domainAlias" when "isExternalDomain" is enabled.`);
            }
            if (customDomain.hostedZone) {
                throw new Error(`Hosted zones can only be configured for domains hosted on Amazon Route 53. Do not set the "customDomain.hostedZone" when "isExternalDomain" is enabled.`);
            }
        }
    }
    lookupHostedZone() {
        const { customDomain } = this.props;
        // Skip if customDomain is not configured
        if (!customDomain) {
            return;
        }
        let hostedZone;
        if (typeof customDomain === "string") {
            hostedZone = route53.HostedZone.fromLookup(this, "HostedZone", {
                domainName: customDomain,
            });
        }
        else if ((0, Construct_1.isCDKConstruct)(customDomain.hostedZone)) {
            hostedZone = customDomain.hostedZone;
        }
        else if (typeof customDomain.hostedZone === "string") {
            hostedZone = route53.HostedZone.fromLookup(this, "HostedZone", {
                domainName: customDomain.hostedZone,
            });
        }
        else if (typeof customDomain.domainName === "string") {
            // Skip if domain is not a Route53 domain
            if (customDomain.isExternalDomain === true) {
                return;
            }
            hostedZone = route53.HostedZone.fromLookup(this, "HostedZone", {
                domainName: customDomain.domainName,
            });
        }
        else {
            hostedZone = customDomain.hostedZone;
        }
        return hostedZone;
    }
    createCertificate() {
        const { customDomain } = this.props;
        if (!customDomain) {
            return;
        }
        let acmCertificate;
        // HostedZone is set for Route 53 domains
        if (this.hostedZone) {
            if (typeof customDomain === "string") {
                acmCertificate = new acm.DnsValidatedCertificate(this, "Certificate", {
                    domainName: customDomain,
                    hostedZone: this.hostedZone,
                    region: "us-east-1",
                });
            }
            else if (customDomain.certificate) {
                acmCertificate = customDomain.certificate;
            }
            else {
                acmCertificate = new acm.DnsValidatedCertificate(this, "Certificate", {
                    domainName: customDomain.domainName,
                    hostedZone: this.hostedZone,
                    region: "us-east-1",
                });
            }
        }
        // HostedZone is NOT set for non-Route 53 domains
        else {
            if (typeof customDomain !== "string") {
                acmCertificate = customDomain.certificate;
            }
        }
        return acmCertificate;
    }
    createRoute53Records() {
        const { customDomain } = this.props;
        if (!customDomain || !this.hostedZone) {
            return;
        }
        let recordName;
        let domainAlias;
        if (typeof customDomain === "string") {
            recordName = customDomain;
        }
        else {
            recordName = customDomain.domainName;
            domainAlias = customDomain.domainAlias;
        }
        // Create DNS record
        const recordProps = {
            recordName,
            zone: this.hostedZone,
            target: route53.RecordTarget.fromAlias(new route53Targets.CloudFrontTarget(this.cfDistribution)),
        };
        new route53.ARecord(this, "AliasRecord", recordProps);
        new route53.AaaaRecord(this, "AliasRecordAAAA", recordProps);
        // Create Alias redirect record
        if (domainAlias) {
            new route53Patterns.HttpsRedirect(this, "Redirect", {
                zone: this.hostedZone,
                recordNames: [domainAlias],
                targetDomain: recordName,
            });
        }
    }
    /////////////////////
    // Helper Functions
    /////////////////////
    pathPattern(pattern) {
        const { basePath } = this.routesManifest || {};
        return basePath && basePath.length > 0
            ? `${basePath.slice(1)}/${pattern}`
            : pattern;
    }
    readRoutesManifest() {
        return fs.readJSONSync(path.join(this.buildOutDir, "default-lambda/routes-manifest.json"));
    }
    getS3ContentReplaceValues() {
        const replaceValues = [];
        Object.entries(this.props.environment || {})
            .filter(([, value]) => cdk.Token.isUnresolved(value))
            .forEach(([key, value]) => {
            const token = `{{ ${key} }}`;
            replaceValues.push({
                files: "**/*.html",
                search: token,
                replace: value,
            }, {
                files: "**/*.js",
                search: token,
                replace: value,
            }, {
                files: "**/*.json",
                search: token,
                replace: value,
            });
        });
        return replaceValues;
    }
    getLambdaContentReplaceValues() {
        const replaceValues = [];
        // The Next.js app can have environment variables like
        // `process.env.API_URL` in the JS code. `process.env.API_URL` might or
        // might not get resolved on `next build` if it is used in
        // server-side functions, ie. getServerSideProps().
        // Because Lambda@Edge does not support environment variables, we will
        // use the trick of replacing "{{ _SST_NEXTJS_SITE_ENVIRONMENT_ }}" with
        // a JSON encoded string of all environment key-value pairs. This string
        // will then get decoded at run time.
        const lambdaEnvs = {};
        Object.entries(this.props.environment || {}).forEach(([key, value]) => {
            const token = `{{ ${key} }}`;
            replaceValues.push({
                files: "**/*.html",
                search: token,
                replace: value,
            }, {
                files: "**/*.js",
                search: token,
                replace: value,
            }, {
                files: "**/*.json",
                search: token,
                replace: value,
            });
            lambdaEnvs[key] = value;
        });
        replaceValues.push({
            files: "**/*.js",
            search: '"{{ _SST_NEXTJS_SITE_ENVIRONMENT_ }}"',
            replace: JSON.stringify(lambdaEnvs),
        });
        return replaceValues;
    }
    registerSiteEnvironment() {
        const environmentOutputs = {};
        for (const [key, value] of Object.entries(this.props.environment || {})) {
            const outputId = `SstSiteEnv_${key}`;
            const output = new cdk.CfnOutput(this, outputId, { value });
            environmentOutputs[key] = cdk.Stack.of(this).getLogicalId(output);
        }
        const root = this.node.root;
        root.registerSiteEnvironment({
            id: this.node.id,
            path: this.props.path,
            stack: cdk.Stack.of(this).node.id,
            environmentOutputs,
        });
    }
}
exports.NextjsSite = NextjsSite;
NextjsSite.staticCachePolicyProps = {
    queryStringBehavior: cloudfront.CacheQueryStringBehavior.none(),
    headerBehavior: cloudfront.CacheHeaderBehavior.none(),
    cookieBehavior: cloudfront.CacheCookieBehavior.none(),
    defaultTtl: cdk.Duration.days(30),
    maxTtl: cdk.Duration.days(30),
    minTtl: cdk.Duration.days(30),
    enableAcceptEncodingBrotli: true,
    enableAcceptEncodingGzip: true,
    comment: "SST NextjsSite Static Default Cache Policy",
};
NextjsSite.imageCachePolicyProps = {
    queryStringBehavior: cloudfront.CacheQueryStringBehavior.all(),
    headerBehavior: cloudfront.CacheHeaderBehavior.allowList("Accept"),
    cookieBehavior: cloudfront.CacheCookieBehavior.none(),
    defaultTtl: cdk.Duration.days(1),
    maxTtl: cdk.Duration.days(365),
    minTtl: cdk.Duration.days(0),
    enableAcceptEncodingBrotli: true,
    enableAcceptEncodingGzip: true,
    comment: "SST NextjsSite Image Default Cache Policy",
};
NextjsSite.lambdaCachePolicyProps = {
    queryStringBehavior: cloudfront.CacheQueryStringBehavior.all(),
    headerBehavior: cloudfront.CacheHeaderBehavior.none(),
    cookieBehavior: cloudfront.CacheCookieBehavior.all(),
    defaultTtl: cdk.Duration.seconds(0),
    maxTtl: cdk.Duration.days(365),
    minTtl: cdk.Duration.seconds(0),
    enableAcceptEncodingBrotli: true,
    enableAcceptEncodingGzip: true,
    comment: "SST NextjsSite Lambda Default Cache Policy",
};
//# sourceMappingURL=data:application/json;base64,