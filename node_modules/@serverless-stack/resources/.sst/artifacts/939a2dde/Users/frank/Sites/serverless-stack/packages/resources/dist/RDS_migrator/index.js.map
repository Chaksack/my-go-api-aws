{
  "version": 3,
  "sources": ["../../../../../../../../../../../dist/RDS_migrator/index.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/util/object-utils.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/identifier-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/table-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/alter-table-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/create-index-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/create-schema-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/create-table-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-index-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-schema-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-table-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/alias-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/operation-node-source.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/complex-expression-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/table-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/add-column-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/column-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/alter-column-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/column-definition-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/data-type-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-column-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/rename-column-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/util/prevent-await.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/check-constraint-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/select-all-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/reference-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/references-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/reference-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/value-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/raw-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/util/random-string.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/util/query-id.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-executor/query-executor.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-executor/noop-query-executor.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/raw-builder/raw-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/default-value-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/generated-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/default-value-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/column-definition-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/modify-column-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/data-type-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/foreign-key-constraint-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/add-constraint-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/unique-constraint-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/alter-table-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/list-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/create-index-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/create-schema-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/primary-constraint-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/create-table-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/drop-index-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/drop-schema-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/drop-table-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/create-view-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/create-view-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-view-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/drop-view-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/schema/schema.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dynamic/dynamic.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/driver/default-connection-provider.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/and-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/or-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/on-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/join-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/filter-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/operator-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/parens-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/value-list-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/value-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/filter-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/join-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/selection-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/select-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/from-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/group-by-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/having-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/order-by-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/select-query-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/insert-query-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/update-query-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/delete-query-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/where-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/returning-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/query-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/order-by-item-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/order-by-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/limit-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/offset-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/group-by-item-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/group-by-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/union-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/union-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/no-result-error.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/select-query-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/values-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/insert-values-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/column-update-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/update-set-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/insert-result.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/on-conflict-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/insert-query-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/delete-result.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/delete-query-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/update-result.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/update-query-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/with-parser.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/with-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-creator.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-executor/default-query-executor.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/util/performance-now.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/driver/runtime-driver.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/driver/single-connection-provider.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/driver/driver.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/join-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/function-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/expression-builder.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/parser/parse-context.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/util/log.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/util/private-symbols.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/kysely.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/operation-node-visitor.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/query-compiler/compiled-query.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/dialect-adapter-base.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-query-compiler.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/migration/migrator.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-introspector.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-adapter.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-query-compiler.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-introspector.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-adapter.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-query-compiler.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-introspector.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-adapter.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/camel-case/camel-case-transformer.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/camel-case/camel-case.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/camel-case/camel-case-plugin.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/deduplicate-joins/deduplicate-joins-transformer.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/deduplicate-joins/deduplicate-joins-plugin.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-constraint-node.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/migration/file-migration-provider.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-driver.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-driver.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-driver.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely-data-api/dist/esm/data-api-driver.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely-data-api/dist/esm/data-api-query-compiler.js", "../../../../../../../../../../../dist/RDS_migrator/node_modules/kysely-data-api/dist/esm/data-api-dialect.js"],
  "sourcesContent": ["import path from \"path\";\nimport { Kysely, FileMigrationProvider, Migrator } from \"kysely\";\nimport { DataApiDialect } from \"kysely-data-api\";\nimport RDSDataService from \"aws-sdk/clients/rdsdataservice\";\n\nexport async function handler() {\n  const db = new Kysely({\n    dialect: new DataApiDialect({\n      mode: process.env.RDS_ENGINE_MODE,\n      driver: {\n        client: new RDSDataService(),\n        database: process.env.RDS_DATABASE,\n        secretArn: process.env.RDS_SECRET,\n        resourceArn: process.env.RDS_ARN,\n      },\n    }),\n  });\n\n  const migrator = new Migrator({\n    db,\n    provider: new FileMigrationProvider(path.resolve(process.env.RDS_MIGRATIONS_PATH)),\n  });\n\n  const response = await migrator.migrateToLatest();\n  if (response.error) throw response.error;\n  return response.results;\n}\n", "/// <reference types=\"./object-utils.d.ts\" />\nexport function isEmpty(obj) {\n    if (Array.isArray(obj) || isString(obj) || isBuffer(obj)) {\n        return obj.length === 0;\n    }\n    else if (obj) {\n        return Object.keys(obj).length === 0;\n    }\n    return false;\n}\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\nexport function isNumber(obj) {\n    return typeof obj === 'number';\n}\nexport function isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nexport function isNull(obj) {\n    return obj === null;\n}\nexport function isDate(obj) {\n    return obj instanceof Date;\n}\nexport function isBigInt(obj) {\n    return typeof obj === 'bigint';\n}\n// Don't change the returnd type to `obj is Buffer` to not create a\n// hard dependency to node.\nexport function isBuffer(obj) {\n    return typeof Buffer !== 'undefined' && Buffer.isBuffer(obj);\n}\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\nexport function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexport function getLast(arr) {\n    return arr[arr.length - 1];\n}\nexport function freeze(obj) {\n    return Object.freeze(obj);\n}\nexport function asArray(arg) {\n    if (Array.isArray(arg)) {\n        return arg;\n    }\n    else {\n        return [arg];\n    }\n}\nexport function asReadonlyArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return freeze([arg]);\n    }\n}\nexport function isReadonlyArray(arg) {\n    return Array.isArray(arg);\n}\nexport function noop(obj) {\n    return obj;\n}\nexport function compare(obj1, obj2) {\n    if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {\n        return compareArrays(obj1, obj2);\n    }\n    else if (isObject(obj1) && isObject(obj2)) {\n        return compareObjects(obj1, obj2);\n    }\n    return obj1 === obj2;\n}\nfunction compareArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; ++i) {\n        if (!compare(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObjects(obj1, obj2) {\n    if (isBuffer(obj1) && isBuffer(obj2)) {\n        return compareBuffers(obj1, obj2);\n    }\n    else if (isDate(obj1) && isDate(obj2)) {\n        return compareDates(obj1, obj2);\n    }\n    return compareGenericObjects(obj1, obj2);\n}\nfunction compareBuffers(buf1, buf2) {\n    return Buffer.compare(buf1, buf2) === 0;\n}\nfunction compareDates(date1, date2) {\n    return date1.getTime() === date2.getTime();\n}\nfunction compareGenericObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        if (!compare(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n", "/// <reference types=\"./identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const IdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'IdentifierNode';\n    },\n    create(identifier) {\n        return freeze({\n            kind: 'IdentifierNode',\n            identifier,\n        });\n    },\n});\n", "/// <reference types=\"./table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const TableNode = freeze({\n    is(node) {\n        return node.kind === 'TableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'TableNode',\n            table: IdentifierNode.create(table),\n        });\n    },\n    createWithSchema(schema, table) {\n        return freeze({\n            kind: 'TableNode',\n            schema: IdentifierNode.create(schema),\n            table: IdentifierNode.create(table),\n        });\n    },\n});\n", "/// <reference types=\"./alter-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { TableNode } from './table-node.js';\n/**\n * @internal\n */\nexport const AlterTableNode = freeze({\n    is(node) {\n        return node.kind === 'AlterTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'AlterTableNode',\n            table: TableNode.create(table),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./create-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateIndexNode = freeze({\n    is(node) {\n        return node.kind === 'CreateIndexNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateIndexNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./create-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'CreateSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'CreateSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(createSchema, params) {\n        return freeze({\n            ...createSchema,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./create-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CreateTableNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'CreateTableNode',\n            table,\n            columns: freeze([]),\n        });\n    },\n    cloneWithColumn(createTable, column) {\n        return freeze({\n            ...createTable,\n            columns: freeze([...createTable.columns, column]),\n        });\n    },\n    cloneWithConstraint(createTable, constraint) {\n        return freeze({\n            ...createTable,\n            constraints: createTable.constraints\n                ? freeze([...createTable.constraints, constraint])\n                : freeze([constraint]),\n        });\n    },\n    cloneWith(createTable, params) {\n        return freeze({\n            ...createTable,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./drop-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropIndexNode = freeze({\n    is(node) {\n        return node.kind === 'DropIndexNode';\n    },\n    create(name, params) {\n        return freeze({\n            kind: 'DropIndexNode',\n            name: IdentifierNode.create(name),\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, props) {\n        return freeze({\n            ...dropIndex,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./drop-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'DropSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'DropSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(dropSchema, params) {\n        return freeze({\n            ...dropSchema,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./drop-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTableNode = freeze({\n    is(node) {\n        return node.kind === 'DropTableNode';\n    },\n    create(table, params) {\n        return freeze({\n            kind: 'DropTableNode',\n            table,\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, params) {\n        return freeze({\n            ...dropIndex,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./alias-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const AliasNode = freeze({\n    is(node) {\n        return node.kind === 'AliasNode';\n    },\n    create(node, alias) {\n        return freeze({\n            kind: 'AliasNode',\n            node,\n            alias: IdentifierNode.create(alias),\n        });\n    },\n});\n", "/// <reference types=\"./operation-node-source.d.ts\" />\nimport { isFunction, isObject } from '../util/object-utils.js';\nexport function isOperationNodeSource(obj) {\n    return isObject(obj) && isFunction(obj.toOperationNode);\n}\n", "/// <reference types=\"./complex-expression-parser.d.ts\" />\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { isFunction } from '../util/object-utils.js';\nexport function parseComplexExpression(ctx, exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(ctx.createExpressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid expression: ${JSON.stringify(exp)}`);\n}\nexport function parseAliasedComplexExpression(ctx, exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(ctx.createExpressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);\n}\nexport function isComplexExpression(obj) {\n    return isOperationNodeSource(obj) || isFunction(obj);\n}\n", "/// <reference types=\"./table-parser.d.ts\" />\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { parseAliasedComplexExpression, } from './complex-expression-parser.js';\nexport function parseTableExpressionOrList(ctx, table) {\n    if (isReadonlyArray(table)) {\n        return table.map((it) => parseTableExpression(ctx, it));\n    }\n    else {\n        return [parseTableExpression(ctx, table)];\n    }\n}\nexport function parseTableExpression(ctx, table) {\n    if (isString(table)) {\n        return parseAliasedTable(table);\n    }\n    else {\n        return parseAliasedComplexExpression(ctx, table);\n    }\n}\nexport function parseAliasedTable(from) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (from.includes(ALIAS_SEPARATOR)) {\n        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseTable(table), alias);\n    }\n    else {\n        return parseTable(from);\n    }\n}\nexport function parseTable(from) {\n    const SCHEMA_SEPARATOR = '.';\n    if (from.includes(SCHEMA_SEPARATOR)) {\n        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);\n        return TableNode.createWithSchema(schema, table);\n    }\n    else {\n        return TableNode.create(from);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "/// <reference types=\"./add-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AddColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'AddColumnNode',\n            column,\n        });\n    },\n});\n", "/// <reference types=\"./column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const ColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ColumnNode',\n            column: IdentifierNode.create(column),\n        });\n    },\n});\n", "/// <reference types=\"./alter-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const AlterColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AlterColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'AlterColumnNode',\n            column: ColumnNode.create(column),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./column-definition-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const ColumnDefinitionNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnDefinitionNode';\n    },\n    create(column, dataType) {\n        return freeze({\n            kind: 'ColumnDefinitionNode',\n            column: ColumnNode.create(column),\n            dataType,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./data-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DataTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DataTypeNode';\n    },\n    create(dataType) {\n        return freeze({\n            kind: 'DataTypeNode',\n            dataType,\n        });\n    },\n});\n", "/// <reference types=\"./drop-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const DropColumnNode = freeze({\n    is(node) {\n        return node.kind === 'DropColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'DropColumnNode',\n            column: ColumnNode.create(column),\n        });\n    },\n});\n", "/// <reference types=\"./rename-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const RenameColumnNode = freeze({\n    is(node) {\n        return node.kind === 'RenameColumnNode';\n    },\n    create(column, newColumn) {\n        return freeze({\n            kind: 'RenameColumnNode',\n            column: ColumnNode.create(column),\n            renameTo: ColumnNode.create(newColumn),\n        });\n    },\n});\n", "/// <reference types=\"./prevent-await.d.ts\" />\nexport function preventAwait(clazz, message) {\n    Object.defineProperties(clazz.prototype, {\n        then: {\n            enumerable: false,\n            value: () => {\n                throw new Error(message);\n            },\n        },\n    });\n}\n", "/// <reference types=\"./check-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CheckConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'CheckConstraintNode';\n    },\n    create(expression, constraintName) {\n        return freeze({\n            kind: 'CheckConstraintNode',\n            expression,\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./select-all-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectAllNode = freeze({\n    is(node) {\n        return node.kind === 'SelectAllNode';\n    },\n    create() {\n        return freeze({\n            kind: 'SelectAllNode',\n        });\n    },\n});\n", "/// <reference types=\"./reference-node.d.ts\" />\nimport { TableNode } from './table-node.js';\nimport { SelectAllNode } from './select-all-node.js';\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'ReferenceNode';\n    },\n    create(table, column) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column,\n        });\n    },\n    createSelectAll(table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table: TableNode.create(table),\n            column: SelectAllNode.create(),\n        });\n    },\n});\n", "/// <reference types=\"./references-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReferencesNode = freeze({\n    is(node) {\n        return node.kind === 'ReferencesNode';\n    },\n    create(table, columns) {\n        return freeze({\n            kind: 'ReferencesNode',\n            table,\n            columns: freeze([...columns]),\n        });\n    },\n    cloneWithOnDelete(references, onDelete) {\n        return freeze({\n            ...references,\n            onDelete,\n        });\n    },\n    cloneWithOnUpdate(references, onUpdate) {\n        return freeze({\n            ...references,\n            onUpdate,\n        });\n    },\n});\n", "/// <reference types=\"./dynamic-reference-builder.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicReferenceBuilder {\n    #dynamicReference;\n    get dynamicReference() {\n        return this.#dynamicReference;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param R\n     * which causes this type to be equal to DynamicReferenceBuilder with\n     * any R.\n     */\n    get refType() {\n        return undefined;\n    }\n    constructor(reference) {\n        this.#dynamicReference = reference;\n    }\n    toOperationNode() {\n        return parseStringReference(this.#dynamicReference);\n    }\n}\nexport function isDynamicReferenceBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.dynamicReference));\n}\n", "/// <reference types=\"./reference-parser.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ReferenceNode } from '../operation-node/reference-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { parseComplexExpression, } from './complex-expression-parser.js';\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nexport function parseReferenceExpressionOrList(ctx, arg) {\n    if (isReadonlyArray(arg)) {\n        return arg.map((it) => parseReferenceExpression(ctx, it));\n    }\n    else {\n        return [parseReferenceExpression(ctx, arg)];\n    }\n}\nexport function parseReferenceExpression(ctx, exp) {\n    if (isString(exp)) {\n        return parseStringReference(exp);\n    }\n    else if (isDynamicReferenceBuilder(exp)) {\n        return exp.toOperationNode();\n    }\n    return parseComplexExpression(ctx, exp);\n}\nexport function parseStringReference(ref) {\n    const COLUMN_SEPARATOR = '.';\n    if (ref.includes(COLUMN_SEPARATOR)) {\n        const parts = ref.split(COLUMN_SEPARATOR).map(trim);\n        if (parts.length === 3) {\n            return parseStringReferenceWithTableAndSchema(parts);\n        }\n        else if (parts.length === 2) {\n            return parseStringReferenceWithTable(parts);\n        }\n        else {\n            throw new Error(`invalid column reference ${ref}`);\n        }\n    }\n    else {\n        return ColumnNode.create(ref);\n    }\n}\nexport function parseAliasedStringReference(ref) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (ref.includes(ALIAS_SEPARATOR)) {\n        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseStringReference(columnRef), alias);\n    }\n    else {\n        return parseStringReference(ref);\n    }\n}\nexport function parseColumnName(column) {\n    return ColumnNode.create(column);\n}\nfunction parseStringReferenceWithTableAndSchema(parts) {\n    const [schema, table, column] = parts;\n    return ReferenceNode.create(TableNode.createWithSchema(schema, table), ColumnNode.create(column));\n}\nfunction parseStringReferenceWithTable(parts) {\n    const [table, column] = parts;\n    return ReferenceNode.create(TableNode.create(table), ColumnNode.create(column));\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "/// <reference types=\"./value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueNode = freeze({\n    is(node) {\n        return node.kind === 'ValueNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n        });\n    },\n    createImmediate(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n            immediate: true,\n        });\n    },\n});\n", "/// <reference types=\"./raw-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const RawNode = freeze({\n    is(node) {\n        return node.kind === 'RawNode';\n    },\n    create(sqlFragments, params) {\n        return freeze({\n            kind: 'RawNode',\n            sqlFragments: freeze(sqlFragments),\n            params: freeze(params),\n        });\n    },\n    createWithSql(sql) {\n        return RawNode.create([sql], []);\n    },\n});\n", "/// <reference types=\"./random-string.d.ts\" />\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nexport function randomString(length) {\n    let chars = '';\n    for (let i = 0; i < length; ++i) {\n        chars += randomChar();\n    }\n    return chars;\n}\nfunction randomChar() {\n    return CHARS[Math.floor(Math.random() * CHARS.length)];\n}\n", "/// <reference types=\"./query-id.d.ts\" />\nimport { freeze } from './object-utils.js';\nimport { randomString } from './random-string.js';\nexport function createQueryId() {\n    return freeze({\n        queryId: randomString(8),\n    });\n}\n", "/// <reference types=\"./query-executor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nconst NO_PLUGINS = freeze([]);\n/**\n * This class abstracts away the details of how to compile a query into SQL\n * and execute it. Instead of passing around all those details, {@link SelectQueryBuilder}\n * and other classes that execute queries can just pass around and instance of\n * `QueryExecutor`.\n */\nexport class QueryExecutor {\n    #plugins;\n    constructor(plugins) {\n        this.#plugins = plugins ?? NO_PLUGINS;\n    }\n    get plugins() {\n        return this.#plugins;\n    }\n    /**\n     * Given the query the user has built (expressed as an operation node tree)\n     * this method runs it through all plugins' `transformQuery` methods and\n     * returns the result.\n     */\n    transformQuery(node, queryId) {\n        for (const plugin of this.#plugins) {\n            const transformedNode = plugin.transformQuery({ node, queryId });\n            // We need to do a runtime check here. There is no good way\n            // to write types that enforce this constraint.\n            if (transformedNode.kind === node.kind) {\n                node = transformedNode;\n            }\n            else {\n                throw new Error([\n                    `KyselyPlugin.transformQuery must return a node`,\n                    `of the same kind that was given to it.`,\n                    `The plugin was given a ${node.kind}`,\n                    `but it returned a ${transformedNode.kind}`,\n                ].join(' '));\n            }\n        }\n        return node;\n    }\n    /**\n     * Executes a compiled query and runs the result through all plugins'\n     * `transformResult` method.\n     */\n    async executeQuery(compiledQuery, queryId) {\n        const result = await this.executeQueryImpl(compiledQuery, queryId);\n        return this.#transformResult(result, queryId);\n    }\n    async #transformResult(result, queryId) {\n        for (const plugin of this.#plugins) {\n            result = await plugin.transformResult({ result, queryId });\n        }\n        return result;\n    }\n}\n", "/// <reference types=\"./noop-query-executor.d.ts\" />\nimport { QueryExecutor } from './query-executor.js';\n/**\n * A {@link QueryExecutor} subclass that can be used when you don't\n * have a {@link QueryCompiler}, {@link ConnectionProvider} or any\n * other needed things to actually execute queries.\n */\nexport class NoopQueryExecutor extends QueryExecutor {\n    compileQuery() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    async executeQueryImpl() {\n        throw new Error('this query cannot be executed');\n    }\n    withConnectionProvider() {\n        throw new Error('this query cannot have a connection provider');\n    }\n    withPlugin(plugin) {\n        return new NoopQueryExecutor([...this.plugins, plugin]);\n    }\n    withPluginAtFront(plugin) {\n        return new NoopQueryExecutor([plugin, ...this.plugins]);\n    }\n    withoutPlugins() {\n        return new NoopQueryExecutor([]);\n    }\n}\n", "/// <reference types=\"./raw-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { freeze } from '../util/object-utils.js';\nimport { NoopQueryExecutor } from '../query-executor/noop-query-executor.js';\nexport class RawBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze({\n            queryId: props.queryId ?? createQueryId(),\n            executor: props.executor ?? new NoopQueryExecutor(),\n            sql: props.sql,\n            parameters: props.parameters,\n        });\n    }\n    as(alias) {\n        return new AliasedRawBuilder(this, alias);\n    }\n    /**\n     * Change the output type of the raw expression.\n     *\n     * This doesn't produce any SQL. This methods simply returns a copy\n     * of this `RawBuilder` with a new output type.\n     */\n    castTo() {\n        return new RawBuilder({\n            ...this.#props,\n        });\n    }\n    withPlugin(plugin) {\n        return new RawBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        const parameterPlaceholderRegex = /(\\?\\??)/g;\n        const sql = this.#props.sql;\n        const parameters = this.#props.parameters ?? [];\n        const sqlFragments = [];\n        const argNodes = [];\n        let paramIdx = 0;\n        let sqlIdx = 0;\n        let match = null;\n        while ((match = parameterPlaceholderRegex.exec(sql))) {\n            const str = match[1];\n            if (paramIdx >= parameters.length) {\n                throw new Error(`value not provided for all placeholders in string ${sql}`);\n            }\n            if (match.index > 0 && sql[match.index - 1] === '\\\\') {\n                continue;\n            }\n            sqlFragments.push(sql.slice(sqlIdx, match.index).replace(/\\\\\\?/g, '?'));\n            argNodes.push(parseRawArg(str, parameters[paramIdx]));\n            sqlIdx = match.index + str.length;\n            ++paramIdx;\n        }\n        sqlFragments.push(sql.slice(sqlIdx));\n        const rawNode = RawNode.create(sqlFragments, argNodes);\n        return this.#props.executor.transformQuery(rawNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        return this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(RawBuilder, \"don't await RawBuilder instances directly. To execute the query you need to call `execute`\");\n/**\n * {@link RawBuilder} with an alias. The result of calling {@link RawBuilder.as}.\n */\nexport class AliasedRawBuilder {\n    #rawBuilder;\n    #alias;\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param A\n     * which causes this type to be equal to AliasedRawBuilder with any A\n     * as long as O is the same.\n     */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#rawBuilder.toOperationNode(), this.#alias);\n    }\n    constructor(rawBuilder, alias) {\n        this.#rawBuilder = rawBuilder;\n        this.#alias = alias;\n    }\n}\nfunction parseRawArg(match, arg) {\n    if (isOperationNodeSource(arg)) {\n        return arg.toOperationNode();\n    }\n    else if (match === '??') {\n        return parseStringReference(arg);\n    }\n    else {\n        return ValueNode.create(arg);\n    }\n}\n", "/// <reference types=\"./default-value-parser.d.ts\" />\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { RawBuilder } from '../raw-builder/raw-builder.js';\nexport function parseDefaultValueExpression(value) {\n    return value instanceof RawBuilder\n        ? value.toOperationNode()\n        : ValueNode.createImmediate(value);\n}\n", "/// <reference types=\"./generated-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GeneratedNode = freeze({\n    is(node) {\n        return node.kind === 'GeneratedNode';\n    },\n    create(params) {\n        return freeze({\n            kind: 'GeneratedNode',\n            ...params,\n        });\n    },\n    createWithExpression(expression) {\n        return freeze({\n            kind: 'GeneratedNode',\n            always: true,\n            expression,\n        });\n    },\n    cloneWith(node, params) {\n        return freeze({\n            ...node,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./default-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultValueNode';\n    },\n    create(defaultValue) {\n        return freeze({\n            kind: 'DefaultValueNode',\n            defaultValue,\n        });\n    },\n});\n", "/// <reference types=\"./column-definition-builder.d.ts\" />\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ReferenceNode } from '../operation-node/reference-node.js';\nimport { ReferencesNode, } from '../operation-node/references-node.js';\nimport { SelectAllNode } from '../operation-node/select-all-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nimport { GeneratedNode } from '../operation-node/generated-node.js';\nimport { DefaultValueNode } from '../operation-node/default-value-node.js';\nexport class ColumnDefinitionBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    autoIncrement() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));\n    }\n    primaryKey() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));\n    }\n    references(ref) {\n        const references = parseStringReference(ref);\n        if (!ReferenceNode.is(references) || SelectAllNode.is(references.column)) {\n            throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.create(references.table, [\n                references.column,\n            ]),\n        }));\n    }\n    onDelete(onDelete) {\n        if (!this.#node.references) {\n            throw new Error('on delete constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnDelete(this.#node.references, onDelete),\n        }));\n    }\n    onUpdate(onUpdate) {\n        if (!this.#node.references) {\n            throw new Error('on update constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnUpdate(this.#node.references, onUpdate),\n        }));\n    }\n    unique() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));\n    }\n    notNull() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));\n    }\n    unsigned() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));\n    }\n    defaultTo(value) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            defaultTo: DefaultValueNode.create(parseDefaultValueExpression(value)),\n        }));\n    }\n    check(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            check: CheckConstraintNode.create(expression.toOperationNode()),\n        }));\n    }\n    generatedAlwaysAs(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.createWithExpression(expression.toOperationNode()),\n        }));\n    }\n    generatedAlwaysAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, always: true }),\n        }));\n    }\n    generatedByDefaultAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, byDefault: true }),\n        }));\n    }\n    stored() {\n        if (!this.#node.generated) {\n            throw new Error('stored() can only be called after generatedAlwaysAs');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.cloneWith(this.#node.generated, {\n                stored: true,\n            }),\n        }));\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\npreventAwait(ColumnDefinitionBuilder, \"don't await ColumnDefinitionBuilder instances directly.\");\n", "/// <reference types=\"./modify-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ModifyColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ModifyColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ModifyColumnNode',\n            column,\n        });\n    },\n});\n", "/// <reference types=\"./data-type-parser.d.ts\" />\nimport { DataTypeNode, } from '../operation-node/data-type-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nexport function parseDataTypeExpression(dataType) {\n    return isOperationNodeSource(dataType)\n        ? dataType.toOperationNode()\n        : DataTypeNode.create(dataType);\n}\n", "/// <reference types=\"./foreign-key-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\nimport { ReferencesNode } from './references-node.js';\n/**\n * @internal\n */\nexport const ForeignKeyConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'ForeignKeyConstraintNode';\n    },\n    create(sourceColumns, targetTable, targetColumns, constraintName) {\n        return freeze({\n            kind: 'ForeignKeyConstraintNode',\n            columns: sourceColumns,\n            references: ReferencesNode.create(targetTable, targetColumns),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./foreign-key-constraint-builder.d.ts\" />\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class ForeignKeyConstraintBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    onDelete(onDelete) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onDelete,\n        }));\n    }\n    onUpdate(onUpdate) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onUpdate,\n        }));\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\npreventAwait(ForeignKeyConstraintBuilder, \"don't await ForeignKeyConstraintBuilder instances directly.\");\n", "/// <reference types=\"./add-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'AddConstraintNode';\n    },\n    create(constraint) {\n        return freeze({\n            kind: 'AddConstraintNode',\n            constraint,\n        });\n    },\n});\n", "/// <reference types=\"./unique-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const UniqueConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'UniqueConstraintNode';\n    },\n    create(columns, constraintName) {\n        return freeze({\n            kind: 'UniqueConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./alter-table-builder.d.ts\" />\nimport { AddColumnNode } from '../operation-node/add-column-node.js';\nimport { AlterColumnNode } from '../operation-node/alter-column-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { DataTypeNode, } from '../operation-node/data-type-node.js';\nimport { DropColumnNode } from '../operation-node/drop-column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { RenameColumnNode } from '../operation-node/rename-column-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionBuilder, } from './column-definition-builder.js';\nimport { ModifyColumnNode } from '../operation-node/modify-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { ForeignKeyConstraintBuilder, } from './foreign-key-constraint-builder.js';\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\n/**\n * This builder can be used to create a `alter table` query.\n */\nexport class AlterTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    renameTo(newTableName) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                renameTo: TableNode.create(newTableName),\n            }),\n        });\n    }\n    setSchema(newSchema) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                setSchema: IdentifierNode.create(newSchema),\n            }),\n        });\n    }\n    alterColumn(column) {\n        return new AlterColumnBuilder({\n            ...this.#props,\n            alterColumnNode: AlterColumnNode.create(column),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                dropColumn: DropColumnNode.create(column),\n            }),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                renameColumn: RenameColumnNode.create(column, newColumn),\n            }),\n        });\n    }\n    addColumn(columnName, dataType) {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))),\n        });\n    }\n    /**\n     * Creates an `alter table modify column` query. The `modify column` statement\n     * is only implemeted by MySQL and oracle AFAIK. On other databases you\n     * should use the `alterColumn` method.\n     */\n    modifyColumn(columnName, dataType) {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))),\n        });\n    }\n    addUniqueConstraint(constraintName, columns) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                addConstraint: AddConstraintNode.create(UniqueConstraintNode.create(columns, constraintName)),\n            }),\n        });\n    }\n    addCheckConstraint(constraintName, checkExpression) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                addConstraint: AddConstraintNode.create(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n            }),\n        });\n    }\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), TableNode.create(targetTable), targetColumns.map(ColumnNode.create), constraintName)),\n        });\n    }\n}\nexport class AlterColumnBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setDataType(dataType) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                alterColumn: AlterColumnNode.cloneWith(this.#props.alterColumnNode, {\n                    dataType: DataTypeNode.create(dataType),\n                }),\n            }),\n        });\n    }\n    setDefault(value) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                alterColumn: AlterColumnNode.cloneWith(this.#props.alterColumnNode, {\n                    setDefault: parseDefaultValueExpression(value),\n                }),\n            }),\n        });\n    }\n    dropDefault() {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                alterColumn: AlterColumnNode.cloneWith(this.#props.alterColumnNode, {\n                    dropDefault: true,\n                }),\n            }),\n        });\n    }\n    setNotNull() {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                alterColumn: AlterColumnNode.cloneWith(this.#props.alterColumnNode, {\n                    setNotNull: true,\n                }),\n            }),\n        });\n    }\n    dropNotNull() {\n        return new AlterTableExecutor({\n            ...this.#props,\n            alterTableNode: AlterTableNode.cloneWith(this.#props.alterTableNode, {\n                alterColumn: AlterColumnNode.cloneWith(this.#props.alterColumnNode, {\n                    dropNotNull: true,\n                }),\n            }),\n        });\n    }\n}\nexport class AlterTableExecutor {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.alterTableNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexport class AlterTableAddColumnBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    autoIncrement() {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.autoIncrement(),\n        });\n    }\n    primaryKey() {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.primaryKey(),\n        });\n    }\n    references(ref) {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.references(ref),\n        });\n    }\n    onDelete(onDelete) {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.onDelete(onDelete),\n        });\n    }\n    onUpdate(onDelete) {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.onUpdate(onDelete),\n        });\n    }\n    unique() {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.unique(),\n        });\n    }\n    notNull() {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.notNull(),\n        });\n    }\n    unsigned() {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.unsigned(),\n        });\n    }\n    defaultTo(value) {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.defaultTo(value),\n        });\n    }\n    check(expression) {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.check(expression),\n        });\n    }\n    generatedAlwaysAs(expression) {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.generatedAlwaysAs(expression),\n        });\n    }\n    generatedAlwaysAsIdentity() {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.generatedAlwaysAsIdentity(),\n        });\n    }\n    generatedByDefaultAsIdentity() {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.generatedByDefaultAsIdentity(),\n        });\n    }\n    stored() {\n        return new AlterTableAddColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.stored(),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(AlterTableNode.cloneWith(this.#props.alterTableNode, {\n            addColumn: AddColumnNode.create(this.#props.columnBuilder.toOperationNode()),\n        }), this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexport class AlterTableModifyColumnBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    autoIncrement() {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.autoIncrement(),\n        });\n    }\n    primaryKey() {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.primaryKey(),\n        });\n    }\n    references(ref) {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.references(ref),\n        });\n    }\n    onDelete(onDelete) {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.onDelete(onDelete),\n        });\n    }\n    onUpdate(onUpdate) {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.onUpdate(onUpdate),\n        });\n    }\n    unique() {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.unique(),\n        });\n    }\n    notNull() {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.notNull(),\n        });\n    }\n    unsigned() {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.unsigned(),\n        });\n    }\n    defaultTo(value) {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.defaultTo(value),\n        });\n    }\n    check(expression) {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.check(expression),\n        });\n    }\n    generatedAlwaysAs(expression) {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.generatedAlwaysAs(expression),\n        });\n    }\n    generatedAlwaysAsIdentity() {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.generatedAlwaysAsIdentity(),\n        });\n    }\n    generatedByDefaultAsIdentity() {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.generatedByDefaultAsIdentity(),\n        });\n    }\n    stored() {\n        return new AlterTableModifyColumnBuilder({\n            ...this.#props,\n            columnBuilder: this.#props.columnBuilder.stored(),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(AlterTableNode.cloneWith(this.#props.alterTableNode, {\n            modifyColumn: ModifyColumnNode.create(this.#props.columnBuilder.toOperationNode()),\n        }), this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\nexport class AlterTableAddForeignKeyConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    onDelete(onDelete) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onDelete(onDelete),\n        });\n    }\n    onUpdate(onUpdate) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onUpdate(onUpdate),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(AlterTableNode.cloneWith(this.#props.alterTableNode, {\n            addConstraint: AddConstraintNode.create(this.#props.constraintBuilder.toOperationNode()),\n        }), this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableBuilder, \"don't await AlterTableBuilder instances\");\npreventAwait(AlterColumnBuilder, \"don't await AlterColumnBuilder instances\");\npreventAwait(AlterTableExecutor, \"don't await AlterTableExecutor instances directly. To execute the query you need to call `execute`\");\npreventAwait(AlterTableAddColumnBuilder, \"don't await AlterTableAddColumnBuilder instances directly. To execute the query you need to call `execute`\");\npreventAwait(AlterTableModifyColumnBuilder, \"don't await AlterTableModifyColumnBuilder instances directly. To execute the query you need to call `execute`\");\npreventAwait(AlterTableAddForeignKeyConstraintBuilder, \"don't await AlterTableAddForeignKeyConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ListNode = freeze({\n    is(node) {\n        return node.kind === 'ListNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'ListNode',\n            items: freeze(items),\n        });\n    },\n});\n", "/// <reference types=\"./create-index-builder.d.ts\" />\nimport { CreateIndexNode, } from '../operation-node/create-index-node.js';\nimport { ListNode } from '../operation-node/list-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseColumnName } from '../parser/reference-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CreateIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the index unique.\n     */\n    unique() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            createIndexNode: CreateIndexNode.cloneWith(this.#props.createIndexNode, {\n                unique: true,\n            }),\n        });\n    }\n    /**\n     * Specifies the table for the index.\n     */\n    on(table) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            createIndexNode: CreateIndexNode.cloneWith(this.#props.createIndexNode, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    /**\n     * Specifies the column for the index.\n     *\n     * Also see the `expression` for specifying an arbitrary expression.\n     */\n    column(column) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            createIndexNode: CreateIndexNode.cloneWith(this.#props.createIndexNode, {\n                expression: parseColumnName(column),\n            }),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see the `expression` for specifying an arbitrary expression.\n     */\n    columns(columns) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            createIndexNode: CreateIndexNode.cloneWith(this.#props.createIndexNode, {\n                expression: ListNode.create(columns.map(parseColumnName)),\n            }),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createIndex('person_first_name_index')\n     *   .on('person')\n     *   .expression(db.raw('first_name COLLATE \"fi_FI\"'))\n     *   .execute()\n     * ```\n     */\n    expression(expression) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            createIndexNode: CreateIndexNode.cloneWith(this.#props.createIndexNode, {\n                expression: expression.toOperationNode(),\n            }),\n        });\n    }\n    using(indexType) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            createIndexNode: CreateIndexNode.cloneWith(this.#props.createIndexNode, {\n                using: RawNode.createWithSql(indexType),\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.createIndexNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateIndexBuilder, \"don't await CreateIndexBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./create-schema-builder.d.ts\" />\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CreateSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifNotExists() {\n        return new CreateSchemaBuilder({\n            ...this.#props,\n            createSchemaNode: CreateSchemaNode.cloneWith(this.#props.createSchemaNode, { ifNotExists: true }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.createSchemaNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateSchemaBuilder, \"don't await CreateSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./primary-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const PrimaryConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'PrimaryKeyConstraintNode';\n    },\n    create(columns, constraintName) {\n        return freeze({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./create-table-builder.d.ts\" />\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { CreateTableNode, } from '../operation-node/create-table-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionBuilder } from './column-definition-builder.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { ForeignKeyConstraintBuilder } from './foreign-key-constraint-builder.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { PrimaryConstraintNode } from '../operation-node/primary-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\n/**\n * This builder can be used to create a `create table` query.\n */\nexport class CreateTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary table.\n     */\n    temporary() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            createTableNode: CreateTableNode.cloneWith(this.#props.createTableNode, {\n                temporary: true,\n            }),\n        });\n    }\n    /**\n     * Adds an \"on commit\" statement.\n     *\n     * This can be used in conjunction with temporary tables on supported databases\n     * like PostgreSQL.\n     */\n    onCommit(onCommit) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            createTableNode: CreateTableNode.cloneWith(this.#props.createTableNode, {\n                onCommit,\n            }),\n        });\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the table already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            createTableNode: CreateTableNode.cloneWith(this.#props.createTableNode, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Adds a column to the table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey()),\n     *   .addColumn('first_name', 'varchar(50)', (col) => col.notNull())\n     *   .addColumn('last_name', 'varchar(255)')\n     *   .addColumn('bank_balance', 'numeric(8, 2)')\n     *   .addColumn('data', db.raw('customtype'))\n     *   .addColumn('parent_id', 'integer', (col) =>\n     *     col.references('person.id').onDelete('cascade'))\n     *   )\n     * ```\n     *\n     * With this method, it's once again good to remember that Kysely just builds the query\n     * and doesn't provide the same API for all databses. For example, some databases like\n     * older MySQL don't support `references` statement in the column definition. Instead\n     * foreign key constraints need to be defined in at the level of the `create table`\n     * query. See the next example:\n     *\n     * ```ts\n     *   .addColumn('parent_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'person_parent_id_fk', ['parent_id'], 'person', ['id'],\n     *     (cb) => cb.onDelete('cascade')\n     *   )\n     * ```\n     *\n     * Another good example is that PostgreSQL doesn't support the `auto_increment`\n     * keyword and you need to define an autoincrementing column for example using\n     * `serial`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'serial', (col) => col.primaryKey()),\n     * ```\n     */\n    addColumn(columnName, dataType, build = noop) {\n        const columnBuilder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new CreateTableBuilder({\n            ...this.#props,\n            createTableNode: CreateTableNode.cloneWithColumn(this.#props.createTableNode, columnBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a primary key constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addPrimaryKeyConstraint('primary_key', ['first_name', 'last_name'])\n     * ```\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            createTableNode: CreateTableNode.cloneWithConstraint(this.#props.createTableNode, PrimaryConstraintNode.create(columns, constraintName)),\n        });\n    }\n    /**\n     * Adds a unique constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addUniqueConstraint('first_name_last_name_unique', ['first_name', 'last_name'])\n     * ```\n     */\n    addUniqueConstraint(constraintName, columns) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            createTableNode: CreateTableNode.cloneWithConstraint(this.#props.createTableNode, UniqueConstraintNode.create(columns, constraintName)),\n        });\n    }\n    /**\n     * Adds a check constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addCheckConstraint('check_legs', db.raw('number_of_legs < 5'))\n     * ```\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            createTableNode: CreateTableNode.cloneWithConstraint(this.#props.createTableNode, CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n        });\n    }\n    /**\n     * Adds a foreign key constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id'],\n     *   'person',\n     *   ['id'],\n     * )\n     * ```\n     *\n     * Add constraintfor multiple columns:\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id1', 'owner_id2'],\n     *   'person',\n     *   ['id1', 'id2'],\n     *   (cb) => cb.onDelete('cascade')\n     * )\n     * ```\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {\n        const builder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), TableNode.create(targetTable), targetColumns.map(ColumnNode.create), constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            createTableNode: CreateTableNode.cloneWithConstraint(this.#props.createTableNode, builder.toOperationNode()),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.createTableNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateTableBuilder, \"don't await CreateTableBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./drop-index-builder.d.ts\" />\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specifies the table the index was created for. This is not needed\n     * in all dialects.\n     */\n    on(table) {\n        return new DropIndexBuilder({\n            ...this.#props,\n            dropIndexNode: DropIndexNode.cloneWith(this.#props.dropIndexNode, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    ifExists() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            dropIndexNode: DropIndexNode.cloneWith(this.#props.dropIndexNode, {\n                ifExists: true,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.dropIndexNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropIndexBuilder, \"don't await DropIndexBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./drop-schema-builder.d.ts\" />\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            dropSchemaNode: DropSchemaNode.cloneWith(this.#props.dropSchemaNode, {\n                ifExists: true,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.dropSchemaNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropSchemaBuilder, \"don't await DropSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./drop-table-builder.d.ts\" />\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTableBuilder({\n            ...this.#props,\n            dropTableNode: DropTableNode.cloneWith(this.#props.dropTableNode, {\n                ifExists: true,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.dropTableNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropTableBuilder, \"don't await DropTableBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./operation-node-transformer.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * Transforms an operation node tree into another one.\n *\n * Kysely queries are expressed internally as a tree of objects (operation nodes).\n * `OperationNodeTransformer` takes such a tree as its input and returns a\n * transformed deep copy of it. By default the `OperationNodeTransformer`\n * does nothing. You need to override one or more methods to make it do\n * something.\n *\n * There's a method for each node type. For example if you'd like to convert\n * each identifier (table name, column name, alias etc.) from camelCase to\n * snake_case, you'd do something like this:\n *\n * ```ts\n * class CamelCaseTransformer extends OperationNodeTransformer {\n *   transformIdentifier(node: IdentifierNode): IdentifierNode {\n *     node = super.transformIdentifier(node),\n *\n *     return {\n *       ...node,\n *       identifier: snakeCase(node.identifier),\n *     }\n *   }\n * }\n *\n * const transformer = new CamelCaseTransformer()\n * const tree = transformer.transformNode(tree)\n * ```\n */\nexport class OperationNodeTransformer {\n    nodeStack = [];\n    #transformers = freeze({\n        AliasNode: this.transformAlias.bind(this),\n        ColumnNode: this.transformColumn.bind(this),\n        IdentifierNode: this.transformIdentifier.bind(this),\n        RawNode: this.transformRaw.bind(this),\n        ReferenceNode: this.transformReference.bind(this),\n        SelectQueryNode: this.transformSelectQuery.bind(this),\n        SelectionNode: this.transformSelection.bind(this),\n        TableNode: this.transformTable.bind(this),\n        FromNode: this.transformFrom.bind(this),\n        SelectAllNode: this.transformSelectAll.bind(this),\n        FilterNode: this.transformFilter.bind(this),\n        AndNode: this.transformAnd.bind(this),\n        OrNode: this.transformOr.bind(this),\n        ValueNode: this.transformValue.bind(this),\n        ValueListNode: this.transformValueList.bind(this),\n        PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),\n        ParensNode: this.transformParens.bind(this),\n        JoinNode: this.transformJoin.bind(this),\n        OperatorNode: this.transformOperator.bind(this),\n        WhereNode: this.transformWhere.bind(this),\n        InsertQueryNode: this.transformInsertQuery.bind(this),\n        DeleteQueryNode: this.transformDeleteQuery.bind(this),\n        ReturningNode: this.transformReturning.bind(this),\n        CreateTableNode: this.transformCreateTable.bind(this),\n        AddColumnNode: this.transformAddColumn.bind(this),\n        ColumnDefinitionNode: this.transformColumnDefinition.bind(this),\n        DropTableNode: this.transformDropTable.bind(this),\n        DataTypeNode: this.transformDataType.bind(this),\n        OrderByNode: this.transformOrderBy.bind(this),\n        OrderByItemNode: this.transformOrderByItem.bind(this),\n        GroupByNode: this.transformGroupBy.bind(this),\n        GroupByItemNode: this.transformGroupByItem.bind(this),\n        UpdateQueryNode: this.transformUpdateQuery.bind(this),\n        ColumnUpdateNode: this.transformColumnUpdate.bind(this),\n        LimitNode: this.transformLimit.bind(this),\n        OffsetNode: this.transformOffset.bind(this),\n        OnConflictNode: this.transformOnConflict.bind(this),\n        OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),\n        CreateIndexNode: this.transformCreateIndex.bind(this),\n        DropIndexNode: this.transformDropIndex.bind(this),\n        ListNode: this.transformList.bind(this),\n        PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.transformUniqueConstraint.bind(this),\n        ReferencesNode: this.transformReferences.bind(this),\n        CheckConstraintNode: this.transformCheckConstraint.bind(this),\n        WithNode: this.transformWith.bind(this),\n        CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),\n        HavingNode: this.transformHaving.bind(this),\n        CreateSchemaNode: this.transformCreateSchema.bind(this),\n        DropSchemaNode: this.transformDropSchema.bind(this),\n        AlterTableNode: this.transformAlterTable.bind(this),\n        DropColumnNode: this.transformDropColumn.bind(this),\n        RenameColumnNode: this.transformRenameColumn.bind(this),\n        AlterColumnNode: this.transformAlterColumn.bind(this),\n        ModifyColumnNode: this.transformModifyColumn.bind(this),\n        AddConstraintNode: this.transformAddConstraint.bind(this),\n        DropConstraintNode: this.transformDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),\n        UnionNode: this.transformUnion.bind(this),\n        CreateViewNode: this.transformCreateView.bind(this),\n        DropViewNode: this.transformDropView.bind(this),\n        GeneratedNode: this.transformGenerated.bind(this),\n        DefaultValueNode: this.transformDefaultValue.bind(this),\n        OnNode: this.transformOn.bind(this),\n        ValuesNode: this.transformValues.bind(this),\n    });\n    transformNode = (node) => {\n        if (!node) {\n            return undefined;\n        }\n        this.nodeStack.push(node);\n        const out = this.#transformers[node.kind](node);\n        this.nodeStack.pop();\n        return freeze(out);\n    };\n    transformNodeList(list) {\n        if (!list) {\n            return list;\n        }\n        return freeze(list.map(this.transformNode));\n    }\n    transformSelectQuery(node) {\n        return {\n            kind: 'SelectQueryNode',\n            from: this.transformNode(node.from),\n            selections: this.transformNodeList(node.selections),\n            distinctOnSelections: this.transformNodeList(node.distinctOnSelections),\n            distinct: node.distinct,\n            joins: this.transformNodeList(node.joins),\n            groupBy: this.transformNode(node.groupBy),\n            orderBy: this.transformNode(node.orderBy),\n            where: this.transformNode(node.where),\n            modifiers: node.modifiers,\n            limit: this.transformNode(node.limit),\n            offset: this.transformNode(node.offset),\n            with: this.transformNode(node.with),\n            having: this.transformNode(node.having),\n            union: this.transformNodeList(node.union),\n        };\n    }\n    transformSelection(node) {\n        return {\n            kind: 'SelectionNode',\n            selection: this.transformNode(node.selection),\n        };\n    }\n    transformColumn(node) {\n        return {\n            kind: 'ColumnNode',\n            column: this.transformNode(node.column),\n        };\n    }\n    transformAlias(node) {\n        return {\n            kind: 'AliasNode',\n            node: this.transformNode(node.node),\n            alias: this.transformNode(node.alias),\n        };\n    }\n    transformTable(node) {\n        return {\n            kind: 'TableNode',\n            schema: this.transformNode(node.schema),\n            table: this.transformNode(node.table),\n        };\n    }\n    transformFrom(node) {\n        return {\n            kind: 'FromNode',\n            froms: this.transformNodeList(node.froms),\n        };\n    }\n    transformReference(node) {\n        return {\n            kind: 'ReferenceNode',\n            table: this.transformNode(node.table),\n            column: this.transformNode(node.column),\n        };\n    }\n    transformFilter(node) {\n        return {\n            kind: 'FilterNode',\n            left: this.transformNode(node.left),\n            op: this.transformNode(node.op),\n            right: this.transformNode(node.right),\n        };\n    }\n    transformAnd(node) {\n        return {\n            kind: 'AndNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        };\n    }\n    transformOr(node) {\n        return {\n            kind: 'OrNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        };\n    }\n    transformValueList(node) {\n        return {\n            kind: 'ValueListNode',\n            values: this.transformNodeList(node.values),\n        };\n    }\n    transformParens(node) {\n        return {\n            kind: 'ParensNode',\n            node: this.transformNode(node.node),\n        };\n    }\n    transformJoin(node) {\n        return {\n            kind: 'JoinNode',\n            joinType: node.joinType,\n            table: this.transformNode(node.table),\n            on: this.transformNode(node.on),\n        };\n    }\n    transformRaw(node) {\n        return {\n            kind: 'RawNode',\n            sqlFragments: freeze([...node.sqlFragments]),\n            params: this.transformNodeList(node.params),\n        };\n    }\n    transformWhere(node) {\n        return {\n            kind: 'WhereNode',\n            where: this.transformNode(node.where),\n        };\n    }\n    transformInsertQuery(node) {\n        return {\n            kind: 'InsertQueryNode',\n            into: this.transformNode(node.into),\n            columns: this.transformNodeList(node.columns),\n            values: this.transformNode(node.values),\n            returning: this.transformNode(node.returning),\n            onConflict: this.transformNode(node.onConflict),\n            onDuplicateKey: this.transformNode(node.onDuplicateKey),\n            with: this.transformNode(node.with),\n            ignore: node.ignore,\n        };\n    }\n    transformValues(node) {\n        return {\n            kind: 'ValuesNode',\n            values: this.transformNodeList(node.values),\n        };\n    }\n    transformDeleteQuery(node) {\n        return {\n            kind: 'DeleteQueryNode',\n            from: this.transformNode(node.from),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n        };\n    }\n    transformReturning(node) {\n        return {\n            kind: 'ReturningNode',\n            selections: this.transformNodeList(node.selections),\n        };\n    }\n    transformCreateTable(node) {\n        return {\n            kind: 'CreateTableNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            constraints: this.transformNodeList(node.constraints),\n            temporary: node.temporary,\n            ifNotExists: node.ifNotExists,\n            onCommit: node.onCommit,\n        };\n    }\n    transformColumnDefinition(node) {\n        return {\n            kind: 'ColumnDefinitionNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            references: this.transformNode(node.references),\n            primaryKey: node.primaryKey,\n            autoIncrement: node.autoIncrement,\n            unique: node.unique,\n            notNull: node.notNull,\n            unsigned: node.unsigned,\n            defaultTo: this.transformNode(node.defaultTo),\n            check: this.transformNode(node.check),\n            generated: this.transformNode(node.generated),\n        };\n    }\n    transformAddColumn(node) {\n        return {\n            kind: 'AddColumnNode',\n            column: this.transformNode(node.column),\n        };\n    }\n    transformDropTable(node) {\n        return {\n            kind: 'DropTableNode',\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n        };\n    }\n    transformOrderBy(node) {\n        return {\n            kind: 'OrderByNode',\n            items: this.transformNodeList(node.items),\n        };\n    }\n    transformOrderByItem(node) {\n        return {\n            kind: 'OrderByItemNode',\n            orderBy: this.transformNode(node.orderBy),\n            direction: this.transformNode(node.direction),\n        };\n    }\n    transformGroupBy(node) {\n        return {\n            kind: 'GroupByNode',\n            items: this.transformNodeList(node.items),\n        };\n    }\n    transformGroupByItem(node) {\n        return {\n            kind: 'GroupByItemNode',\n            groupBy: this.transformNode(node.groupBy),\n        };\n    }\n    transformUpdateQuery(node) {\n        return {\n            kind: 'UpdateQueryNode',\n            table: this.transformNode(node.table),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            updates: this.transformNodeList(node.updates),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n        };\n    }\n    transformColumnUpdate(node) {\n        return {\n            kind: 'ColumnUpdateNode',\n            column: this.transformNode(node.column),\n            value: this.transformNode(node.value),\n        };\n    }\n    transformLimit(node) {\n        return {\n            kind: 'LimitNode',\n            limit: this.transformNode(node.limit),\n        };\n    }\n    transformOffset(node) {\n        return {\n            kind: 'OffsetNode',\n            offset: this.transformNode(node.offset),\n        };\n    }\n    transformOnConflict(node) {\n        return {\n            kind: 'OnConflictNode',\n            columns: this.transformNodeList(node.columns),\n            constraint: this.transformNode(node.constraint),\n            indexExpression: this.transformNode(node.indexExpression),\n            indexWhere: this.transformNode(node.indexWhere),\n            updates: this.transformNodeList(node.updates),\n            updateWhere: this.transformNode(node.updateWhere),\n            doNothing: node.doNothing,\n        };\n    }\n    transformOnDuplicateKey(node) {\n        return {\n            kind: 'OnDuplicateKeyNode',\n            updates: this.transformNodeList(node.updates),\n        };\n    }\n    transformCreateIndex(node) {\n        return {\n            kind: 'CreateIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            expression: this.transformNode(node.expression),\n            unique: node.unique,\n            using: this.transformNode(node.using),\n        };\n    }\n    transformList(node) {\n        return {\n            kind: 'ListNode',\n            items: this.transformNodeList(node.items),\n        };\n    }\n    transformDropIndex(node) {\n        return {\n            kind: 'DropIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n        };\n    }\n    transformPrimaryKeyConstraint(node) {\n        return {\n            kind: 'PrimaryKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n        };\n    }\n    transformUniqueConstraint(node) {\n        return {\n            kind: 'UniqueConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n        };\n    }\n    transformForeignKeyConstraint(node) {\n        return {\n            kind: 'ForeignKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            references: this.transformNode(node.references),\n            name: this.transformNode(node.name),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        };\n    }\n    transformUnion(node) {\n        return {\n            kind: 'UnionNode',\n            union: this.transformNode(node.union),\n            all: node.all,\n        };\n    }\n    transformReferences(node) {\n        return {\n            kind: 'ReferencesNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        };\n    }\n    transformCheckConstraint(node) {\n        return {\n            kind: 'CheckConstraintNode',\n            expression: this.transformNode(node.expression),\n            name: this.transformNode(node.name),\n        };\n    }\n    transformWith(node) {\n        return {\n            kind: 'WithNode',\n            expressions: this.transformNodeList(node.expressions),\n            recursive: node.recursive,\n        };\n    }\n    transformCommonTableExpression(node) {\n        return {\n            kind: 'CommonTableExpressionNode',\n            name: this.transformNode(node.name),\n            expression: this.transformNode(node.expression),\n        };\n    }\n    transformCommonTableExpressionName(node) {\n        return {\n            kind: 'CommonTableExpressionNameNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n        };\n    }\n    transformHaving(node) {\n        return {\n            kind: 'HavingNode',\n            having: this.transformNode(node.having),\n        };\n    }\n    transformCreateSchema(node) {\n        return {\n            kind: 'CreateSchemaNode',\n            schema: this.transformNode(node.schema),\n        };\n    }\n    transformDropSchema(node) {\n        return {\n            kind: 'DropSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifExists: node.ifExists,\n        };\n    }\n    transformAlterTable(node) {\n        return {\n            kind: 'AlterTableNode',\n            table: this.transformNode(node.table),\n            renameTo: this.transformNode(node.renameTo),\n            setSchema: this.transformNode(node.setSchema),\n            renameColumn: this.transformNode(node.renameColumn),\n            addColumn: this.transformNode(node.addColumn),\n            dropColumn: this.transformNode(node.dropColumn),\n            alterColumn: this.transformNode(node.alterColumn),\n            modifyColumn: this.transformNode(node.modifyColumn),\n            addConstraint: this.transformNode(node.addConstraint),\n            dropConstraint: this.transformNode(node.dropConstraint),\n        };\n    }\n    transformDropColumn(node) {\n        return {\n            kind: 'DropColumnNode',\n            column: this.transformNode(node.column),\n        };\n    }\n    transformRenameColumn(node) {\n        return {\n            kind: 'RenameColumnNode',\n            column: this.transformNode(node.column),\n            renameTo: this.transformNode(node.renameTo),\n        };\n    }\n    transformAlterColumn(node) {\n        return {\n            kind: 'AlterColumnNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            dataTypeExpression: this.transformNode(node.dataTypeExpression),\n            setDefault: this.transformNode(node.setDefault),\n            dropDefault: node.dropDefault,\n            setNotNull: node.setNotNull,\n            dropNotNull: node.dropNotNull,\n        };\n    }\n    transformModifyColumn(node) {\n        return {\n            kind: 'ModifyColumnNode',\n            column: this.transformNode(node.column),\n        };\n    }\n    transformAddConstraint(node) {\n        return {\n            kind: 'AddConstraintNode',\n            constraint: this.transformNode(node.constraint),\n        };\n    }\n    transformDropConstraint(node) {\n        return {\n            kind: 'DropConstraintNode',\n            constraintName: this.transformNode(node.constraintName),\n        };\n    }\n    transformCreateView(node) {\n        return {\n            kind: 'CreateViewNode',\n            name: this.transformNode(node.name),\n            temporary: node.temporary,\n            orReplace: node.orReplace,\n            ifNotExists: node.ifNotExists,\n            materialized: node.materialized,\n            columns: this.transformNodeList(node.columns),\n            as: this.transformNode(node.as),\n        };\n    }\n    transformDropView(node) {\n        return {\n            kind: 'DropViewNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n            materialized: node.materialized,\n        };\n    }\n    transformGenerated(node) {\n        return {\n            kind: 'GeneratedNode',\n            byDefault: node.byDefault,\n            always: node.always,\n            identity: node.identity,\n            stored: node.stored,\n            expression: this.transformNode(node.expression),\n        };\n    }\n    transformDefaultValue(node) {\n        return {\n            kind: 'DefaultValueNode',\n            defaultValue: this.transformNode(node.defaultValue),\n        };\n    }\n    transformOn(node) {\n        return {\n            kind: 'OnNode',\n            on: this.transformNode(node.on),\n        };\n    }\n    transformDataType(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformSelectAll(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformIdentifier(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformPrimitiveValueList(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOperator(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n}\n", "/// <reference types=\"./with-schema-transformer.d.ts\" />\nimport { AliasNode } from '../../operation-node/alias-node.js';\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { TableNode } from '../../operation-node/table-node.js';\nexport class WithSchemaTransformer extends OperationNodeTransformer {\n    #schema;\n    #tables = new Set();\n    constructor(schema) {\n        super();\n        this.#schema = schema;\n    }\n    transformSelectQuery(node) {\n        return this.#transformRoot(node, (node) => super.transformSelectQuery(node));\n    }\n    transformInsertQuery(node) {\n        return this.#transformRoot(node, (node) => super.transformInsertQuery(node));\n    }\n    transformUpdateQuery(node) {\n        return this.#transformRoot(node, (node) => super.transformUpdateQuery(node));\n    }\n    transformDeleteQuery(node) {\n        return this.#transformRoot(node, (node) => super.transformDeleteQuery(node));\n    }\n    transformCreateTable(node) {\n        return this.#transformRoot(node, (node) => super.transformCreateTable(node));\n    }\n    transformDropTable(node) {\n        return this.#transformRoot(node, (node) => super.transformDropTable(node));\n    }\n    transformCreateIndex(node) {\n        return this.#transformRoot(node, (node) => super.transformCreateIndex(node));\n    }\n    transformDropIndex(node) {\n        return this.#transformRoot(node, (node) => super.transformDropIndex(node));\n    }\n    transformCreateView(node) {\n        return this.#transformRoot(node, (node) => super.transformCreateView(node));\n    }\n    transformDropView(node) {\n        return this.#transformRoot(node, (node) => super.transformDropView(node));\n    }\n    transformAlterTable(node) {\n        return this.#transformRoot(node, (node) => super.transformAlterTable(node));\n    }\n    transformTable(node) {\n        const transformed = super.transformTable(node);\n        if (transformed.schema || !this.#tables.has(node.table.identifier)) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            schema: {\n                kind: 'IdentifierNode',\n                identifier: this.#schema,\n            },\n        };\n    }\n    #transformRoot(node, transform) {\n        const tables = this.#collectTables(node);\n        for (const table of tables) {\n            this.#tables.add(table);\n        }\n        const transformed = transform(node);\n        for (const table of tables) {\n            this.#tables.delete(table);\n        }\n        return transformed;\n    }\n    #collectTables(node) {\n        const tables = new Set();\n        if ('from' in node && node.from) {\n            this.#collectTablesFromTableExpressionNodes(node.from.froms, tables);\n        }\n        if ('into' in node && node.into) {\n            this.#collectTablesFromTableExpressionNode(node.into, tables);\n        }\n        if ('table' in node && node.table) {\n            this.#collectTablesFromTableExpressionNode(node.table, tables);\n        }\n        if ('joins' in node && node.joins) {\n            this.#collectTablesFromJoins(node.joins, tables);\n        }\n        if ('with' in node && node.with) {\n            this.#removeCommonTableExpressionTables(node.with, tables);\n        }\n        return tables;\n    }\n    #collectTablesFromTableExpressionNodes(nodes, tables) {\n        for (const node of nodes) {\n            this.#collectTablesFromTableExpressionNode(node, tables);\n        }\n    }\n    #collectTablesFromJoins(nodes, tables) {\n        for (const node of nodes) {\n            this.#collectTablesFromTableExpressionNode(node.table, tables);\n        }\n    }\n    #collectTablesFromTableExpressionNode(node, tables) {\n        const table = TableNode.is(node)\n            ? node\n            : AliasNode.is(node) && TableNode.is(node.node)\n                ? node.node\n                : null;\n        if (table && !this.#tables.has(table.table.identifier)) {\n            tables.add(table.table.identifier);\n        }\n    }\n    #removeCommonTableExpressionTables(node, tables) {\n        for (const expr of node.expressions) {\n            tables.delete(expr.name.table.table.identifier);\n        }\n    }\n}\n", "/// <reference types=\"./with-schema-plugin.d.ts\" />\nimport { WithSchemaTransformer } from './with-schema-transformer.js';\nexport class WithSchemaPlugin {\n    #transformer;\n    constructor(schema) {\n        this.#transformer = new WithSchemaTransformer(schema);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n", "/// <reference types=\"./create-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateViewNode = freeze({\n    is(node) {\n        return node.kind === 'CreateViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateViewNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(createView, params) {\n        return freeze({\n            ...createView,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./immediate-value-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValueTransformer extends OperationNodeTransformer {\n    transformValue(node) {\n        return {\n            ...super.transformValue(node),\n            immediate: true,\n        };\n    }\n}\n", "/// <reference types=\"./immediate-value-plugin.d.ts\" />\nimport { ImmediateValueTransformer } from './immediate-value-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValuePlugin {\n    #transformer = new ImmediateValueTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\n", "/// <reference types=\"./create-view-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { parseColumnName } from '../parser/reference-parser.js';\nimport { ImmediateValuePlugin } from '../plugin/immediate-value/immediate-value-plugin.js';\nexport class CreateViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary view.\n     */\n    temporary() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            createViewNode: CreateViewNode.cloneWith(this.#props.createViewNode, {\n                temporary: true,\n            }),\n        });\n    }\n    materialized() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            createViewNode: CreateViewNode.cloneWith(this.#props.createViewNode, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Only implemented on some dialects like SQLite. On most dialects, use {@link orReplace}.\n     */\n    ifNotExists() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            createViewNode: CreateViewNode.cloneWith(this.#props.createViewNode, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    orReplace() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            createViewNode: CreateViewNode.cloneWith(this.#props.createViewNode, {\n                orReplace: true,\n            }),\n        });\n    }\n    columns(columns) {\n        return new CreateViewBuilder({\n            ...this.#props,\n            createViewNode: CreateViewNode.cloneWith(this.#props.createViewNode, {\n                columns: columns.map(parseColumnName),\n            }),\n        });\n    }\n    /**\n     * Sets the select query or a `values` statement that creates the view.\n     *\n     * WARNING!\n     * Some dialects don't support parameterized queries in DDL statements and therefore\n     * the query or `raw` expression passed here is interpolated into a single string\n     * opening an SQL injection vulnerability. DO NOT pass unchecked user input into\n     * the query or `raw` expression passed to this method!\n     */\n    as(query) {\n        const queryNode = query\n            .withPlugin(new ImmediateValuePlugin())\n            .toOperationNode();\n        return new CreateViewBuilder({\n            ...this.#props,\n            createViewNode: CreateViewNode.cloneWith(this.#props.createViewNode, {\n                as: queryNode,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.createViewNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateViewBuilder, \"don't await CreateViewBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./drop-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropViewNode = freeze({\n    is(node) {\n        return node.kind === 'DropViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropViewNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(dropView, params) {\n        return freeze({\n            ...dropView,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./drop-view-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nexport class DropViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    materialized() {\n        return new DropViewBuilder({\n            ...this.#props,\n            dropViewNode: DropViewNode.cloneWith(this.#props.dropViewNode, {\n                materialized: true,\n            }),\n        });\n    }\n    ifExists() {\n        return new DropViewBuilder({\n            ...this.#props,\n            dropViewNode: DropViewNode.cloneWith(this.#props.dropViewNode, {\n                ifExists: true,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.dropViewNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropViewBuilder, \"don't await DropViewBuilder instances directly. To execute the query you need to call `execute`\");\n", "/// <reference types=\"./schema.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { CreateIndexNode } from '../operation-node/create-index-node.js';\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { AlterTableBuilder } from './alter-table-builder.js';\nimport { CreateIndexBuilder } from './create-index-builder.js';\nimport { CreateSchemaBuilder } from './create-schema-builder.js';\nimport { CreateTableBuilder } from './create-table-builder.js';\nimport { DropIndexBuilder } from './drop-index-builder.js';\nimport { DropSchemaBuilder } from './drop-schema-builder.js';\nimport { DropTableBuilder } from './drop-table-builder.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { CreateViewBuilder } from './create-view-builder.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { DropViewBuilder } from './drop-view-builder.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\n/**\n * Provides methods for building database schema.\n */\nexport class SchemaModule {\n    #executor;\n    constructor(executor) {\n        this.#executor = executor;\n    }\n    /**\n     * Create a new table.\n     *\n     * ### Examples\n     *\n     * This example creates a new table with columns `id`, `first_name`,\n     * `last_name` and `gender`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('first_name', 'varchar', col => col.notNull())\n     *   .addColumn('last_name', 'varchar', col => col.notNull())\n     *   .addColumn('gender', 'varchar')\n     *   .execute()\n     * ```\n     *\n     * This example creates a table with a foreign key. Not all database\n     * engines support column-level foreign key constraint definitions.\n     * For example if you are using MySQL 5.X see the next example after\n     * this one.\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer', col => col\n     *     .references('person.id')\n     *     .onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * This example adds a foreign key constraint for a columns just\n     * like the previous example, but using a table-level statement.\n     * On MySQL 5.X you need to define foreign key constraints like\n     * this:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'pet_owner_id_foreign', ['owner_id'], 'person', ['id'],\n     *     (constraint) => constraint.onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     */\n    createTable(table) {\n        return new CreateTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            createTableNode: CreateTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Drop a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropTable('person')\n     *   .execute()\n     * ```\n     */\n    dropTable(table) {\n        return new DropTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            dropTableNode: DropTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createIndex('person_full_name_unique_index')\n     *   .on('person')\n     *   .columns(['first_name', 'last_name'])\n     *   .execute()\n     * ```\n     */\n    createIndex(indexName) {\n        return new CreateIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            createIndexNode: CreateIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Drop an index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropIndex('person_full_name_unique_index')\n     *   .execute()\n     * ```\n     */\n    dropIndex(indexName) {\n        return new DropIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            dropIndexNode: DropIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Create a new schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    createSchema(schema) {\n        return new CreateSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            createSchemaNode: CreateSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Drop a schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    dropSchema(schema) {\n        return new DropSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            dropSchemaNode: DropSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Alter a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .alterColumn('first_name')\n     *   .setDataType('text')\n     *   .execute()\n     * ```\n     */\n    alterTable(table) {\n        return new AlterTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            alterTableNode: AlterTableNode.create(table),\n        });\n    }\n    /**\n     * Create a new view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createView('dogs')\n     *   .orReplace()\n     *   .as(db.selectFrom('pet').selectAll().where('species', '=', 'dog'))\n     *   .execute()\n     * ```\n     */\n    createView(viewName) {\n        return new CreateViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            createViewNode: CreateViewNode.create(viewName),\n        });\n    }\n    /**\n     * Drop a view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropView('dogs')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropView(viewName) {\n        return new DropViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            dropViewNode: DropViewNode.create(viewName),\n        });\n    }\n    /**\n     * See {@link QueryCreator.withSchema}\n     */\n    withSchema(schema) {\n        return new SchemaModule(this.#executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n    }\n}\n", "/// <reference types=\"./dynamic.d.ts\" />\nimport { DynamicReferenceBuilder } from './dynamic-reference-builder.js';\nexport class DynamicModule {\n    /**\n     * Creates a dynamic reference to a column that is not know at compile time.\n     *\n     * Kysely is built in a way that by default you can't refer to tables or columns\n     * that are not actually visible in the current query and context. This is all\n     * done by typescript at compile time, which means that you need to know the\n     * columns and tables at compile time. This is not always the case of course.\n     *\n     * This method is meant to be used in those cases where the column names\n     * come from the user input or are not otherwise known at compile time.\n     *\n     * WARNING! Unlike values, column names are not escaped by the database engine\n     * or Kysely and if you pass in unchecked column names using this method, you\n     * create an SQL injection vulnerability. Always __always__ validate the user\n     * input before passing it to this method.\n     *\n     * There are couple of examples below for some use cases, but you can pass\n     * `ref` to other methods as well. If the types allow you to pass a `ref`\n     * value to some place, it should work.\n     *\n     * ### Examples\n     *\n     * Filter by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(filterColumn: string, filterValue: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .selectAll()\n     *     .where(ref(filterColumn), '=', filterValue)\n     *     .execute()\n     * }\n     *\n     * someQuery('first_name', 'Arnold')\n     * someQuery('person.last_name', 'Aniston')\n     * ```\n     *\n     * Order by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(orderBy: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .select('person.first_name as fn')\n     *     .orderBy(ref(orderBy))\n     *     .execute()\n     * }\n     *\n     * someQuery('fn')\n     * ```\n     *\n     * In this example we add selections dynamically:\n     *\n     * ```ts\n     * const { ref } = db.dynamic\n     *\n     * // Some column name provided by the user. Value not known at compile time.\n     * const columnFromUserInput = req.query.select;\n     *\n     * // A type that lists all possible values `columnFromUserInput` can have.\n     * // You can use `keyof Person` if any column of an interface is allowed.\n     * type PossibleColumns = 'last_name' | 'first_name' | 'birth_date'\n     *\n     * const [person] = await db.selectFrom('person')\n     *   .select([\n     *     ref<PossibleColumns>(columnFromUserInput)\n     *     'id'\n     *   ])\n     *   .execute()\n     *\n     * // The resulting type contains all `PossibleColumns` as optional fields\n     * // because we cannot know which field was actually selected before\n     * // running the code.\n     * const lastName: string | undefined = person.last_name\n     * const firstName: string | undefined = person.first_name\n     * const birthDate: string | undefined = person.birth_date\n     *\n     * // The result type also contains the compile time selection `id`.\n     * person.id\n     * ```\n     */\n    ref(reference) {\n        return new DynamicReferenceBuilder(reference);\n    }\n}\n", "/// <reference types=\"./default-connection-provider.d.ts\" />\nexport class DefaultConnectionProvider {\n    #driver;\n    constructor(driver) {\n        this.#driver = driver;\n    }\n    async withConnection(runner) {\n        const connection = await this.#driver.acquireConnection();\n        try {\n            return await runner(connection);\n        }\n        finally {\n            await this.#driver.releaseConnection(connection);\n        }\n    }\n}\n", "/// <reference types=\"./and-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AndNode = freeze({\n    is(node) {\n        return node.kind === 'AndNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'AndNode',\n            left,\n            right,\n        });\n    },\n});\n", "/// <reference types=\"./or-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrNode = freeze({\n    is(node) {\n        return node.kind === 'OrNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'OrNode',\n            left,\n            right,\n        });\n    },\n});\n", "/// <reference types=\"./on-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const OnNode = freeze({\n    is(node) {\n        return node.kind === 'OnNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'OnNode',\n            on: filter,\n        });\n    },\n    cloneWithFilter(onNode, op, filter) {\n        return freeze({\n            ...onNode,\n            on: op === 'And'\n                ? AndNode.create(onNode.on, filter)\n                : OrNode.create(onNode.on, filter),\n        });\n    },\n});\n", "/// <reference types=\"./join-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OnNode } from './on-node.js';\n/**\n * @internal\n */\nexport const JoinNode = freeze({\n    is(node) {\n        return node.kind === 'JoinNode';\n    },\n    create(joinType, table) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: undefined,\n        });\n    },\n    createWithOn(joinType, table, on) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: OnNode.create(on),\n        });\n    },\n    cloneWithOn(joinNode, filter) {\n        return freeze({\n            ...joinNode,\n            on: joinNode.on\n                ? OnNode.cloneWithFilter(joinNode.on, 'And', filter)\n                : OnNode.create(filter),\n        });\n    },\n    cloneWithOrOn(joinNode, filter) {\n        return freeze({\n            ...joinNode,\n            on: joinNode.on\n                ? OnNode.cloneWithFilter(joinNode.on, 'Or', filter)\n                : OnNode.create(filter),\n        });\n    },\n});\n", "/// <reference types=\"./filter-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FilterNode = freeze({\n    is(node) {\n        return node.kind === 'FilterNode';\n    },\n    create(left, op, right) {\n        return freeze({\n            kind: 'FilterNode',\n            left,\n            op,\n            right,\n        });\n    },\n});\n", "/// <reference types=\"./operator-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const OPERATORS = [\n    '=',\n    '==',\n    '!=',\n    '<>',\n    '>',\n    '>=',\n    '<',\n    '<=',\n    'in',\n    'not in',\n    'is',\n    'is not',\n    'like',\n    'not like',\n    'ilike',\n    'not ilike',\n    '@>',\n    '<@',\n    '?',\n    '?',\n    '?&',\n    '!<',\n    '!>',\n    '<=>',\n    '!~',\n    '~',\n    '~*',\n    '!~*',\n    'exists',\n    'not exists',\n    '&&',\n    '||',\n    '@@',\n    '@@@',\n    '!!',\n    '<->',\n];\n/**\n * @internal\n */\nexport const OperatorNode = freeze({\n    is(node) {\n        return node.kind === 'OperatorNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'OperatorNode',\n            operator,\n        });\n    },\n});\n", "/// <reference types=\"./parens-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ParensNode = freeze({\n    is(node) {\n        return node.kind === 'ParensNode';\n    },\n    create(node) {\n        return freeze({\n            kind: 'ParensNode',\n            node,\n        });\n    },\n});\n", "/// <reference types=\"./primitive-value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PrimitiveValueListNode = freeze({\n    is(node) {\n        return node.kind === 'PrimitiveValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'PrimitiveValueListNode',\n            values: freeze([...values]),\n        });\n    },\n});\n", "/// <reference types=\"./value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueListNode = freeze({\n    is(node) {\n        return node.kind === 'ValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValueListNode',\n            values: freeze(values),\n        });\n    },\n});\n", "/// <reference types=\"./value-parser.d.ts\" />\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { isReadonlyArray } from '../util/object-utils.js';\nimport { parseComplexExpression, isComplexExpression, } from './complex-expression-parser.js';\nexport function parseValueExpressionOrList(ctx, arg) {\n    if (isReadonlyArray(arg)) {\n        return parseValueExpressionList(ctx, arg);\n    }\n    else {\n        return parseValueExpression(ctx, arg);\n    }\n}\nexport function parseValueExpression(ctx, exp) {\n    if (isComplexExpression(exp)) {\n        return parseComplexExpression(ctx, exp);\n    }\n    return ValueNode.create(exp);\n}\nfunction parseValueExpressionList(ctx, arg) {\n    if (arg.some(isComplexExpression)) {\n        return ValueListNode.create(arg.map((it) => parseValueExpression(ctx, it)));\n    }\n    return PrimitiveValueListNode.create(arg);\n}\n", "/// <reference types=\"./filter-parser.d.ts\" />\nimport { FilterNode } from '../operation-node/filter-node.js';\nimport { freeze, isBoolean, isFunction, isNull, isString, } from '../util/object-utils.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { OperatorNode, OPERATORS, } from '../operation-node/operator-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nimport { parseValueExpressionOrList, } from './value-parser.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport function parseWhereFilter(ctx, args) {\n    return parseFilter(ctx, 'where', args);\n}\nexport function parseHavingFilter(ctx, args) {\n    return parseFilter(ctx, 'having', args);\n}\nexport function parseOnFilter(ctx, args) {\n    return parseFilter(ctx, 'on', args);\n}\nexport function parseReferenceFilter(ctx, lhs, op, rhs) {\n    return FilterNode.create(parseReferenceExpression(ctx, lhs), parseFilterOperator(op), parseReferenceExpression(ctx, rhs));\n}\nexport function parseExistFilter(ctx, arg) {\n    return parseExistExpression(ctx, 'exists', arg);\n}\nexport function parseNotExistFilter(ctx, arg) {\n    return parseExistExpression(ctx, 'not exists', arg);\n}\nexport function parseFilter(ctx, type, args) {\n    if (args.length === 3) {\n        return parseThreeArgFilter(ctx, args[0], args[1], args[2]);\n    }\n    else if (args.length === 1) {\n        return parseOneArgFilter(ctx, type, args[0]);\n    }\n    throw createFilterError(type, args);\n}\nfunction parseThreeArgFilter(ctx, left, op, right) {\n    if ((op === 'is' || op === 'is not') && (isNull(right) || isBoolean(right))) {\n        return parseIsFilter(ctx, left, op, right);\n    }\n    return FilterNode.create(parseReferenceExpression(ctx, left), parseFilterOperator(op), parseValueExpressionOrList(ctx, right));\n}\nfunction parseIsFilter(ctx, left, op, right) {\n    return FilterNode.create(parseReferenceExpression(ctx, left), parseFilterOperator(op), ValueNode.createImmediate(right));\n}\nfunction parseFilterOperator(op) {\n    if (isString(op) && OPERATORS.includes(op)) {\n        return OperatorNode.create(op);\n    }\n    else if (isOperationNodeSource(op)) {\n        return op.toOperationNode();\n    }\n    throw new Error(`invalid comparison operator ${JSON.stringify(op)} passed to a filter method`);\n}\nfunction parseExistExpression(ctx, type, arg) {\n    return FilterNode.create(undefined, OperatorNode.create(type), parseValueExpressionOrList(ctx, arg));\n}\nfunction parseOneArgFilter(ctx, type, arg) {\n    if (isFunction(arg)) {\n        return GROUP_PARSERS[type](ctx, arg);\n    }\n    else if (isOperationNodeSource(arg)) {\n        const node = arg.toOperationNode();\n        if (RawNode.is(node)) {\n            return node;\n        }\n    }\n    throw createFilterError(type, arg);\n}\nfunction createFilterError(type, args) {\n    return new Error(`invalid arguments passed to a '${type}' method: ${JSON.stringify(args)}`);\n}\nconst GROUP_PARSERS = freeze({\n    where(ctx, callback) {\n        const query = callback(ctx.createSelectQueryBuilder());\n        const queryNode = query.toOperationNode();\n        if (!queryNode.where) {\n            throw new Error('no `where` methods called insided a group callback');\n        }\n        return ParensNode.create(queryNode.where.where);\n    },\n    having(ctx, callback) {\n        const query = callback(ctx.createSelectQueryBuilder());\n        const queryNode = query.toOperationNode();\n        if (!queryNode.having) {\n            throw new Error('no `having` methods called insided a group callback');\n        }\n        return ParensNode.create(queryNode.having.having);\n    },\n    on(ctx, callback) {\n        const joinBuilder = callback(ctx.createJoinBuilder('InnerJoin', 'table'));\n        const joinNode = joinBuilder.toOperationNode();\n        if (!joinNode.on) {\n            throw new Error('no `on` methods called insided a group callback');\n        }\n        return ParensNode.create(joinNode.on.on);\n    },\n});\n", "/// <reference types=\"./join-parser.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { parseTableExpression, } from './table-parser.js';\nimport { parseReferenceFilter } from './filter-parser.js';\nexport function parseJoin(ctx, joinType, args) {\n    if (args.length === 3) {\n        return parseSingleOnJoin(ctx, joinType, args[0], args[1], args[2]);\n    }\n    else if (args.length === 2) {\n        return parseCallbackJoin(ctx, joinType, args[0], args[1]);\n    }\n    else {\n        throw new Error('not implemented');\n    }\n}\nfunction parseCallbackJoin(ctx, joinType, from, callback) {\n    const joinBuilder = callback(ctx.createJoinBuilder(joinType, from));\n    return joinBuilder.toOperationNode();\n}\nfunction parseSingleOnJoin(ctx, joinType, from, lhsColumn, rhsColumn) {\n    return JoinNode.createWithOn(joinType, parseTableExpression(ctx, from), parseReferenceFilter(ctx, lhsColumn, '=', rhsColumn));\n}\n", "/// <reference types=\"./selection-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ReferenceNode } from './reference-node.js';\nimport { SelectAllNode } from './select-all-node.js';\n/**\n * @internal\n */\nexport const SelectionNode = freeze({\n    is(node) {\n        return node.kind === 'SelectionNode';\n    },\n    create(selection) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: selection,\n        });\n    },\n    createSelectAll() {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: SelectAllNode.create(),\n        });\n    },\n    createSelectAllFromTable(table) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: ReferenceNode.createSelectAll(table),\n        });\n    },\n});\n", "/// <reference types=\"./select-parser.d.ts\" />\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { SelectionNode } from '../operation-node/selection-node.js';\nimport { parseAliasedStringReference } from './reference-parser.js';\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { parseAliasedComplexExpression, } from './complex-expression-parser.js';\nexport function parseSelectExpressionOrList(ctx, selection) {\n    if (isReadonlyArray(selection)) {\n        return selection.map((it) => parseSelectExpression(ctx, it));\n    }\n    else {\n        return [parseSelectExpression(ctx, selection)];\n    }\n}\nfunction parseSelectExpression(ctx, selection) {\n    if (isString(selection)) {\n        return SelectionNode.create(parseAliasedStringReference(selection));\n    }\n    else if (isDynamicReferenceBuilder(selection)) {\n        return SelectionNode.create(selection.toOperationNode());\n    }\n    else {\n        return SelectionNode.create(parseAliasedComplexExpression(ctx, selection));\n    }\n}\nexport function parseSelectAll(table) {\n    if (!table) {\n        return [SelectionNode.createSelectAll()];\n    }\n    else if (Array.isArray(table)) {\n        return table.map(parseSelectAllArg);\n    }\n    else {\n        return [parseSelectAllArg(table)];\n    }\n}\nfunction parseSelectAllArg(table) {\n    if (isString(table)) {\n        return SelectionNode.createSelectAllFromTable(table);\n    }\n    throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);\n}\n", "/// <reference types=\"./from-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FromNode = freeze({\n    is(node) {\n        return node.kind === 'FromNode';\n    },\n    create(froms) {\n        return freeze({\n            kind: 'FromNode',\n            froms: freeze(froms),\n        });\n    },\n    cloneWithFroms(from, froms) {\n        return freeze({\n            ...from,\n            froms: freeze([...from.froms, ...froms]),\n        });\n    },\n});\n", "/// <reference types=\"./group-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'GroupByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(orderBy, items) {\n        return freeze({\n            ...orderBy,\n            items: freeze([...orderBy.items, ...items]),\n        });\n    },\n});\n", "/// <reference types=\"./having-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const HavingNode = freeze({\n    is(node) {\n        return node.kind === 'HavingNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'HavingNode',\n            having: filter,\n        });\n    },\n    cloneWithFilter(havingNode, op, filter) {\n        return freeze({\n            ...havingNode,\n            having: op === 'And'\n                ? AndNode.create(havingNode.having, filter)\n                : OrNode.create(havingNode.having, filter),\n        });\n    },\n});\n", "/// <reference types=\"./order-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByNode';\n    },\n    create(item) {\n        return freeze({\n            kind: 'OrderByNode',\n            items: freeze([item]),\n        });\n    },\n    cloneWithItem(orderBy, item) {\n        return freeze({\n            ...orderBy,\n            items: freeze([...orderBy.items, item]),\n        });\n    },\n});\n", "/// <reference types=\"./select-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { GroupByNode } from './group-by-node.js';\nimport { HavingNode } from './having-node.js';\nimport { OrderByNode } from './order-by-node.js';\n/**\n * @internal\n */\nexport const SelectQueryNode = freeze({\n    is(node) {\n        return node.kind === 'SelectQueryNode';\n    },\n    create(fromItems, withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithSelections(select, selections) {\n        return freeze({\n            ...select,\n            selections: select.selections\n                ? freeze([...select.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n    cloneWithDistinctOnSelections(select, selections) {\n        return freeze({\n            ...select,\n            distinctOnSelections: select.distinctOnSelections\n                ? freeze([...select.distinctOnSelections, ...selections])\n                : freeze(selections),\n        });\n    },\n    cloneWithModifier(select, modifier) {\n        return freeze({\n            ...select,\n            modifiers: select.modifiers\n                ? freeze([...select.modifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithOrderByItem(selectNode, item) {\n        return freeze({\n            ...selectNode,\n            orderBy: selectNode.orderBy\n                ? OrderByNode.cloneWithItem(selectNode.orderBy, item)\n                : OrderByNode.create(item),\n        });\n    },\n    cloneWithGroupByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            groupBy: selectNode.groupBy\n                ? GroupByNode.cloneWithItems(selectNode.groupBy, items)\n                : GroupByNode.create(items),\n        });\n    },\n    cloneWithLimit(selectNode, limit) {\n        return freeze({\n            ...selectNode,\n            limit,\n        });\n    },\n    cloneWithOffset(selectNode, offset) {\n        return freeze({\n            ...selectNode,\n            offset,\n        });\n    },\n    cloneWithHaving(selectNode, filter) {\n        return freeze({\n            ...selectNode,\n            having: selectNode.having\n                ? HavingNode.cloneWithFilter(selectNode.having, 'And', filter)\n                : HavingNode.create(filter),\n        });\n    },\n    cloneWithOrHaving(selectNode, filter) {\n        return freeze({\n            ...selectNode,\n            having: selectNode.having\n                ? HavingNode.cloneWithFilter(selectNode.having, 'Or', filter)\n                : HavingNode.create(filter),\n        });\n    },\n    cloneWithDistinct(selectNode) {\n        return freeze({\n            ...selectNode,\n            distinct: true,\n        });\n    },\n    cloneWithUnion(selectNode, union) {\n        return freeze({\n            ...selectNode,\n            union: selectNode.union\n                ? freeze([...selectNode.union, union])\n                : freeze([union]),\n        });\n    },\n});\n", "/// <reference types=\"./insert-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const InsertQueryNode = freeze({\n    is(node) {\n        return node.kind === 'InsertQueryNode';\n    },\n    create(into, withNode) {\n        return freeze({\n            kind: 'InsertQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWith(insertQuery, props) {\n        return freeze({\n            ...insertQuery,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./update-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UpdateQueryNode = freeze({\n    is(node) {\n        return node.kind === 'UpdateQueryNode';\n    },\n    create(table, withNode) {\n        return {\n            kind: 'UpdateQueryNode',\n            table,\n            ...(withNode && { with: withNode }),\n        };\n    },\n    cloneWithUpdates(updateQuery, updates) {\n        return freeze({\n            ...updateQuery,\n            updates: updateQuery.updates\n                ? freeze([...updateQuery.updates, ...updates])\n                : updates,\n        });\n    },\n});\n", "/// <reference types=\"./delete-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\n/**\n * @internal\n */\nexport const DeleteQueryNode = freeze({\n    is(node) {\n        return node.kind === 'DeleteQueryNode';\n    },\n    create(fromItem, withNode) {\n        return freeze({\n            kind: 'DeleteQueryNode',\n            from: FromNode.create([fromItem]),\n            ...(withNode && { with: withNode }),\n        });\n    },\n});\n", "/// <reference types=\"./where-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const WhereNode = freeze({\n    is(node) {\n        return node.kind === 'WhereNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'WhereNode',\n            where: filter,\n        });\n    },\n    cloneWithFilter(whereNode, op, filter) {\n        return freeze({\n            ...whereNode,\n            where: op === 'And'\n                ? AndNode.create(whereNode.where, filter)\n                : OrNode.create(whereNode.where, filter),\n        });\n    },\n});\n", "/// <reference types=\"./returning-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReturningNode = freeze({\n    is(node) {\n        return node.kind === 'ReturningNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'ReturningNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(returning, selections) {\n        return freeze({\n            ...returning,\n            selections: returning.selections\n                ? freeze([...returning.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n", "/// <reference types=\"./query-node.d.ts\" />\nimport { InsertQueryNode } from './insert-query-node.js';\nimport { SelectQueryNode } from './select-query-node.js';\nimport { UpdateQueryNode } from './update-query-node.js';\nimport { DeleteQueryNode } from './delete-query-node.js';\nimport { WhereNode } from './where-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { ReturningNode } from './returning-node.js';\n/**\n * @internal\n */\nexport const QueryNode = freeze({\n    is(node) {\n        return (DeleteQueryNode.is(node) ||\n            InsertQueryNode.is(node) ||\n            UpdateQueryNode.is(node) ||\n            SelectQueryNode.is(node));\n    },\n    cloneWithWhere(node, filter) {\n        return freeze({\n            ...node,\n            where: node.where\n                ? WhereNode.cloneWithFilter(node.where, 'And', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOrWhere(node, filter) {\n        return freeze({\n            ...node,\n            where: node.where\n                ? WhereNode.cloneWithFilter(node.where, 'Or', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithJoin(node, join) {\n        return freeze({\n            ...node,\n            joins: node.joins ? freeze([...node.joins, join]) : freeze([join]),\n        });\n    },\n    cloneWithReturning(node, selections) {\n        return freeze({\n            ...node,\n            returning: node.returning\n                ? ReturningNode.cloneWithSelections(node.returning, selections)\n                : ReturningNode.create(selections),\n        });\n    },\n});\n", "/// <reference types=\"./order-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByItemNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByItemNode';\n    },\n    create(orderBy, direction) {\n        return freeze({\n            kind: 'OrderByItemNode',\n            orderBy,\n            direction,\n        });\n    },\n});\n", "/// <reference types=\"./order-by-parser.d.ts\" />\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseOrderBy(ctx, orderBy, direction) {\n    return OrderByItemNode.create(parseOrderByExpression(ctx, orderBy), parseOrderByDirectionExpression(direction));\n}\nfunction parseOrderByExpression(ctx, expr) {\n    return parseReferenceExpression(ctx, expr);\n}\nfunction parseOrderByDirectionExpression(expr) {\n    if (!expr) {\n        return undefined;\n    }\n    if (expr === 'asc' || expr === 'desc') {\n        return RawNode.createWithSql(expr);\n    }\n    else {\n        return expr.toOperationNode();\n    }\n}\n", "/// <reference types=\"./limit-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const LimitNode = freeze({\n    is(node) {\n        return node.kind === 'LimitNode';\n    },\n    create(limit) {\n        return freeze({\n            kind: 'LimitNode',\n            limit: ValueNode.create(limit),\n        });\n    },\n});\n", "/// <reference types=\"./offset-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const OffsetNode = freeze({\n    is(node) {\n        return node.kind === 'OffsetNode';\n    },\n    create(offset) {\n        return freeze({\n            kind: 'OffsetNode',\n            offset: ValueNode.create(offset),\n        });\n    },\n});\n", "/// <reference types=\"./group-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByItemNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByItemNode';\n    },\n    create(groupBy) {\n        return freeze({\n            kind: 'GroupByItemNode',\n            groupBy,\n        });\n    },\n});\n", "/// <reference types=\"./group-by-parser.d.ts\" />\nimport { GroupByItemNode } from '../operation-node/group-by-item-node.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parseGroupBy(ctx, orderBy) {\n    return parseReferenceExpressionOrList(ctx, orderBy).map(GroupByItemNode.create);\n}\n", "/// <reference types=\"./union-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UnionNode = freeze({\n    is(node) {\n        return node.kind === 'UnionNode';\n    },\n    create(union, all) {\n        return freeze({\n            kind: 'UnionNode',\n            union,\n            all,\n        });\n    },\n});\n", "/// <reference types=\"./union-parser.d.ts\" />\nimport { UnionNode } from '../operation-node/union-node.js';\nexport function parseUnion(union, all) {\n    return UnionNode.create(union.toOperationNode(), all);\n}\n", "/// <reference types=\"./no-result-error.d.ts\" />\nexport class NoResultError extends Error {\n    /**\n     * The operation node tree of the query that was executed.\n     */\n    node;\n    constructor(node) {\n        super('no result');\n        this.node = node;\n    }\n}\n", "/// <reference types=\"./select-query-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseSelectExpressionOrList, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseExistFilter, parseReferenceFilter, parseWhereFilter, parseHavingFilter, parseNotExistFilter, } from '../parser/filter-parser.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { OffsetNode } from '../operation-node/offset-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { parseGroupBy } from '../parser/group-by-parser.js';\nimport { parseUnion } from '../parser/union-parser.js';\nimport { NoResultError } from './no-result-error.js';\nexport class SelectQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    orWhere(...args) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    orWhereRef(lhs, op, rhs) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    whereExists(arg) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    whereNotExists(arg) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    orWhereExists(arg) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    orWhereNotExists(arg) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    having(...args) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseHavingFilter(this.#props.parseContext, args)),\n        });\n    }\n    havingRef(lhs, op, rhs) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    orHaving(...args) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOrHaving(this.#props.queryNode, parseHavingFilter(this.#props.parseContext, args)),\n        });\n    }\n    orHavingRef(lhs, op, rhs) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOrHaving(this.#props.queryNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    havingExists(arg) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    havingNotExist(arg) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    orHavingExists(arg) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOrHaving(this.#props.queryNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    orHavingNotExists(arg) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOrHaving(this.#props.queryNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    select(selection) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectExpressionOrList(this.#props.parseContext, selection)),\n        });\n    }\n    distinctOn(selection) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithDistinctOnSelections(this.#props.queryNode, parseSelectExpressionOrList(this.#props.parseContext, selection)),\n        });\n    }\n    /**\n     * Makes the selection distinct.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .select('first_name')\n     *   .distinct()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select distinct \"first_name\" from \"person\"\n     * ```\n     */\n    distinct() {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithDistinct(this.#props.queryNode),\n        });\n    }\n    /**\n     * Adds the `for update` option to a select query on supported databases.\n     */\n    forUpdate() {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithModifier(this.#props.queryNode, 'ForUpdate'),\n        });\n    }\n    /**\n     * Adds the `for share` option to a select query on supported databases.\n     */\n    forShare() {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithModifier(this.#props.queryNode, 'ForShare'),\n        });\n    }\n    /**\n     * Adds the `for key share` option to a select query on supported databases.\n     */\n    forKeyShare() {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithModifier(this.#props.queryNode, 'ForKeyShare'),\n        });\n    }\n    /**\n     * Adds the `for no key update` option to a select query on supported databases.\n     */\n    forNoKeyUpdate() {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithModifier(this.#props.queryNode, 'ForNoKeyUpdate'),\n        });\n    }\n    /**\n     * Adds the `skip locked` option to a select query on supported databases.\n     */\n    skipLocked() {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithModifier(this.#props.queryNode, 'SkipLocked'),\n        });\n    }\n    /**\n     * Adds the `nowait` option to a select query on supported databases.\n     */\n    noWait() {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithModifier(this.#props.queryNode, 'NoWait'),\n        });\n    }\n    selectAll(table) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    innerJoin(...args) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'FullJoin', args)),\n        });\n    }\n    /**\n     * Adds an `order by` clause to the query.\n     *\n     * `orderBy` calls are additive. To order by multiple columns, call `orderBy`\n     * multiple times.\n     *\n     * The first argument is the expression to order by and the second is the\n     * order (`asc` or `desc`).\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .selectFrom('person')\n     *   .select('person.first_name as fn')\n     *   .orderBy('id')\n     *   .orderBy('fn', 'desc')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"first_name\" as \"fn\"\n     * from \"person\"\n     * order by \"id\" asc, \"fn\" desc\n     * ```\n     *\n     * The order by expression can also be a `raw` expression or a subquery\n     * in addition to column references:\n     *\n     * ```ts\n     * await db\n     *   .selectFrom('person')\n     *   .selectAll()\n     *   .orderBy((qb) => qb.selectFrom('pet')\n     *     .select('pet.name')\n     *     .whereRef('pet.owner_id', '=', 'person.id')\n     *     .limit(1)\n     *   )\n     *   .orderBy(\n     *     db.raw('concat(first_name, last_name)')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select *\n     * from \"person\"\n     * order by\n     *   ( select \"pet\".\"name\"\n     *     from \"pet\"\n     *     where \"pet\".\"owner_id\" = \"person\".\"id\"\n     *     limit 1\n     *   ) asc,\n     *   concat(first_name, last_name) asc\n     * ```\n     *\n     * `dynamic.ref` can be used to refer to columns not known at\n     * compile time:\n     *\n     * ```ts\n     * async function someQuery(orderBy: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .select('person.first_name as fn')\n     *     .orderBy(ref(orderBy))\n     *     .execute()\n     * }\n     *\n     * someQuery('fn')\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"first_name\" as \"fn\"\n     * from \"person\"\n     * order by \"fn\" asc\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOrderByItem(this.#props.queryNode, parseOrderBy(this.#props.parseContext, orderBy, direction)),\n        });\n    }\n    groupBy(groupBy) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, parseGroupBy(this.#props.parseContext, groupBy)),\n        });\n    }\n    /**\n     * Adds a limit clause to the query.\n     *\n     * ### Examples\n     *\n     * Select the first 10 rows of the result:\n     *\n     * ```ts\n     * return await db\n     *   .selectFrom('person')\n     *   .select('first_name')\n     *   .limit(10)\n     * ```\n     *\n     * Select rows from index 10 to index 19 of the result:\n     *\n     * ```ts\n     * return await db\n     *   .selectFrom('person')\n     *   .select('first_name')\n     *   .offset(10)\n     *   .limit(10)\n     * ```\n     */\n    limit(limit) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(limit)),\n        });\n    }\n    /**\n     * Adds an offset clause to the query.\n     *\n     * ### Examples\n     *\n     * Select rows from index 10 to index 19 of the result:\n     *\n     * ```ts\n     * return await db\n     *   .selectFrom('person')\n     *   .select('first_name')\n     *   .offset(10)\n     *   .limit(10)\n     * ```\n     */\n    offset(offset) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOffset(this.#props.queryNode, OffsetNode.create(offset)),\n        });\n    }\n    /**\n     * Combines another select query or raw expression to this query using `union`.\n     *\n     * The output row type of the combined query must match `this` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person')\n     *   .select(['id', 'first_name as name'])\n     *   .union(db.selectFrom('pet').select(['id', 'name']))\n     *   .orderBy('name')\n     * ```\n     */\n    union(expression) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithUnion(this.#props.queryNode, parseUnion(expression, false)),\n        });\n    }\n    /**\n     * Combines another select query or raw expression to this query using `union all`.\n     *\n     * The output row type of the combined query must match `this` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person')\n     *   .select(['id', 'first_name as name'])\n     *   .unionAll(db.selectFrom('pet').select(['id', 'name']))\n     *   .orderBy('name')\n     * ```\n     */\n    unionAll(expression) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithUnion(this.#props.queryNode, parseUnion(expression, true)),\n        });\n    }\n    /**\n     * Simply calls the given function passing `this` as the only argument.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper funtion `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.selectFrom('person')\n     *   .selectAll()\n     *   .call(log)\n     *   .execute()\n     * ```\n     */\n    call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `select` or `selectAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * Also see [this recipe](https://github.com/koskimas/kysely/tree/master/recipes/conditional-selects.md)\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function getPerson(id: number, withLastName: boolean) {\n     *   return await db\n     *     .selectFrom('person')\n     *     .select(['id', 'first_name'])\n     *     .if(withLastName, (qb) => qb.select('last_name'))\n     *     .where('id', '=', id)\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `getPerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     *\n     * You can also call any other methods inside the callback:\n     *\n     * ```ts\n     * const { count } = db.fn\n     *\n     * db.selectFrom('person')\n     *   .select('person.id')\n     *   .if(filterByFirstName, (qb) => qb.where('first_name', '=', firstName))\n     *   .if(filterByPetCount, (qb) => qb\n     *     .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *     .having(count('pet.id'), '>', petCountLimit)\n     *     .groupBy('person.id')\n     *   )\n     * ```\n     */\n    if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new SelectQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Gives an alias for the query. This method is only useful for sub queries.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.selectFrom('pet')\n     *   .selectAll('pet')\n     *   .select(\n     *     (qb) => qb.selectFrom('person')\n     *       .select('first_name')\n     *       .whereRef('pet.owner_id', '=', 'person.id')\n     *       .as('owner_first_name')\n     *   )\n     *   .execute()\n     * ```\n     */\n    as(alias) {\n        return new AliasedQueryBuilder(this, alias);\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    castTo() {\n        return new SelectQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this SelectQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new SelectQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compildQuery = this.compile();\n        const query = compildQuery.query;\n        const result = await this.#props.executor.executeQuery(compildQuery, this.#props.queryId);\n        return result.rows;\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            throw new errorConstructor(this.toOperationNode());\n        }\n        return result;\n    }\n}\npreventAwait(SelectQueryBuilder, \"don't await SelectQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n/**\n * {@link SelectQueryBuilder} with an alias. The result of calling {@link SelectQueryBuilder.as}.\n */\nexport class AliasedQueryBuilder {\n    #queryBuilder;\n    #alias;\n    constructor(queryBuilder, alias) {\n        this.#queryBuilder = queryBuilder;\n        this.#alias = alias;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param A\n     * which causes this type to be equal to AliasedQueryBuilder with any A\n     * as long as D, TB and O are the same.\n     */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        const node = this.#queryBuilder.toOperationNode();\n        if (SelectQueryNode.is(node)) {\n            return AliasNode.create(node, this.#alias);\n        }\n        throw new Error('only select queries can be aliased');\n    }\n}\n", "/// <reference types=\"./values-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValuesNode = freeze({\n    is(node) {\n        return node.kind === 'ValuesNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValuesNode',\n            values: freeze(values),\n        });\n    },\n});\n", "/// <reference types=\"./insert-values-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { ValuesNode } from '../operation-node/values-node.js';\nimport { isComplexExpression } from './complex-expression-parser.js';\nexport function parseInsertObjectOrList(ctx, args) {\n    return parseInsertColumnsAndValues(ctx, Array.isArray(args) ? args : [args]);\n}\nfunction parseInsertColumnsAndValues(ctx, rows) {\n    const columns = parseColumnNamesAndIndexes(rows);\n    return [\n        freeze([...columns.keys()].map(ColumnNode.create)),\n        ValuesNode.create(rows.map((row) => parseRowValues(ctx, row, columns))),\n    ];\n}\nfunction parseColumnNamesAndIndexes(rows) {\n    const columns = new Map();\n    for (const row of rows) {\n        const cols = Object.keys(row);\n        for (const col of cols) {\n            if (!columns.has(col) && row[col] !== undefined) {\n                columns.set(col, columns.size);\n            }\n        }\n    }\n    return columns;\n}\nfunction parseRowValues(ctx, row, columns) {\n    const rowColumns = Object.keys(row);\n    const rowValues = new Array(columns.size).fill(null);\n    for (const col of rowColumns) {\n        const columnIdx = columns.get(col);\n        const value = row[col];\n        if (columnIdx !== undefined) {\n            rowValues[columnIdx] = value;\n        }\n    }\n    if (rowValues.some(isComplexExpression)) {\n        return ValueListNode.create(rowValues.map((it) => parseValueExpression(ctx, it)));\n    }\n    return PrimitiveValueListNode.create(rowValues);\n}\n", "/// <reference types=\"./column-update-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ColumnUpdateNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnUpdateNode';\n    },\n    create(column, value) {\n        return freeze({\n            kind: 'ColumnUpdateNode',\n            column,\n            value,\n        });\n    },\n});\n", "/// <reference types=\"./update-set-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ColumnUpdateNode } from '../operation-node/column-update-node.js';\nimport { parseValueExpression } from './value-parser.js';\nexport function parseUpdateObject(ctx, row) {\n    return Object.entries(row)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => {\n        return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(ctx, value));\n    });\n}\n", "/// <reference types=\"./on-duplicate-key-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OnDuplicateKeyNode = freeze({\n    is(node) {\n        return node.kind === 'OnDuplicateKeyNode';\n    },\n    create(updates) {\n        return freeze({\n            kind: 'OnDuplicateKeyNode',\n            updates,\n        });\n    },\n});\n", "/// <reference types=\"./insert-result.d.ts\" />\n/**\n * The result of an insert query.\n *\n * If the table has an auto incrementing primary key {@link insertId} will hold\n * the generated id on dialects that support it. For example PostgreSQL doesn't\n * return the id by default and {@link insertId} is undefined. On PostgreSQL you\n * need to use {@link ReturningInterface.returning} or {@link ReturningInterface.returningAll}\n * to get out the inserted id.\n *\n * ### Examples\n *\n * ```ts\n * const result = await db\n *   .insertInto('person')\n *   .values(person)\n *   .executeTakeFirst()\n *\n * console.log(result.insertId)\n * ```\n */\nexport class InsertResult {\n    #insertId;\n    constructor(insertId) {\n        this.#insertId = insertId;\n    }\n    /**\n     * The auto incrementing primary key\n     */\n    get insertId() {\n        return this.#insertId;\n    }\n}\n", "/// <reference types=\"./on-conflict-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const OnConflictNode = freeze({\n    is(node) {\n        return node.kind === 'OnConflictNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OnConflictNode',\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithIndexWhere(node, filter) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithFilter(node.indexWhere, 'And', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithIndexOrWhere(node, filter) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithFilter(node.indexWhere, 'Or', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithUpdateWhere(node, filter) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithFilter(node.updateWhere, 'And', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithUpdateOrWhere(node, filter) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithFilter(node.updateWhere, 'Or', filter)\n                : WhereNode.create(filter),\n        });\n    },\n});\n", "/// <reference types=\"./on-conflict-builder.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseWhereFilter, parseReferenceFilter, parseExistFilter, parseNotExistFilter, } from '../parser/filter-parser.js';\nimport { parseUpdateObject, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class OnConflictBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specify a single column as the conflict target.\n     *\n     * Also see the {@link columns}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    column(column) {\n        const columnNode = ColumnNode.create(column);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, columnNode])\n                    : freeze([columnNode]),\n            }),\n        });\n    }\n    /**\n     * Specify a list of columns as the conflict target.\n     *\n     * Also see the {@link column}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    columns(columns) {\n        const columnNodes = columns.map(ColumnNode.create);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, ...columnNodes])\n                    : freeze(columnNodes),\n            }),\n        });\n    }\n    /**\n     * Specify a specific constraint by name as the conflict target.\n     *\n     * Also see the {@link column}, {@link columns} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    constraint(constraintName) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                constraint: IdentifierNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Specify an expression as the conflict target.\n     *\n     * This can be used if the unique index is an expression index.\n     *\n     * Also see the {@link column}, {@link columns} and {@link constraint}\n     * methods for alternative ways to specify the conflict target.\n     */\n    expression(expression) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                indexExpression: expression.toOperationNode(),\n            }),\n        });\n    }\n    where(...args) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    /**\n     * Specify an index predicate for the index target.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    orWhere(...args) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexOrWhere(this.#props.onConflictNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    /**\n     * Specify an index predicate for the index target.\n     *\n     * See {@link WhereInterface.orWhereRef} for more info.\n     */\n    orWhereRef(lhs, op, rhs) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexOrWhere(this.#props.onConflictNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    /**\n     * Specify an index predicate for the index target.\n     *\n     * See {@link WhereInterface.whereExists} for more info.\n     */\n    whereExists(arg) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Specify an index predicate for the index target.\n     *\n     * See {@link WhereInterface.whereNotExists} for more info.\n     */\n    whereNotExists(arg) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Specify an index predicate for the index target.\n     *\n     * See {@link WhereInterface.orWhereExists} for more info.\n     */\n    orWhereExists(arg) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexOrWhere(this.#props.onConflictNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Specify an index predicate for the index target.\n     *\n     * See {@link WhereInterface.orWhereNotExists} for more info.\n     */\n    orWhereNotExists(arg) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexOrWhere(this.#props.onConflictNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Adds the \"do nothing\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({\u00A0first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doNothing()\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\") do nothing\n     * ```\n     */\n    doNothing() {\n        return new OnConflictDoNothingBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                doNothing: true,\n            }),\n        });\n    }\n    /**\n     * Adds the \"do update set\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({\u00A0first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doUpdateSet({ first_name })\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\")\n     * do update set \"first_name\" = $3\n     * ```\n     */\n    doUpdateSet(updates) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                updates: parseUpdateObject(this.#props.parseContext, updates),\n            }),\n        });\n    }\n}\npreventAwait(OnConflictBuilder, \"don't await OnConflictBuilder instances.\");\nexport class OnConflictDoNothingBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\npreventAwait(OnConflictDoNothingBuilder, \"don't await OnConflictDoNothingBuilder instances.\");\nexport class OnConflictUpdateBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    orWhere(...args) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateOrWhere(this.#props.onConflictNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.orWhereRef} for more info.\n     */\n    orWhereRef(lhs, op, rhs) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateOrWhere(this.#props.onConflictNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereExists} for more info.\n     */\n    whereExists(arg) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereNotExists} for more info.\n     */\n    whereNotExists(arg) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.orWhereExists} for more info.\n     */\n    orWhereExists(arg) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateOrWhere(this.#props.onConflictNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.orWhereNotExists} for more info.\n     */\n    orWhereNotExists(arg) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateOrWhere(this.#props.onConflictNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\npreventAwait(OnConflictUpdateBuilder, \"don't await OnConflictUpdateBuilder instances.\");\n", "/// <reference types=\"./insert-query-builder.d.ts\" />\nimport { parseSelectExpressionOrList, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseInsertObjectOrList, } from '../parser/insert-values-parser.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseUpdateObject, } from '../parser/update-set-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { OnDuplicateKeyNode } from '../operation-node/on-duplicate-key-node.js';\nimport { InsertResult } from './insert-result.js';\nimport { NoResultError } from './no-result-error.js';\nimport { parseComplexExpression, } from '../parser/complex-expression-parser.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { OnConflictBuilder, } from './on-conflict-builder.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nexport class InsertQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    values(args) {\n        const [columns, values] = parseInsertObjectOrList(this.#props.parseContext, args);\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns,\n                values,\n            }),\n        });\n    }\n    /**\n     * Sets the columns to insert.\n     *\n     * The {@link values} method sets both the columns and the values and this method\n     * is not needed. But if you are using the {@link expression} method, you can use\n     * this method to set the columns to insert.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .columns(['first_name'])\n     *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\")\n     * select \"pet\".\"name\" from \"pet\"\n     * ```\n     */\n    columns(columns) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns: freeze(columns.map(ColumnNode.create)),\n            }),\n        });\n    }\n    /**\n     * Insert an arbitrary expression. For example the result of a select query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .columns(['first_name'])\n     *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\")\n     * select \"pet\".\"name\" from \"pet\"\n     * ```\n     */\n    expression(expression) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                values: parseComplexExpression(this.#props.parseContext, expression),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert ignore into` query.\n     *\n     * If you use the ignore modifier, ignorable errors that occur while executing the\n     * insert statement are ignored. For example, without ignore, a row that duplicates\n     * an existing unique index or primary key value in the table causes a duplicate-key\n     * error and the statement is aborted. With ignore, the row is discarded and no error\n     * occurs.\n     *\n     * This is only supported on some dialects like MySQL. On most dialects you should\n     * use the {@link onConflict} method.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .ignore()\n     *   .values(values)\n     *   .execute()\n     * ```\n     */\n    ignore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                ignore: true,\n            }),\n        });\n    }\n    /**\n     * Adds an `on conflict` clause to the query.\n     *\n     * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL\n     * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can provide the name of the constraint instead of a column name:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .constraint('pet_name_key')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict on constraint \"pet_name_key\"\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can also specify an expression as the conflict target in case\n     * the unique index is an expression index:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .expression(db.raw('lower(name)'))\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (lower(name))\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can add a filter for the update statement like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *     .where('excluded.name', '!=', 'Catto'')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * where \"excluded\".\"name\" != $4\n     * ```\n     *\n     * You can create an `on conflict do nothing` clauses like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\") do nothing\n     * ```\n     *\n     * You can refer to the columns of the virtual `excluded` table\n     * in a type-safe way using a callback and the `ref` method of\n     * `ExpressionBuilder`:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict(oc => oc\n     *     .column('id')\n     *     .doUpdateSet({\n     *       first_name: (eb) => eb.ref('excluded.first_name'),\n     *       last_name: (eb) => eb.ref('excluded.last_name')\n     *     })\n     *   )\n     * ```\n     */\n    onConflict(callback) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onConflict: callback(new OnConflictBuilder({\n                    onConflictNode: OnConflictNode.create(),\n                    parseContext: this.#props.parseContext,\n                })).toOperationNode(),\n            }),\n        });\n    }\n    /**\n     * Adds `on duplicate key update` to the query.\n     *\n     * If you specify `on duplicate key update`, and a row is inserted that would cause\n     * a duplicate value in a unique index or primary key, an update of the old row occurs.\n     *\n     * This is only implemented by some dialects like MySQL. On most dialects you should\n     * use {@link onConflict} instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values(values)\n     *   .onDuplicateKeyUpdate({ species: 'hamster' })\n     * ```\n     */\n    onDuplicateKeyUpdate(updates) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateObject(this.#props.parseContext, updates)),\n            }),\n        });\n    }\n    returning(selection) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectExpressionOrList(this.#props.parseContext, selection)),\n        });\n    }\n    returningAll() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    /**\n     * Simply calls the given function passing `this` as the only argument.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper funtion `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .call(log)\n     *   .execute()\n     * ```\n     */\n    call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function insertPerson(values: InsertablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .insertInto('person')\n     *     .values(values)\n     *     .returning(['id', 'first_name'])\n     *     .if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `insertPerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new InsertQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    castTo() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compildQuery = this.compile();\n        const query = compildQuery.query;\n        const result = await this.#props.executor.executeQuery(compildQuery, this.#props.queryId);\n        if (this.#props.parseContext.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        else {\n            return [new InsertResult(result.insertId)];\n        }\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            throw new errorConstructor(this.toOperationNode());\n        }\n        return result;\n    }\n}\npreventAwait(InsertQueryBuilder, \"don't await InsertQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "/// <reference types=\"./delete-result.d.ts\" />\nexport class DeleteResult {\n    #numDeletedRows;\n    constructor(numDeletedRows) {\n        this.#numDeletedRows = numDeletedRows;\n    }\n    get numDeletedRows() {\n        return this.#numDeletedRows;\n    }\n}\n", "/// <reference types=\"./delete-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseSelectExpressionOrList, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseExistFilter, parseReferenceFilter, parseWhereFilter, parseNotExistFilter, } from '../parser/filter-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { NoResultError } from './no-result-error.js';\nimport { DeleteResult } from './delete-result.js';\nexport class DeleteQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    orWhere(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    orWhereRef(lhs, op, rhs) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    whereExists(arg) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    whereNotExists(arg) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    orWhereExists(arg) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    orWhereNotExists(arg) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    innerJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'FullJoin', args)),\n        });\n    }\n    returning(selection) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectExpressionOrList(this.#props.parseContext, selection)),\n        });\n    }\n    returningAll() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    /**\n     * Simply calls the given function passing `this` as the only argument.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper funtion `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.deleteFrom('person')\n     *   .call(log)\n     *   .execute()\n     * ```\n     */\n    call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function deletePerson(id: number, returnLastName: boolean) {\n     *   return await db\n     *     .deleteFrom('person')\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `deletePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new DeleteQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    castTo() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compildQuery = this.compile();\n        const query = compildQuery.query;\n        const result = await this.#props.executor.executeQuery(compildQuery, this.#props.queryId);\n        if (this.#props.parseContext.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        else {\n            return [new DeleteResult(result.numUpdatedOrDeletedRows)];\n        }\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            throw new errorConstructor(this.toOperationNode());\n        }\n        return result;\n    }\n}\npreventAwait(DeleteQueryBuilder, \"don't await DeleteQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "/// <reference types=\"./update-result.d.ts\" />\nexport class UpdateResult {\n    #numUpdatedRows;\n    constructor(numUpdatedRows) {\n        this.#numUpdatedRows = numUpdatedRows;\n    }\n    get numUpdatedRows() {\n        return this.#numUpdatedRows;\n    }\n}\n", "/// <reference types=\"./update-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseSelectExpressionOrList, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseExistFilter, parseReferenceFilter, parseWhereFilter, parseNotExistFilter, } from '../parser/filter-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseUpdateObject, } from '../parser/update-set-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { UpdateResult } from './update-result.js';\nimport { NoResultError } from './no-result-error.js';\nexport class UpdateQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    orWhere(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseWhereFilter(this.#props.parseContext, args)),\n        });\n    }\n    orWhereRef(lhs, op, rhs) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    whereExists(arg) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    whereNotExists(arg) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    orWhereExists(arg) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    orWhereNotExists(arg) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrWhere(this.#props.queryNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    innerJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(this.#props.parseContext, 'FullJoin', args)),\n        });\n    }\n    /**\n     * Sets the values to update for an {@link Kysely.updateTable | update} query.\n     *\n     * This method takes an object whose keys are column names and values are\n     * values to update. In addition to the column's type, the values can be `raw`\n     * instances or select queries.\n     *\n     * The return value of an update query is an instance of {@link UpdateResult}.\n     * You can use the {@link returning} method on supported databases to get out\n     * the updated rows.\n     *\n     * ### Examples\n     *\n     * Update a row in `person` table:\n     *\n     * ```ts\n     * const result = await db\n     *   .updateTable('person')\n     *   .set({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .where('id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numUpdatedRows)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * update \"person\" set \"first_name\" = $1, \"last_name\" = $2 where \"id\" = $3\n     * ```\n     *\n     * On PostgreSQL you ca chain `returning` to the query to get\n     * the updated rows' columns (or any other expression) as the\n     * return value:\n     *\n     * ```ts\n     * const row = await db\n     *   .updateTable('person')\n     *   .set({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .where('id', '=', 1)\n     *   .returning('id')\n     *   .executeTakeFirstOrThrow()\n     *\n     * row.id\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * update \"person\" set \"first_name\" = $1, \"last_name\" = $2 where \"id\" = $3 returning \"id\"\n     * ```\n     *\n     * In addition to primitives, the values can also be `raw` expressions or\n     * select queries:\n     *\n     * ```ts\n     * const result = await db\n     *   .updateTable('person')\n     *   .set({\n     *     first_name: 'Jennifer',\n     *     last_name: db.raw('? || ?', ['Ani', 'ston']),\n     *     age: db.selectFrom('person').select(raw('avg(age)')),\n     *   })\n     *   .where('id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numUpdatedRows)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * update \"person\" set\n     * \"first_name\" = $1,\n     * \"last_name\" = $2 || $3,\n     * \"age\" = (select avg(age) from \"person\")\n     * where \"id\" = $4\n     * ```\n     */\n    set(row) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, parseUpdateObject(this.#props.parseContext, row)),\n        });\n    }\n    returning(selection) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectExpressionOrList(this.#props.parseContext, selection)),\n        });\n    }\n    returningAll() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    /**\n     * Simply calls the given function passing `this` as the only argument.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper funtion `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .call(log)\n     *   .execute()\n     * ```\n     */\n    call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function updatePerson(id: number, updates: UpdateablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new UpdateQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * You should only use this method as the last resort if the types\n     * don't support your use case.\n     */\n    castTo() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compildQuery = this.compile();\n        const query = compildQuery.query;\n        const result = await this.#props.executor.executeQuery(compildQuery, this.#props.queryId);\n        if (this.#props.parseContext.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        else {\n            return [new UpdateResult(result.numUpdatedOrDeletedRows)];\n        }\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            throw new errorConstructor(this.toOperationNode());\n        }\n        return result;\n    }\n}\npreventAwait(UpdateQueryBuilder, \"don't await UpdateQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n", "/// <reference types=\"./common-table-expression-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNode';\n    },\n    create(name, expression) {\n        return freeze({\n            kind: 'CommonTableExpressionNode',\n            name,\n            expression,\n        });\n    },\n});\n", "/// <reference types=\"./common-table-expression-name-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { TableNode } from './table-node.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNameNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNameNode';\n    },\n    create(tableName, columnNames) {\n        return freeze({\n            kind: 'CommonTableExpressionNameNode',\n            table: TableNode.create(tableName),\n            columns: columnNames\n                ? freeze(columnNames.map(ColumnNode.create))\n                : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./with-parser.d.ts\" />\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nimport { CommonTableExpressionNameNode } from '../operation-node/common-table-expression-name-node.js';\nexport function parseCommonTableExpression(ctx, name, expression) {\n    const builder = expression(ctx.createQueryCreator());\n    return CommonTableExpressionNode.create(parseCommonTableExpressionName(name), builder.toOperationNode());\n}\nfunction parseCommonTableExpressionName(name) {\n    if (name.includes('(')) {\n        const parts = name.split(/[\\(\\)]/);\n        const table = parts[0];\n        const columns = parts[1].split(',').map((it) => it.trim());\n        return CommonTableExpressionNameNode.create(table, columns);\n    }\n    else {\n        return CommonTableExpressionNameNode.create(name);\n    }\n}\n", "/// <reference types=\"./with-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WithNode = freeze({\n    is(node) {\n        return node.kind === 'WithNode';\n    },\n    create(expression, params) {\n        return freeze({\n            kind: 'WithNode',\n            expressions: freeze([expression]),\n            ...params,\n        });\n    },\n    cloneWithExpression(withNode, expression) {\n        return freeze({\n            ...withNode,\n            expressions: freeze([...withNode.expressions, expression]),\n        });\n    },\n});\n", "/// <reference types=\"./query-creator.d.ts\" />\nimport { SelectQueryBuilder } from './query-builder/select-query-builder.js';\nimport { InsertQueryBuilder } from './query-builder/insert-query-builder.js';\nimport { DeleteQueryBuilder } from './query-builder/delete-query-builder.js';\nimport { UpdateQueryBuilder } from './query-builder/update-query-builder.js';\nimport { DeleteQueryNode } from './operation-node/delete-query-node.js';\nimport { InsertQueryNode } from './operation-node/insert-query-node.js';\nimport { SelectQueryNode } from './operation-node/select-query-node.js';\nimport { UpdateQueryNode } from './operation-node/update-query-node.js';\nimport { parseTable, parseTableExpression, parseTableExpressionOrList, } from './parser/table-parser.js';\nimport { RawBuilder } from './raw-builder/raw-builder.js';\nimport { parseCommonTableExpression, } from './parser/with-parser.js';\nimport { WithNode } from './operation-node/with-node.js';\nimport { createQueryId } from './util/query-id.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { freeze } from './util/object-utils.js';\nexport class QueryCreator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    selectFrom(from) {\n        return new SelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            parseContext: this.#props.parseContext,\n            queryNode: SelectQueryNode.create(parseTableExpressionOrList(this.#props.parseContext, from), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates an insert query.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see\n     * the {@link ReturningInterface.returning | returning} method for a way to return columns\n     * on supported databases like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * Some databases like PostgreSQL support the `returning` method:\n     *\n     * ```ts\n     * const { id } = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .returning('id')\n     *   .executeTakeFirst()\n     * ```\n     */\n    insertInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            parseContext: this.#props.parseContext,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a delete query.\n     *\n     * See the {@link DeleteQueryBuilder.where} method for examples on how to specify\n     * a where clause for the delete operation.\n     *\n     * The return value of the query is an instance of {@link DeleteResult}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .deleteFrom('person')\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numDeletedRows)\n     * ```\n     */\n    deleteFrom(table) {\n        return new DeleteQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            parseContext: this.#props.parseContext,\n            queryNode: DeleteQueryNode.create(parseTableExpression(this.#props.parseContext, table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates an update query.\n     *\n     * See the {@link UpdateQueryBuilder.where} method for examples on how to specify\n     * a where clause for the update operation.\n     *\n     * See the {@link UpdateQueryBuilder.set} method for examples on how to\n     * specify the updates.\n     *\n     * The return value of the query is an {@link UpdateResult}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .updateTable('person')\n     *   .set({ first_name: 'Jennifer' })\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numUpdatedRows)\n     * ```\n     */\n    updateTable(table) {\n        return new UpdateQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            parseContext: this.#props.parseContext,\n            queryNode: UpdateQueryNode.create(parseTableExpression(this.#props.parseContext, table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a `with` query (Common Table Expression).\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     .select(['id', 'age'])\n     *   )\n     *   .with('adult_jennifers', (db) => db\n     *     .selectFrom('jennifers')\n     *     .where('age', '>', 18)\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('adult_jennifers')\n     *   .where('age', '<', 60)\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The CTE name can optionally specify column names in addition to\n     * a name. In that case Kysely requires the expression to retun\n     * rows with the same columns.\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers(id, age)', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     // This is ok since we return columns with the same\n     *     // names as specified by `jennifers(id, age)`.\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     */\n    with(name, expression) {\n        const cte = parseCommonTableExpression(this.#props.parseContext, name, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte),\n        });\n    }\n    /**\n     * Creates a recursive `with` query (Common Table Expression).\n     *\n     * See the {@link with} method for examples and more documentation.\n     */\n    withRecursive(name, expression) {\n        const cte = parseCommonTableExpression(this.#props.parseContext, name, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte, { recursive: true }),\n        });\n    }\n    /**\n     * Sets the schema to be used for all table references that don't explicitly\n     * specify a schema.\n     *\n     * This only affects the query created through the builder returned from\n     * this method and doesn't modify the `db` instance.\n     *\n     * ### Examples\n     *\n     * ```\n     * await db.withSchema('mammals')\n     *  .selectFrom('pet')\n     *  .selectAll()\n     *  .innerJoin('public.person', 'public.person.id', 'pet.owner_id')\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"mammals\".\"pet\"\n     * inner join \"public\".\"person\"\n     * on \"public\".\"person\".\"id\" = \"mammals\".\"pet\".\"owner_id\"\n     * ```\n     *\n     * `withSchema` is smart enough to not add schema for aliases,\n     * common table expressions or other places where the schema\n     * doesn't belong to:\n     *\n     * ```\n     * await db.withSchema('mammals')\n     *  .selectFrom('pet as p')\n     *  .select('p.name')\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"name\" from \"mammals\".\"pet\" as \"p\"\n     * ```\n     */\n    withSchema(schema) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    /**\n     * Provides a way to pass arbitrary SQL into your query and executing completely\n     * raw queries.\n     *\n     * You can use the strings `?` and `??` in the `sql` to bind parameters such as\n     * user input to the SQL. You should never EVER concatenate untrusted user\n     * input to the SQL string to avoid injection vulnerabilities. Instead use `?`\n     * in place of a value and pass the actual value in the `parameters` list. See\n     * the examples below.\n     *\n     * You should only use `raw` when there is no other way to get the job done. This is\n     * because Kysely is not able to use type inference when you use raw SQL. For example\n     * Kysely won't be able to automatically provide you with the correct query result\n     * type. However, there are ways to manually provide types when you use `raw` in most\n     * cases. See the examples below.\n     *\n     * Raw builder instances can be passed to pretty much anywhere: `select`, `where`,\n     * `*Join`, `groupBy`, `orderBy` etc. Just try it. If the method accepts it, it works.\n     *\n     * ### Examples\n     *\n     * Example of using `raw` in a select statement:\n     *\n     * ```ts\n     * const [person] = await db.selectFrom('person')\n     *   .select(db.raw<string>('concat(first_name, ' ', last_name)').as('name'))\n     *   .where('id', '=', 1)\n     *   .execute()\n     *\n     * console.log(person.name)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select concat(first_name, ' ', last_name) as \"name\"\n     * from \"person\" where \"id\" = 1\n     * ```\n     *\n     * The above example selects computed column `name` by concatenating the first name\n     * and last name together.\n     *\n     * There are couple of things worth noticing:\n     *\n     *   1. You need to provide the output type of your SQL segment for the `raw` method\n     *     so that Kysely knows what type to give for the `name` column. In this case it's\n     *     a `string` since that's the output type of the `concat` function in SQL.\n     *\n     *   2. You need to give an alias for the selection using the `as` method so that\n     *     Kysely is able to add a column to the output type. The alias needs to be\n     *     known at compile time! If you pass a string variable whose value is not known\n     *     at compile time, there is no way for Kysely or typescript to add a column to\n     *     the output type. In this case you need to use the `castTo` method on the query\n     *     to specify a return type for the query.\n     *\n     * We could've also used a `??` placeholder to provide `first_name` and `last_name` like\n     * this:\n     *\n     * ```ts\n     * db.raw<string>('concat(??, ' ', ??)', ['first_name', 'last_name'])\n     * ```\n     *\n     * or this:\n     *\n     * ```ts\n     * db.raw<string>('concat(??, ' ', ??)', ['person.first_name', 'person.last_name'])\n     * ```\n     *\n     * But it's often cleaner to just write the column names in the SQL. Again remember to\n     * never concatenate column names or any other untrusted user input to the SQL string or you\n     * are going to create an injection vulnerability. All user input should go to the parameters\n     * array, never to the SQL string directly. But if the column names or values are trusted\n     * and known at compile time, there is no reason to use parameters.\n     *\n     * Example of using `raw` in `where`:\n     *\n     * ```ts\n     * function getPersonsOlderThan(ageLimit: number) {\n     *   return await db.selectFrom('person')\n     *     .selectAll()\n     *     .where(\n     *       db.raw('now() - birth_date'),\n     *       '>',\n     *       db.raw('interval ? year', [ageLimit.toString()])\n     *     )\n     *     .execute()\n     * }\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"person\" where now() - birth_date > interval $1 year\n     * ```\n     *\n     * The function in the above example returns people that are older than the given number of\n     * years. The number of years in this example is an untrusted user input, and therefore we use\n     * a `?` placeholder for it.\n     *\n     * Example of creating a completely raw query from scratch:\n     *\n     * ```ts\n     * const result = await db.raw<Person>('select p.* from person p').execute()\n     * const persons = result.rows\n     * ```\n     *\n     * For a raw query, you need to specify the type of the returned __row__. In\n     * this case we know the resulting items will be of type `Person` se specify that.\n     * The result of `execute()` method is always an array. In this case the type of\n     * the `persons` variable is `Person[]`.\n     *\n     * @param sql - The raw SQL. Special strings `?` and `??` can be used as parameter\n     *    placeholders. `?` for values and `??` for identifiers such as column names\n     *    or `column.table` references.\n     *\n     * @param params - The parameters that will be bound to the `?` and `??` placeholders in\n     *    the sql string.\n     */\n    raw(sql, parameters) {\n        return new RawBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            sql,\n            parameters,\n        });\n    }\n}\n", "/// <reference types=\"./default-query-executor.d.ts\" />\nimport { QueryExecutor } from './query-executor.js';\nexport class DefaultQueryExecutor extends QueryExecutor {\n    #compiler;\n    #connectionProvider;\n    constructor(compiler, connectionProvider, plugins = []) {\n        super(plugins);\n        this.#compiler = compiler;\n        this.#connectionProvider = connectionProvider;\n    }\n    compileQuery(node) {\n        return this.#compiler.compileQuery(node);\n    }\n    async executeQueryImpl(compiledQuery) {\n        return this.#connectionProvider.withConnection((connection) => {\n            return connection.executeQuery(compiledQuery);\n        });\n    }\n    withPlugin(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#connectionProvider, [\n            ...this.plugins,\n            plugin,\n        ]);\n    }\n    withPluginAtFront(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#connectionProvider, [\n            plugin,\n            ...this.plugins,\n        ]);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new DefaultQueryExecutor(this.#compiler, connectionProvider, [\n            ...this.plugins,\n        ]);\n    }\n    withoutPlugins() {\n        return new DefaultQueryExecutor(this.#compiler, this.#connectionProvider, []);\n    }\n}\n", "/// <reference types=\"./performance-now.d.ts\" />\nimport { isFunction } from './object-utils.js';\nexport function performanceNow() {\n    if (typeof performance !== 'undefined' && isFunction(performance.now)) {\n        return performance.now();\n    }\n    else {\n        return Date.now();\n    }\n}\n", "/// <reference types=\"./runtime-driver.d.ts\" />\nimport { performanceNow } from '../util/performance-now.js';\n/**\n * A small wrapper around {@link Driver} that makes sure the driver is\n * initialized before it is used, only initialized and destroyed\n * once etc.\n */\nexport class RuntimeDriver {\n    #driver;\n    #log;\n    #initPromise;\n    #destroyPromise;\n    #connections = new WeakSet();\n    constructor(driver, log) {\n        this.#driver = driver;\n        this.#log = log;\n    }\n    async init() {\n        if (!this.#initPromise) {\n            this.#initPromise = this.#driver.init().catch((err) => {\n                this.#initPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#initPromise;\n    }\n    async acquireConnection() {\n        await this.init();\n        const connection = await this.#driver.acquireConnection();\n        if (!this.#connections.has(connection)) {\n            if (this.#needsLogging()) {\n                this.#addLogging(connection);\n            }\n            this.#connections.add(connection);\n        }\n        return connection;\n    }\n    async releaseConnection(connection) {\n        await this.#driver.releaseConnection(connection);\n    }\n    beginTransaction(connection, settings) {\n        return this.#driver.beginTransaction(connection, settings);\n    }\n    commitTransaction(connection) {\n        return this.#driver.commitTransaction(connection);\n    }\n    rollbackTransaction(connection) {\n        return this.#driver.rollbackTransaction(connection);\n    }\n    async destroy() {\n        if (!this.#initPromise) {\n            return;\n        }\n        await this.#initPromise;\n        if (!this.#destroyPromise) {\n            this.#destroyPromise = this.#driver.destroy().catch((err) => {\n                this.#destroyPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#destroyPromise;\n    }\n    #needsLogging() {\n        return (this.#log.isLevelEnabled('query') || this.#log.isLevelEnabled('error'));\n    }\n    // This method monkey patches the database connection's executeQuery method\n    // by adding logging code around it. Monkey patching is not pretty, but it's\n    // the best option in this case.\n    #addLogging(connection) {\n        const executeQuery = connection.executeQuery;\n        connection.executeQuery = async (compiledQuery) => {\n            const startTime = performanceNow();\n            try {\n                return await executeQuery.call(connection, compiledQuery);\n            }\n            catch (error) {\n                this.#logError(error);\n                throw error;\n            }\n            finally {\n                this.#logQuery(compiledQuery, startTime);\n            }\n        };\n    }\n    #logError(error) {\n        this.#log.error(() => ({\n            level: 'error',\n            error,\n        }));\n    }\n    #logQuery(compiledQuery, startTime) {\n        this.#log.query(() => ({\n            level: 'query',\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    #calculateDurationMillis(startTime) {\n        return performanceNow() - startTime;\n    }\n}\n", "/// <reference types=\"./single-connection-provider.d.ts\" />\nexport class SingleConnectionProvider {\n    #connection;\n    #runningPromise;\n    constructor(connection) {\n        this.#connection = connection;\n    }\n    async withConnection(runner) {\n        while (this.#runningPromise) {\n            await this.#runningPromise;\n        }\n        const promise = this.#run(runner);\n        this.#runningPromise = promise\n            .then(() => {\n            this.#runningPromise = undefined;\n        })\n            .catch(() => {\n            this.#runningPromise = undefined;\n        });\n        return promise;\n    }\n    // Run the runner in an async function to make sure it doesn't\n    // throw synchronous errors.\n    async #run(runner) {\n        return await runner(this.#connection);\n    }\n}\n", "/// <reference types=\"./driver.d.ts\" />\nexport const TRANSACTION_ISOLATION_LEVELS = [\n    'read uncommitted',\n    'read committed',\n    'repeatable read',\n    'serializable',\n];\n", "/// <reference types=\"./join-builder.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { parseExistFilter, parseNotExistFilter, parseOnFilter, parseReferenceFilter, } from '../parser/filter-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class JoinBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    on(...args) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseOnFilter(this.#props.parseContext, args)),\n        });\n    }\n    orOn(...args) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOrOn(this.#props.joinNode, parseOnFilter(this.#props.parseContext, args)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereRef} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereRef} for documentation and examples.\n     */\n    onRef(lhs, op, rhs) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.orWhereRef} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.orWhereRef} for documentation and examples.\n     */\n    orOnRef(lhs, op, rhs) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOrOn(this.#props.joinNode, parseReferenceFilter(this.#props.parseContext, lhs, op, rhs)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereExists} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereExists} for documentation and examples.\n     */\n    onExists(arg) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereNotExists} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereNotExists} for documentation and examples.\n     */\n    onNotExists(arg) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.orWhereExists} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.orWhereExists} for documentation and examples.\n     */\n    orOnExists(arg) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOrOn(this.#props.joinNode, parseExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.orWhereNotExists} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.orWhereNotExists} for documentation and examples.\n     */\n    orOnNotExists(arg) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOrOn(this.#props.joinNode, parseNotExistFilter(this.#props.parseContext, arg)),\n        });\n    }\n    toOperationNode() {\n        return this.#props.joinNode;\n    }\n}\npreventAwait(JoinBuilder, \"don't await JoinBuilder instances. They are never executed directly and are always just a part of a query.\");\n", "/// <reference types=\"./function-builder.d.ts\" />\nimport { RawBuilder } from '../raw-builder/raw-builder.js';\nimport { freeze } from '../util/object-utils.js';\nimport { createQueryId } from '../util/query-id.js';\n/**\n * Helpers for type safe SQL function calls.\n *\n * You can always use {@link Kysely.raw} to call functions and build arbitrary\n * expressions. This module simply has shortcuts for most common function calls.\n *\n * ### Examples\n *\n * ```ts\n * const { count } = db.fn\n *\n * await db.selectFrom('person')\n *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n *   .select([\n *     'person.id',\n *     count('pet.id').as('pet_count')\n *   ])\n *   .groupBy('person.id')\n *   .having(count('pet.id'), '>', 10)\n *   .execute()\n * ```\n *\n * The generated SQL (PostgreSQL):\n *\n * ```sql\n * select \"person\".\"id\", count(\"pet\".\"id\") as \"pet_count\"\n * from \"person\"\n * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n * group by \"person\".\"id\"\n * having count(\"pet\".\"id\") > $1\n * ```\n */\nexport class FunctionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n        this.min = this.min.bind(this);\n        this.max = this.max.bind(this);\n        this.avg = this.avg.bind(this);\n        this.sum = this.sum.bind(this);\n        this.count = this.count.bind(this);\n    }\n    /**\n     * Calls the `max` function for the column given as the argument.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const { max } = db.fn\n     *\n     * db.selectFrom('toy')\n     *   .select(max('price').as('max_price'))\n     *   .execute()\n     * ```\n     */\n    max(column) {\n        return this.#oneArgFunction('max', column);\n    }\n    /**\n     * Calls the `min` function for the column given as the argument.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const { min } = db.fn\n     *\n     * db.selectFrom('toy')\n     *   .select(min('price').as('min_price'))\n     *   .execute()\n     * ```\n     *\n     */\n    min(column) {\n        return this.#oneArgFunction('min', column);\n    }\n    /**\n     * Calls the `avg` function for the column given as the argument.\n     *\n     * If this is used in a `select` statement the type of the selected expression\n     * will be `number | string` by default. This is because Kysely can't know the\n     * type the db driver outputs. Sometimes the output can be larger than the\n     * largest javascript number and a string is returned instead. Most drivers\n     * allow you to configure the output type of large numbers and Kysely can't\n     * know if you've done so.\n     *\n     * You can specify the output type of the expression by providing\n     * the type as the first type argument:\n     *\n     * ```ts\n     * const { avg } = db.fn\n     *\n     * db.selectFrom('toy')\n     *   .select(avg<number>('price').as('avg_price'))\n     *   .execute()\n     * ```\n     */\n    avg(column) {\n        return this.#oneArgFunction('avg', column);\n    }\n    /**\n     * Calls the `sum` function for the column given as the argument.\n     *\n     * If this is used in a `select` statement the type of the selected expression\n     * will be `number | string | bigint` by default. This is because Kysely can't\n     * know the type the db driver outputs. Sometimes the output can be larger than\n     * the largest javascript number and a string is returned instead. Most drivers\n     * allow you to configure the output type of large numbers and Kysely can't\n     * know if you've done so.\n     *\n     * You can specify the output type of the expression by providing\n     * the type as the first type argument:\n     *\n     * ```ts\n     * const { sum } = db.fn\n     *\n     * db.selectFrom('toy')\n     *   .select(sum<number>('price').as('total_price'))\n     *   .execute()\n     * ```\n     */\n    sum(column) {\n        return this.#oneArgFunction('sum', column);\n    }\n    /**\n     * Calls the `count` function for the column given as the argument.\n     *\n     * If this is used in a `select` statement the type of the selected expression\n     * will be `number | string |bigint` by default. This is because Kysely can't\n     * know the type the db driver outputs. Sometimes the output can be larger than\n     * the largest javascript number and a string is returned instead. Most drivers\n     * allow you to configure the output type of large numbers and Kysely can't\n     * know if you've done so.\n     *\n     * You can specify the output type of the expression by providing\n     * the type as the first type argument:\n     *\n     * ```ts\n     * const { count } = db.fn\n     *\n     * db.selectFrom('toy')\n     *   .select(count<number>('id').as('num_toys'))\n     *   .execute()\n     * ```\n     */\n    count(column) {\n        return this.#oneArgFunction('count', column);\n    }\n    #oneArgFunction(fn, column) {\n        return new RawBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            sql: `${fn}(??)`,\n            parameters: [column],\n        });\n    }\n}\n", "/// <reference types=\"./expression-builder.d.ts\" />\nimport { SelectQueryBuilder } from './select-query-builder.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { freeze } from '../util/object-utils.js';\nimport { FunctionBuilder } from './function-builder.js';\nimport { RawBuilder } from '../raw-builder/raw-builder.js';\nexport class ExpressionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns a {@link FunctionBuilder} that can be used to write type safe function\n     * calls.\n     *\n     * The difference between this and {@link Kysely.fn} is that this one is more\n     * type safe. You can only refer to columns visible to the part of the query\n     * you are building. {@link Kysely.fn} allows you to refer to columns in any\n     * table of the database even if it doesn't produce valid SQL.\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select([\n     *     'person.id',\n     *     (qb) => qb.fn.count('pet.id').as('pet_count')\n     *   ])\n     *   .groupBy('person.id')\n     *   .having(count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"id\", count(\"pet\".\"id\") as \"pet_count\"\n     * from \"person\"\n     * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * group by \"person\".\"id\"\n     * having count(\"pet\".\"id\") > $1\n     * ```\n     */\n    get fn() {\n        return new FunctionBuilder({ executor: this.#props.executor });\n    }\n    selectFrom(table) {\n        return new SelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            parseContext: this.#props.parseContext,\n            queryNode: SelectQueryNode.create(parseTableExpressionOrList(this.#props.parseContext, table)),\n        });\n    }\n    /**\n     * See {@link QueryCreator.withSchema}\n     */\n    withSchema(schema) {\n        return new ExpressionBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    /**\n     * See {@link QueryCreator.raw}.\n     */\n    raw(sql, parameters) {\n        return new RawBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            sql,\n            parameters,\n        });\n    }\n    /**\n     * This can be used to reference columns.\n     *\n     * ### Examples\n     *\n     * In the next example we use the `ref` method to reference\n     * columns of the virtual table `excluded` in a type-safe way\n     * to create an upsert operation:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict(oc => oc\n     *     .column('id')\n     *     .doUpdateSet({\n     *       first_name: (eb) => eb.ref('excluded.first_name'),\n     *       last_name: (eb) => eb.ref('excluded.last_name')\n     *     })\n     *   )\n     * ```\n     *\n     * In the next example we use `ref` in a raw expression. Unless you\n     * want to be as type-safe as possible, this is probably overkill:\n     *\n     * ```ts\n     * db.update('pet').set({\n     *   name: (eb) => eb.raw('concat(?, ?)', [\n     *     eb.ref('pet.name'),\n     *     suffix,\n     *   ])\n     * })\n     * ```\n     */\n    ref(reference) {\n        return this.raw('??', [reference]);\n    }\n}\n", "/// <reference types=\"./parse-context.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { JoinBuilder } from '../query-builder/join-builder.js';\nimport { SelectQueryBuilder } from '../query-builder/select-query-builder.js';\nimport { ExpressionBuilder } from '../query-builder/expression-builder.js';\nimport { QueryCreator } from '../query-creator.js';\nimport { NoopQueryExecutor } from '../query-executor/noop-query-executor.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { parseTableExpression, parseTableExpressionOrList, } from './table-parser.js';\nexport class DefaultParseContext {\n    #adapter;\n    #noopExecutor;\n    constructor(adapter) {\n        this.#adapter = adapter;\n        this.#noopExecutor = new NoopQueryExecutor();\n    }\n    get adapter() {\n        return this.#adapter;\n    }\n    createSelectQueryBuilder() {\n        return new SelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#noopExecutor,\n            parseContext: this,\n            queryNode: SelectQueryNode.create(parseTableExpressionOrList(this, [])),\n        });\n    }\n    createExpressionBuilder() {\n        return new ExpressionBuilder({\n            executor: this.#noopExecutor,\n            parseContext: this,\n        });\n    }\n    createQueryCreator() {\n        return new QueryCreator({\n            executor: this.#noopExecutor,\n            parseContext: this,\n        });\n    }\n    createJoinBuilder(joinType, table) {\n        return new JoinBuilder({\n            joinNode: JoinNode.create(joinType, parseTableExpression(this, table)),\n            parseContext: this,\n        });\n    }\n}\n", "/// <reference types=\"./log.d.ts\" />\nimport { freeze, isFunction } from './object-utils.js';\nexport const LOG_LEVELS = freeze(['query', 'error']);\nexport class Log {\n    #levels;\n    #logger;\n    constructor(config) {\n        if (isFunction(config)) {\n            this.#logger = config;\n            this.#levels = freeze({\n                query: true,\n                error: true,\n            });\n        }\n        else {\n            this.#logger = defaultLogger;\n            this.#levels = freeze({\n                query: config.includes('query'),\n                error: config.includes('error'),\n            });\n        }\n    }\n    isLevelEnabled(level) {\n        return this.#levels[level];\n    }\n    query(getEvent) {\n        if (this.#levels.query) {\n            this.#logger(getEvent());\n        }\n    }\n    error(getEvent) {\n        if (this.#levels.error) {\n            this.#logger(getEvent());\n        }\n    }\n}\nfunction defaultLogger(event) {\n    if (event.level === 'query') {\n        console.log(`kysely:query: ${event.query.sql}`);\n        console.log(`kysely:query: duration: ${event.queryDurationMillis.toFixed(1)}ms`);\n    }\n    else if (event.level === 'error') {\n        if (event.error instanceof Error) {\n            console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);\n        }\n        else {\n            console.error(`kysely:error: ${event}`);\n        }\n    }\n}\n", "/// <reference types=\"./private-symbols.d.ts\" />\n/**\n * @internal\n * @private\n */\nexport const PRIVATE_ADAPTER = Symbol();\n", "/// <reference types=\"./kysely.d.ts\" />\nimport { SchemaModule } from './schema/schema.js';\nimport { DynamicModule } from './dynamic/dynamic.js';\nimport { DefaultConnectionProvider } from './driver/default-connection-provider.js';\nimport { QueryCreator } from './query-creator.js';\nimport { DefaultQueryExecutor } from './query-executor/default-query-executor.js';\nimport { freeze, isObject } from './util/object-utils.js';\nimport { RuntimeDriver } from './driver/runtime-driver.js';\nimport { SingleConnectionProvider } from './driver/single-connection-provider.js';\nimport { TRANSACTION_ISOLATION_LEVELS, } from './driver/driver.js';\nimport { preventAwait } from './util/prevent-await.js';\nimport { DefaultParseContext } from './parser/parse-context.js';\nimport { FunctionBuilder } from './query-builder/function-builder.js';\nimport { Log } from './util/log.js';\nimport { PRIVATE_ADAPTER } from './util/private-symbols.js';\n/**\n * The main Kysely class.\n *\n * You should create one instance of `Kysely` per database using the {@link Kysely}\n * constructor. Each `Kysely` instance maintains it's own connection pool.\n *\n * ### Examples\n *\n * This example assumes your database has tables `person` and `pet`:\n *\n * ```ts\n * import {\u00A0Kysely, Generated, PostgresDialect } from 'kysely'\n *\n * interface PersonTable {\n *   id: Generated<number>\n *   first_name: string\n *   last_name: string\n * }\n *\n * interface PetTable {\n *   id: Generated<number>\n *   owner_id: number\n *   name: string\n *   species 'cat' | 'dog'\n * }\n *\n * interface Database {\n *   person: PersonTable,\n *   pet: PetTable\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new PostgresDialect({\n *     host: 'localhost',\n *     database: 'kysely_test',\n *   })\n * })\n * ```\n *\n * @typeParam DB - The database interface type. Keys of this type must be table names\n *    in the database and values must be interfaces that describe the rows in those\n *    tables. See the examples above.\n */\nexport class Kysely extends QueryCreator {\n    #props;\n    constructor(args) {\n        let superProps;\n        let props;\n        if (isKyselyProps(args)) {\n            superProps = { executor: args.executor, parseContext: args.parseContext };\n            props = { ...args };\n        }\n        else {\n            const dialect = args.dialect;\n            const driver = dialect.createDriver();\n            const compiler = dialect.createQueryCompiler();\n            const adapter = dialect.createAdapter();\n            const log = new Log(args.log ?? []);\n            const parseContext = new DefaultParseContext(adapter);\n            const runtimeDriver = new RuntimeDriver(driver, log);\n            const connectionProvider = new DefaultConnectionProvider(runtimeDriver);\n            const executor = new DefaultQueryExecutor(compiler, connectionProvider, args.plugins ?? []);\n            superProps = { executor, parseContext };\n            props = {\n                config: args,\n                executor,\n                dialect,\n                driver: runtimeDriver,\n                parseContext,\n            };\n        }\n        super(superProps);\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns the {@link SchemaModule} module for building database schema.\n     */\n    get schema() {\n        return new SchemaModule(this.#props.executor);\n    }\n    /**\n     * Returns a the {@link DynamicModule} module.\n     *\n     * The {@link DynamicModule} module can be used to bypass strict typing and\n     * passing in dynamic values for the queries.\n     */\n    get dynamic() {\n        return new DynamicModule();\n    }\n    /**\n     * Returns a {@link DatabaseIntrospector | database introspector}.\n     */\n    get introspection() {\n        return this.#props.dialect.createIntrospector(this.withoutPlugins());\n    }\n    /**\n     * Returns a {@link FunctionBuilder} that can be used to write type safe function\n     * calls.\n     *\n     * ```ts\n     * const { count } = db.fn\n     *\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select([\n     *     'person.id',\n     *     count('pet.id').as('pet_count')\n     *   ])\n     *   .groupBy('person.id')\n     *   .having(count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"id\", count(\"pet\".\"id\") as \"pet_count\"\n     * from \"person\"\n     * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * group by \"person\".\"id\"\n     * having count(\"pet\".\"id\") > $1\n     * ```\n     */\n    get fn() {\n        return new FunctionBuilder({ executor: this.#props.executor });\n    }\n    /**\n     * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.\n     *\n     * The returned {@link TransactionBuilder} can be used to configure the transaction. The\n     * {@link TransactionBuilder.execute} method can then be called to run the transaction.\n     * {@link TransactionBuilder.execute} takes a function that is run inside the\n     * transaction. If the function throws, the transaction is rolled back. Otherwise\n     * the transaction is committed.\n     *\n     * The callback function passed to the {@link TransactionBuilder.execute | execute}\n     * method gets the transaction object as its only argument. The transaction is\n     * of type {@link Transaction} which inherits {@link Kysely}. Any query\n     * started through the transaction object is executed inside the transaction.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const catto = await db.transaction().execute(async (trx) => {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   await someFunction(trx, jennifer)\n     *\n     *   return await trx.insertInto('pet')\n     *     .values({\n     *       user_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat'\n     *     })\n     *     .returning('*')\n     *     .executeTakeFirst()\n     * })\n     * ```\n     *\n     * Setting the isolation level:\n     *\n     * ```ts\n     * await db\n     *   .transaction()\n     *   .setIsolationLevel('serializable')\n     *   .execute(async (trx) => {\n     *     await doStuff(trx)\n     *   })\n     * ```\n     */\n    transaction() {\n        return new TransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Provides a kysely instance bound to a single database connection.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .connection()\n     *   .execute(async (db) => {\n     *     // `db` is an instance of `Kysely` that's bound to a single\n     *     // database connection. All queries executed through `db` use\n     *     // the same connection.\n     *     await doStuff(db)\n     *   })\n     * ```\n     */\n    connection() {\n        return new ConnectionBuilder({ ...this.#props });\n    }\n    /**\n     * Returns a copy of this Kysely instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance without any plugins.\n     */\n    withoutPlugins() {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance with tables added to its\n     * database type.\n     *\n     * This method only modifies the types and doesn't affect any of the\n     * executed queries in any way.\n     *\n     * ### Examples\n     *\n     * The following example adds and uses a temporary table:\n     *\n     * @example\n     * ```ts\n     * await db.schema\n     *   .createTable('temp_table')\n     *   .temporary()\n     *   .addColumn('some_column', 'integer')\n     *   .execute()\n     *\n     * const tempDb = db.withTables<{\n     *   temp_table: {\n     *     some_column: number\n     *   }\n     * }>()\n     *\n     * await tempDb\n     *   .insertInto('temp_table')\n     *   .values({ some_column: 100 })\n     *   .execute()\n     * ```\n     */\n    withTables() {\n        return new Kysely({ ...this.#props });\n    }\n    /**\n     * Releases all resources and disconnects from the database.\n     *\n     * You need to call this when you are done using the `Kysely` instance.\n     */\n    async destroy() {\n        await this.#props.driver.destroy();\n    }\n    /**\n     * Returns true if this `Kysely` instance is a transaction.\n     *\n     * You can also use `db instanceof Transaction`.\n     */\n    get isTransaction() {\n        return false;\n    }\n    /**\n     * @internal\n     * @private\n     */\n    get [PRIVATE_ADAPTER]() {\n        return this.#props.parseContext.adapter;\n    }\n}\nexport class Transaction extends Kysely {\n    #props;\n    constructor(props) {\n        super(props);\n        this.#props = props;\n    }\n    // The return type is `true` instead of `boolean` to make Kysely<DB>\n    // unassignable to Transaction<DB> while allowing assignment the\n    // other way around.\n    get isTransaction() {\n        return true;\n    }\n    transaction() {\n        throw new Error('calling the transaction method for a Transaction is not supported');\n    }\n    connection() {\n        throw new Error('calling the connection method for a Transaction is not supported');\n    }\n    async destroy() {\n        throw new Error('calling the destroy method for a Transaction is not supported');\n    }\n    withPlugin(plugin) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    withTables() {\n        return new Transaction({ ...this.#props });\n    }\n}\nexport function isKyselyProps(obj) {\n    return (isObject(obj) &&\n        isObject(obj.config) &&\n        isObject(obj.driver) &&\n        isObject(obj.executor) &&\n        isObject(obj.dialect) &&\n        isObject(obj.parseContext));\n}\nexport class ConnectionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    async execute(callback) {\n        const connection = await this.#props.driver.acquireConnection();\n        const connectionProvider = new SingleConnectionProvider(connection);\n        const transaction = new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withConnectionProvider(connectionProvider),\n        });\n        try {\n            return await callback(transaction);\n        }\n        finally {\n            await this.#props.driver.releaseConnection(connection);\n        }\n    }\n}\npreventAwait(ConnectionBuilder, \"don't await ConnectionBuilder instances directly. To execute the query you need to call the `execute` method\");\nexport class TransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setIsolationLevel(isolationLevel) {\n        return new TransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute(callback) {\n        const { isolationLevel, ...kyselyProps } = this.#props;\n        const settings = { isolationLevel };\n        validateTransactionSettings(settings);\n        const connection = await this.#props.driver.acquireConnection();\n        const connectionProvider = new SingleConnectionProvider(connection);\n        const transaction = new Transaction({\n            ...kyselyProps,\n            executor: this.#props.executor.withConnectionProvider(connectionProvider),\n        });\n        try {\n            await this.#props.driver.beginTransaction(connection, settings);\n            const result = await callback(transaction);\n            await this.#props.driver.commitTransaction(connection);\n            return result;\n        }\n        catch (error) {\n            await this.#props.driver.rollbackTransaction(connection);\n            throw error;\n        }\n        finally {\n            await this.#props.driver.releaseConnection(connection);\n        }\n    }\n}\npreventAwait(TransactionBuilder, \"don't await TransactionBuilder instances directly. To execute the transaction you need to call the `execute` method\");\nfunction validateTransactionSettings(settings) {\n    if (settings.isolationLevel &&\n        !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {\n        throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);\n    }\n}\n", "/// <reference types=\"./operation-node-visitor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport class OperationNodeVisitor {\n    nodeStack = [];\n    get parentNode() {\n        return this.nodeStack[this.nodeStack.length - 2];\n    }\n    #visitors = freeze({\n        AliasNode: this.visitAlias.bind(this),\n        ColumnNode: this.visitColumn.bind(this),\n        IdentifierNode: this.visitIdentifier.bind(this),\n        RawNode: this.visitRaw.bind(this),\n        ReferenceNode: this.visitReference.bind(this),\n        SelectQueryNode: this.visitSelectQuery.bind(this),\n        SelectionNode: this.visitSelection.bind(this),\n        TableNode: this.visitTable.bind(this),\n        FromNode: this.visitFrom.bind(this),\n        SelectAllNode: this.visitSelectAll.bind(this),\n        FilterNode: this.visitFilter.bind(this),\n        AndNode: this.visitAnd.bind(this),\n        OrNode: this.visitOr.bind(this),\n        ValueNode: this.visitValue.bind(this),\n        ValueListNode: this.visitValueList.bind(this),\n        PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),\n        ParensNode: this.visitParens.bind(this),\n        JoinNode: this.visitJoin.bind(this),\n        OperatorNode: this.visitOperator.bind(this),\n        WhereNode: this.visitWhere.bind(this),\n        InsertQueryNode: this.visitInsertQuery.bind(this),\n        DeleteQueryNode: this.visitDeleteQuery.bind(this),\n        ReturningNode: this.visitReturning.bind(this),\n        CreateTableNode: this.visitCreateTable.bind(this),\n        AddColumnNode: this.visitAddColumn.bind(this),\n        ColumnDefinitionNode: this.visitColumnDefinition.bind(this),\n        DropTableNode: this.visitDropTable.bind(this),\n        DataTypeNode: this.visitDataType.bind(this),\n        OrderByNode: this.visitOrderBy.bind(this),\n        OrderByItemNode: this.visitOrderByItem.bind(this),\n        GroupByNode: this.visitGroupBy.bind(this),\n        GroupByItemNode: this.visitGroupByItem.bind(this),\n        UpdateQueryNode: this.visitUpdateQuery.bind(this),\n        ColumnUpdateNode: this.visitColumnUpdate.bind(this),\n        LimitNode: this.visitLimit.bind(this),\n        OffsetNode: this.visitOffset.bind(this),\n        OnConflictNode: this.visitOnConflict.bind(this),\n        OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),\n        CreateIndexNode: this.visitCreateIndex.bind(this),\n        DropIndexNode: this.visitDropIndex.bind(this),\n        ListNode: this.visitList.bind(this),\n        PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.visitUniqueConstraint.bind(this),\n        ReferencesNode: this.visitReferences.bind(this),\n        CheckConstraintNode: this.visitCheckConstraint.bind(this),\n        WithNode: this.visitWith.bind(this),\n        CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),\n        HavingNode: this.visitHaving.bind(this),\n        CreateSchemaNode: this.visitCreateSchema.bind(this),\n        DropSchemaNode: this.visitDropSchema.bind(this),\n        AlterTableNode: this.visitAlterTable.bind(this),\n        DropColumnNode: this.visitDropColumn.bind(this),\n        RenameColumnNode: this.visitRenameColumn.bind(this),\n        AlterColumnNode: this.visitAlterColumn.bind(this),\n        ModifyColumnNode: this.visitModifyColumn.bind(this),\n        AddConstraintNode: this.visitAddConstraint.bind(this),\n        DropConstraintNode: this.visitDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),\n        UnionNode: this.visitUnion.bind(this),\n        CreateViewNode: this.visitCreateView.bind(this),\n        DropViewNode: this.visitDropView.bind(this),\n        GeneratedNode: this.visitGenerated.bind(this),\n        DefaultValueNode: this.visitDefaultValue.bind(this),\n        OnNode: this.visitOn.bind(this),\n        ValuesNode: this.visitValues.bind(this),\n    });\n    visitNode = (node) => {\n        this.nodeStack.push(node);\n        this.#visitors[node.kind](node);\n        this.nodeStack.pop();\n    };\n}\n", "/// <reference types=\"./default-query-compiler.d.ts\" />\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { OperationNodeVisitor } from '../operation-node/operation-node-visitor.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { getLast, freeze, isString, isNumber, isBoolean, isNull, isDate, isBigInt, } from '../util/object-utils.js';\nimport { UnionNode } from '../operation-node/union-node.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nexport class DefaultQueryCompiler extends OperationNodeVisitor {\n    #sql = '';\n    #parameters = [];\n    get numParameters() {\n        return this.#parameters.length;\n    }\n    compileQuery(node) {\n        this.#sql = '';\n        this.#parameters = [];\n        this.visitNode(node);\n        return freeze({\n            query: node,\n            sql: this.getSql(),\n            parameters: [...this.#parameters],\n        });\n    }\n    getSql() {\n        return this.#sql;\n    }\n    visitSelectQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !CreateViewNode.is(this.parentNode) &&\n            !UnionNode.is(this.parentNode) &&\n            !InsertQueryNode.is(this.parentNode);\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('select ');\n        if (node.distinctOnSelections) {\n            this.compileDistinctOn(node.distinctOnSelections);\n            this.append(' ');\n        }\n        if (node.distinct) {\n            this.append('distinct');\n            this.append(' ');\n        }\n        if (node.selections) {\n            this.compileList(node.selections);\n            this.append(' ');\n        }\n        this.visitNode(node.from);\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.groupBy) {\n            this.append(' ');\n            this.visitNode(node.groupBy);\n        }\n        if (node.having) {\n            this.append(' ');\n            this.visitNode(node.having);\n        }\n        if (node.union) {\n            this.append(' ');\n            this.compileList(node.union, ' ');\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.offset) {\n            this.append(' ');\n            this.visitNode(node.offset);\n        }\n        if (node.modifiers) {\n            node.modifiers.forEach((modifier) => {\n                this.append(' ');\n                this.append(SELECT_MODIFIER_SQL[modifier]);\n            });\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n    }\n    visitFrom(node) {\n        this.append('from ');\n        this.compileList(node.froms);\n    }\n    visitSelection(node) {\n        this.visitNode(node.selection);\n    }\n    visitColumn(node) {\n        this.visitNode(node.column);\n    }\n    compileDistinctOn(selections) {\n        this.append('distinct on (');\n        this.compileList(selections);\n        this.append(')');\n    }\n    compileList(nodes, separator = ', ') {\n        const lastNode = getLast(nodes);\n        for (const node of nodes) {\n            this.visitNode(node);\n            if (node !== lastNode) {\n                this.append(separator);\n            }\n        }\n    }\n    visitWhere(node) {\n        this.append('where ');\n        this.visitNode(node.where);\n    }\n    visitHaving(node) {\n        this.append('having ');\n        this.visitNode(node.having);\n    }\n    visitInsertQuery(node) {\n        const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('insert');\n        if (node.ignore) {\n            this.append(' ignore');\n        }\n        this.append(' into ');\n        this.visitNode(node.into);\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.values) {\n            this.append(' ');\n            this.visitNode(node.values);\n        }\n        if (node.onConflict) {\n            this.append(' ');\n            this.visitNode(node.onConflict);\n        }\n        if (node.onDuplicateKey) {\n            this.append(' ');\n            this.visitNode(node.onDuplicateKey);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n    }\n    visitValues(node) {\n        this.append('values ');\n        this.compileList(node.values);\n    }\n    visitDeleteQuery(node) {\n        const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('delete ');\n        this.visitNode(node.from);\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n    }\n    visitReturning(node) {\n        this.append('returning ');\n        this.compileList(node.selections);\n    }\n    visitAlias(node) {\n        this.visitNode(node.node);\n        this.append(' as ');\n        this.visitNode(node.alias);\n    }\n    visitReference(node) {\n        this.visitNode(node.table);\n        this.append('.');\n        this.visitNode(node.column);\n    }\n    visitSelectAll(_) {\n        this.append('*');\n    }\n    visitIdentifier(node) {\n        this.append(this.getLeftIdentifierWrapper());\n        this.compileUnwrappedIdentifier(node);\n        this.append(this.getRightIdentifierWrapper());\n    }\n    compileUnwrappedIdentifier(node) {\n        this.append(node.identifier);\n    }\n    visitFilter(node) {\n        if (node.left) {\n            this.visitNode(node.left);\n            this.append(' ');\n        }\n        this.visitNode(node.op);\n        this.append(' ');\n        this.visitNode(node.right);\n    }\n    visitAnd(node) {\n        this.visitNode(node.left);\n        this.append(' and ');\n        this.visitNode(node.right);\n    }\n    visitOr(node) {\n        this.visitNode(node.left);\n        this.append(' or ');\n        this.visitNode(node.right);\n    }\n    visitValue(node) {\n        if (node.immediate) {\n            this.appendImmediateValue(node.value);\n        }\n        else {\n            this.appendValue(node.value);\n        }\n    }\n    visitValueList(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitPrimitiveValueList(node) {\n        this.append('(');\n        const { values } = node;\n        for (let i = 0; i < values.length; ++i) {\n            this.appendValue(values[i]);\n            if (i !== values.length - 1) {\n                this.append(', ');\n            }\n        }\n        this.append(')');\n    }\n    visitParens(node) {\n        this.append('(');\n        this.visitNode(node.node);\n        this.append(')');\n    }\n    visitJoin(node) {\n        this.append(JOIN_TYPE_SQL[node.joinType]);\n        this.append(' ');\n        this.visitNode(node.table);\n        if (node.on) {\n            this.append(' ');\n            this.visitNode(node.on);\n        }\n    }\n    visitOn(node) {\n        this.append('on ');\n        this.visitNode(node.on);\n    }\n    visitRaw(node) {\n        node.sqlFragments.forEach((sql, i) => {\n            this.append(sql);\n            if (node.params.length > i) {\n                this.visitNode(node.params[i]);\n            }\n        });\n    }\n    visitOperator(node) {\n        this.append(node.operator);\n    }\n    visitTable(node) {\n        if (node.schema) {\n            this.visitNode(node.schema);\n            this.append('.');\n        }\n        this.visitNode(node.table);\n    }\n    visitCreateTable(node) {\n        this.append('create ');\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('table ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList([...node.columns, ...(node.constraints ?? [])]);\n        this.append(')');\n        if (node.onCommit) {\n            this.append(' on commit ');\n            this.append(node.onCommit);\n        }\n    }\n    visitColumnDefinition(node) {\n        this.visitNode(node.column);\n        this.append(' ');\n        this.visitNode(node.dataType);\n        if (node.unsigned) {\n            this.append(' unsigned');\n        }\n        if (node.generated) {\n            this.append(' ');\n            this.visitNode(node.generated);\n        }\n        if (node.defaultTo) {\n            this.append(' ');\n            this.visitNode(node.defaultTo);\n        }\n        if (node.notNull) {\n            this.append(' not null');\n        }\n        if (node.unique) {\n            this.append(' unique');\n        }\n        if (node.primaryKey) {\n            this.append(' primary key');\n        }\n        if (node.autoIncrement) {\n            this.append(' ');\n            this.append(this.getAutoIncrement());\n        }\n        if (node.references) {\n            this.append(' ');\n            this.visitNode(node.references);\n        }\n        if (node.check) {\n            this.append(' ');\n            this.visitNode(node.check);\n        }\n    }\n    getAutoIncrement() {\n        return 'auto_increment';\n    }\n    visitReferences(node) {\n        this.append('references ');\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitDropTable(node) {\n        this.append('drop table ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.table);\n    }\n    visitDataType(node) {\n        this.append(node.dataType);\n    }\n    visitOrderBy(node) {\n        this.append('order by ');\n        this.compileList(node.items);\n    }\n    visitOrderByItem(node) {\n        this.visitNode(node.orderBy);\n        if (node.direction) {\n            this.append(' ');\n            this.visitNode(node.direction);\n        }\n    }\n    visitGroupBy(node) {\n        this.append('group by ');\n        this.compileList(node.items);\n    }\n    visitGroupByItem(node) {\n        this.visitNode(node.groupBy);\n    }\n    visitUpdateQuery(node) {\n        const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('update ');\n        this.visitNode(node.table);\n        this.append(' set ');\n        if (node.updates) {\n            this.compileList(node.updates);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n    }\n    visitColumnUpdate(node) {\n        this.visitNode(node.column);\n        this.append(' = ');\n        this.visitNode(node.value);\n    }\n    visitLimit(node) {\n        this.append('limit ');\n        this.visitNode(node.limit);\n    }\n    visitOffset(node) {\n        this.append('offset ');\n        this.visitNode(node.offset);\n    }\n    visitOnConflict(node) {\n        this.append('on conflict');\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        else if (node.constraint) {\n            this.append(' on constraint ');\n            this.visitNode(node.constraint);\n        }\n        else if (node.indexExpression) {\n            this.append(' (');\n            this.visitNode(node.indexExpression);\n            this.append(')');\n        }\n        if (node.indexWhere) {\n            this.append(' ');\n            this.visitNode(node.indexWhere);\n        }\n        if (node.doNothing === true) {\n            this.append(' do nothing');\n        }\n        else if (node.updates) {\n            this.append(' do update set ');\n            this.compileList(node.updates);\n            if (node.updateWhere) {\n                this.append(' ');\n                this.visitNode(node.updateWhere);\n            }\n        }\n    }\n    visitOnDuplicateKey(node) {\n        this.append('on duplicate key update ');\n        this.compileList(node.updates);\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.expression) {\n            this.append(' (');\n            if (RawNode.is(node.expression)) {\n                this.append('(');\n            }\n            this.visitNode(node.expression);\n            if (RawNode.is(node.expression)) {\n                this.append(')');\n            }\n            this.append(')');\n        }\n    }\n    visitDropIndex(node) {\n        this.append('drop index ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n    }\n    visitCreateSchema(node) {\n        this.append('create schema ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.schema);\n    }\n    visitDropSchema(node) {\n        this.append('drop schema ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.schema);\n    }\n    visitPrimaryKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('primary key (');\n        this.compileList(node.columns);\n        this.append(')');\n    }\n    visitUniqueConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('unique (');\n        this.compileList(node.columns);\n        this.append(')');\n    }\n    visitCheckConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('check (');\n        this.visitNode(node.expression);\n        this.append(')');\n    }\n    visitForeignKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('foreign key (');\n        this.compileList(node.columns);\n        this.append(') ');\n        this.visitNode(node.references);\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitList(node) {\n        this.compileList(node.items);\n    }\n    visitWith(node) {\n        this.append('with ');\n        if (node.recursive) {\n            this.append('recursive ');\n        }\n        this.compileList(node.expressions);\n    }\n    visitCommonTableExpression(node) {\n        this.visitNode(node.name);\n        this.append(' as ');\n        this.visitNode(node.expression);\n    }\n    visitCommonTableExpressionName(node) {\n        this.visitNode(node.table);\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n    }\n    visitAlterTable(node) {\n        this.append('alter table ');\n        this.visitNode(node.table);\n        this.append(' ');\n        if (node.renameTo) {\n            this.append('rename to ');\n            this.visitNode(node.renameTo);\n        }\n        if (node.setSchema) {\n            this.append('set schema ');\n            this.visitNode(node.setSchema);\n        }\n        if (node.addConstraint) {\n            this.visitNode(node.addConstraint);\n        }\n        if (node.dropConstraint) {\n            this.visitNode(node.dropConstraint);\n        }\n        if (node.renameColumn) {\n            this.visitNode(node.renameColumn);\n        }\n        if (node.addColumn) {\n            this.visitNode(node.addColumn);\n        }\n        if (node.dropColumn) {\n            this.visitNode(node.dropColumn);\n        }\n        if (node.alterColumn) {\n            this.visitNode(node.alterColumn);\n        }\n        if (node.modifyColumn) {\n            this.visitNode(node.modifyColumn);\n        }\n    }\n    visitAddColumn(node) {\n        this.append('add column ');\n        this.visitNode(node.column);\n    }\n    visitRenameColumn(node) {\n        this.append('rename column ');\n        this.visitNode(node.column);\n        this.append(' to ');\n        this.visitNode(node.renameTo);\n    }\n    visitDropColumn(node) {\n        this.append('drop column ');\n        this.visitNode(node.column);\n    }\n    visitAlterColumn(node) {\n        this.append('alter column ');\n        this.visitNode(node.column);\n        this.append(' ');\n        if (node.dataType) {\n            this.append('type ');\n            this.visitNode(node.dataType);\n            if (node.dataTypeExpression) {\n                this.append('using ');\n                this.visitNode(node.dataTypeExpression);\n            }\n        }\n        if (node.setDefault) {\n            this.append('set default ');\n            this.visitNode(node.setDefault);\n        }\n        if (node.dropDefault) {\n            this.append('drop default');\n        }\n        if (node.setNotNull) {\n            this.append('set not null');\n        }\n        if (node.dropNotNull) {\n            this.append('drop not null');\n        }\n    }\n    visitModifyColumn(node) {\n        this.append('modify column ');\n        this.visitNode(node.column);\n    }\n    visitAddConstraint(node) {\n        this.append('add ');\n        this.visitNode(node.constraint);\n    }\n    visitDropConstraint(node) {\n        this.append('drop constraint ');\n        this.visitNode(node.constraintName);\n    }\n    visitUnion(node) {\n        this.append('union ');\n        if (node.all) {\n            this.append('all ');\n        }\n        this.visitNode(node.union);\n    }\n    visitCreateView(node) {\n        this.append('create ');\n        if (node.orReplace) {\n            this.append('or replace ');\n        }\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('view ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        this.append(' ');\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(') ');\n        }\n        if (node.as) {\n            this.append('as ');\n            this.visitNode(node.as);\n        }\n    }\n    visitDropView(node) {\n        this.append('drop ');\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        this.append('view ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n    }\n    visitGenerated(node) {\n        this.append('generated ');\n        if (node.always) {\n            this.append('always ');\n        }\n        if (node.byDefault) {\n            this.append('by default ');\n        }\n        this.append('as ');\n        if (node.identity) {\n            this.append('identity');\n        }\n        if (node.expression) {\n            this.append('(');\n            this.visitNode(node.expression);\n            this.append(')');\n        }\n        if (node.stored) {\n            this.append(' stored');\n        }\n    }\n    visitDefaultValue(node) {\n        this.append('default ');\n        this.visitNode(node.defaultValue);\n    }\n    append(str) {\n        this.#sql += str;\n    }\n    appendValue(parameter) {\n        this.addParameter(parameter);\n        this.append(this.getCurrentParameterPlaceholder());\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getCurrentParameterPlaceholder() {\n        return '$' + this.numParameters;\n    }\n    addParameter(parameter) {\n        this.#parameters.push(parameter);\n    }\n    appendImmediateValue(value) {\n        if (isString(value)) {\n            this.append(`'${value}'`);\n        }\n        else if (isNumber(value) || isBoolean(value)) {\n            this.append(value.toString());\n        }\n        else if (isNull(value)) {\n            this.append('null');\n        }\n        else if (isDate(value)) {\n            this.appendImmediateValue(value.toISOString());\n        }\n        else if (isBigInt(value)) {\n            this.appendImmediateValue(value.toString());\n        }\n        else {\n            throw new Error(`invalid immediate value ${value}`);\n        }\n    }\n}\nconst SELECT_MODIFIER_SQL = freeze({\n    ForKeyShare: 'for key share',\n    ForNoKeyUpdate: 'for no key update',\n    ForUpdate: 'for update',\n    ForShare: 'for share',\n    NoWait: 'nowait',\n    SkipLocked: 'skip locked',\n});\nconst JOIN_TYPE_SQL = freeze({\n    InnerJoin: 'inner join',\n    LeftJoin: 'left join',\n    RightJoin: 'right join',\n    FullJoin: 'full join',\n});\n", "/// <reference types=\"./compiled-query.d.ts\" />\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport const CompiledQuery = freeze({\n    raw(sql) {\n        return freeze({\n            sql,\n            query: RawNode.createWithSql(sql),\n            parameters: freeze([]),\n        });\n    },\n});\n", "/// <reference types=\"./dialect-adapter-base.d.ts\" />\n/**\n * A basic implementation of `DialectAdapter` with sensible default values.\n * 3rd party dialects can extend this instead of implementing the `DialectAdapter`\n * interface from scratch. That way all new settings will get default values when\n * they are added and there will be less breaking changes.\n */\nexport class DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n}\n", "/// <reference types=\"./postgres-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nexport class PostgresQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '$' + this.numParameters;\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n}\n", "/// <reference types=\"./migrator.d.ts\" />\nimport { freeze, getLast } from '../util/object-utils.js';\nimport { PRIVATE_ADAPTER } from '../util/private-symbols.js';\nexport const MIGRATION_TABLE = 'kysely_migration';\nexport const MIGRATION_LOCK_TABLE = 'kysely_migration_lock';\nexport const MIGRATION_LOCK_ID = 'migration_lock';\nexport const NO_MIGRATIONS = freeze({ __noMigrations__: true });\n/**\n * A class for running migrations.\n *\n * ### Example\n *\n * This example uses the {@link FileMigrationProvider} that reads migrations\n * files from a single folder. You can easily implement your own\n * {@link MigrationProvider} if you want to provide migrations some\n * other way.\n *\n * ```ts\n * const migrator = new Migrator({\n *   db,\n *   provider: new FileMigrationProvider(\n *     // Path to the folder that contains all your migrations.\n *     'some/path/to/migrations'\n *   )\n * })\n * ```\n */\nexport class Migrator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Runs all migrations that have not yet been run.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed. See the examples below.\n     *\n     * This method goes through all possible migrations provided by the provider and runs the\n     * ones whose names come alphabetically after the last migration that has been run. If the\n     * list of executed migrations doesn't match the beginning of the list of possible migrations\n     * an error is thrown.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const db = new Kysely<Database>({\n     *   dialect: new PostgresDialect({\n     *     host: 'localhost',\n     *     database: 'kysely_test',\n     *   }),\n     * })\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider(\n     *     // Path to the folder that contains all your migrations.\n     *     'some/path/to/migrations'\n     *   )\n     * })\n     *\n     * const { error, results } = await migrator.migrateToLatest()\n     *\n     * results?.forEach((it) => {\n     *   if (it.status === 'Success') {\n     *     console.log(`migration \"${it.migrationName}\" was executed successfully`)\n     *   } else if (it.status === 'Error') {\n     *     console.error(`failed to execute migration \"${it.migrationName}\"`)\n     *   }\n     * })\n     *\n     * if (error) {\n     *   console.error('failed to run `migrateToLatest`')\n     *   console.error(error)\n     * }\n     * ```\n     */\n    async migrateToLatest() {\n        return this.#migrate(({ migrations }) => migrations.length - 1);\n    }\n    /**\n     * Migrate up/down to a specific migration.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await migrator.migrateTo('some_migration')\n     * ```\n     *\n     * If you specify the name of the first migration, this method migrates\n     * down to the first migration, but doesn't run the `down` method of\n     * the first migration. In case you want to migrate all the way down,\n     * you can use a special constant `NO_MIGRATIONS`:\n     *\n     * ```ts\n     * await migrator.migrateTo(NO_MIGRATIONS)\n     * ```\n     */\n    async migrateTo(targetMigrationName) {\n        return this.#migrate(({ migrations }) => {\n            if (targetMigrationName === NO_MIGRATIONS) {\n                return -1;\n            }\n            const index = migrations.findIndex((it) => it.name === targetMigrationName);\n            if (index === -1) {\n                throw new Error(`migration \"${targetMigrationName}\" doesn't exist`);\n            }\n            return index;\n        });\n    }\n    /**\n     * Migrate one step up.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await migrator.migrateUp()\n     * ```\n     */\n    async migrateUp() {\n        return this.#migrate(({ currentIndex, migrations }) => Math.min(currentIndex + 1, migrations.length - 1));\n    }\n    /**\n     * Migrate one step down.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await migrator.migrateDown()\n     * ```\n     */\n    async migrateDown() {\n        return this.#migrate(({ currentIndex }) => Math.max(currentIndex - 1, -1));\n    }\n    async #migrate(getTargetMigrationIndex) {\n        try {\n            await this.#ensureMigrationTablesExists();\n            return await this.#runMigrations(getTargetMigrationIndex);\n        }\n        catch (error) {\n            if (error instanceof MigrationResultSetError) {\n                return error.resultSet;\n            }\n            return { error };\n        }\n    }\n    async #ensureMigrationTablesExists() {\n        await this.#ensureMigrationTableExists();\n        await this.#ensureMigrationLockTableExists();\n        await this.#ensureLockRowExists();\n    }\n    async #ensureMigrationTableExists() {\n        if (!(await this.#doesTableExists(MIGRATION_TABLE))) {\n            try {\n                await this.#props.db.schema\n                    .createTable(MIGRATION_TABLE)\n                    .ifNotExists()\n                    .addColumn('name', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    // The migration run time as ISO string. This is not a real date type as we\n                    // can't know which data type is supported by all future dialects.\n                    .addColumn('timestamp', 'varchar(255)', (col) => col.notNull())\n                    .execute();\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(MIGRATION_TABLE))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationLockTableExists() {\n        if (!(await this.#doesTableExists(MIGRATION_LOCK_TABLE))) {\n            try {\n                await this.#props.db.schema\n                    .createTable(MIGRATION_LOCK_TABLE)\n                    .ifNotExists()\n                    .addColumn('id', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    .addColumn('is_locked', 'integer', (col) => col.notNull().defaultTo(0))\n                    .execute();\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(MIGRATION_LOCK_TABLE))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureLockRowExists() {\n        if (!(await this.#doesLockRowExists())) {\n            try {\n                await this.#props.db\n                    .insertInto(MIGRATION_LOCK_TABLE)\n                    .values({ id: MIGRATION_LOCK_ID })\n                    .execute();\n            }\n            catch (error) {\n                if (!(await this.#doesLockRowExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #doesTableExists(tableName) {\n        const metadata = await this.#props.db.introspection.getMetadata({\n            withInternalKyselyTables: true,\n        });\n        return !!metadata.tables.find((it) => it.name === tableName);\n    }\n    async #doesLockRowExists() {\n        const lockRow = await this.#props.db\n            .selectFrom(MIGRATION_LOCK_TABLE)\n            .where('id', '=', MIGRATION_LOCK_ID)\n            .select('id')\n            .executeTakeFirst();\n        return !!lockRow;\n    }\n    async #runMigrations(getTargetMigrationIndex) {\n        const run = async (db) => {\n            try {\n                await this.#props.db[PRIVATE_ADAPTER].acquireMigrationLock(db);\n                const state = await this.#getState(db);\n                if (state.migrations.length === 0) {\n                    return { results: [] };\n                }\n                const targetIndex = getTargetMigrationIndex(state);\n                if (targetIndex === undefined) {\n                    return { results: [] };\n                }\n                if (targetIndex < state.currentIndex) {\n                    return await this.#migrateDown(db, state, targetIndex);\n                }\n                else if (targetIndex > state.currentIndex) {\n                    return await this.#migrateUp(db, state, targetIndex);\n                }\n                return { results: [] };\n            }\n            finally {\n                await this.#props.db[PRIVATE_ADAPTER].releaseMigrationLock(db);\n            }\n        };\n        if (this.#props.db[PRIVATE_ADAPTER].supportsTransactionalDdl) {\n            return this.#props.db.transaction().execute(run);\n        }\n        else {\n            return this.#props.db.connection().execute(run);\n        }\n    }\n    async #getState(db) {\n        const migrations = await this.#resolveMigrations();\n        const executedMigrations = await this.#getExecutedMigrations(db);\n        this.#ensureMigrationsNotCorrupted(migrations, executedMigrations);\n        return freeze({\n            migrations,\n            currentIndex: migrations.findIndex((it) => it.name === getLast(executedMigrations)),\n        });\n    }\n    async #resolveMigrations() {\n        const allMigrations = await this.#props.provider.getMigrations();\n        return Object.keys(allMigrations)\n            .sort()\n            .map((name) => ({\n            ...allMigrations[name],\n            name,\n        }));\n    }\n    async #getExecutedMigrations(db) {\n        const executedMigrations = await db\n            .selectFrom(MIGRATION_TABLE)\n            .select('name')\n            .orderBy('name')\n            .execute();\n        return executedMigrations.map((it) => it.name);\n    }\n    #ensureMigrationsNotCorrupted(migrations, executedMigrations) {\n        for (const executed of executedMigrations) {\n            if (!migrations.some((it) => it.name === executed)) {\n                throw new Error(`corrupted migrations: previously executed migration ${executed} is missing`);\n            }\n        }\n        // Now we know all executed migrations exist in the `migrations` list.\n        // Next we need to make sure that the executed migratiosns are the first\n        // ones in the migration list.\n        for (let i = 0; i < executedMigrations.length; ++i) {\n            if (migrations[i].name !== executedMigrations[i]) {\n                throw new Error(`corrupted migrations: expected previously executed migration ${executedMigrations[i]} to be at index ${i} but ${migrations[i].name} was found in its place. New migrations must always have a name that comes alphabetically after the last executed migration.`);\n            }\n        }\n    }\n    async #migrateDown(db, state, targetIndex) {\n        const results = [];\n        for (let i = state.currentIndex; i > targetIndex; --i) {\n            results.push({\n                migrationName: state.migrations[i].name,\n                direction: 'Down',\n                status: 'NotExecuted',\n            });\n        }\n        for (let i = 0; i < results.length; ++i) {\n            const migration = state.migrations.find((it) => it.name === results[i].migrationName);\n            try {\n                if (migration.down) {\n                    await migration.down(db);\n                    await db\n                        .deleteFrom(MIGRATION_TABLE)\n                        .where('name', '=', migration.name)\n                        .execute();\n                    results[i] = {\n                        migrationName: migration.name,\n                        direction: 'Down',\n                        status: 'Success',\n                    };\n                }\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Down',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n    async #migrateUp(db, state, targetIndex) {\n        const results = [];\n        for (let i = state.currentIndex + 1; i <= targetIndex; ++i) {\n            results.push({\n                migrationName: state.migrations[i].name,\n                direction: 'Up',\n                status: 'NotExecuted',\n            });\n        }\n        for (let i = 0; i < results.length; ++i) {\n            const migration = state.migrations.find((it) => it.name === results[i].migrationName);\n            try {\n                await migration.up(db);\n                await db\n                    .insertInto(MIGRATION_TABLE)\n                    .values({\n                    name: migration.name,\n                    timestamp: new Date().toISOString(),\n                })\n                    .execute();\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Success',\n                };\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n}\nclass MigrationResultSetError extends Error {\n    #resultSet;\n    constructor(result) {\n        super();\n        this.#resultSet = result;\n    }\n    get resultSet() {\n        return this.#resultSet;\n    }\n}\n", "/// <reference types=\"./postgres-introspector.d.ts\" />\nimport { MIGRATION_LOCK_TABLE, MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { freeze } from '../../util/object-utils.js';\nexport class PostgresIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getMetadata(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            .selectFrom('pg_catalog.pg_attribute as a')\n            .innerJoin('pg_catalog.pg_class as c', 'a.attrelid', 'c.oid')\n            .innerJoin('pg_catalog.pg_tables as t', 't.tablename', 'c.relname')\n            .innerJoin('pg_catalog.pg_type as typ', 'a.atttypid', 'typ.oid')\n            .select([\n            'a.attname as column',\n            'a.attnotnull as not_null',\n            't.tablename as table',\n            't.schemaname as schema',\n            'typ.typname as type',\n        ])\n            .where('t.schemaname', '!~', '^pg_')\n            .where('t.schemaname', '!=', 'information_schema')\n            .where('a.attnum', '>=', 0) // No system columns\n            .where('a.attisdropped', '!=', true)\n            .castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('t.tablename', '!=', MIGRATION_TABLE)\n                .where('t.tablename', '!=', MIGRATION_LOCK_TABLE);\n        }\n        const rawColumns = await query.execute();\n        return {\n            tables: this.#parseTableMetadata(rawColumns),\n        };\n    }\n    #parseTableMetadata(columns) {\n        return columns.reduce((tables, it) => {\n            let table = tables.find((tbl) => tbl.name === it.table && tbl.schema === it.schema);\n            if (!table) {\n                table = freeze({\n                    name: it.table,\n                    schema: it.schema,\n                    columns: [],\n                });\n                tables.push(table);\n            }\n            table.columns.push(freeze({\n                name: it.column,\n                dataType: it.type,\n                isNullable: !it.not_null,\n            }));\n            return tables;\n        }, []);\n    }\n}\n", "/// <reference types=\"./postgres-adapter.d.ts\" />\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\n// Random id for our transaction lock.\nconst LOCK_ID = '3853314791062309107';\nexport class PostgresAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return true;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(db) {\n        // Acquire a transaction level advisory lock.\n        await db.raw(`select pg_advisory_xact_lock(${LOCK_ID})`).execute();\n    }\n    async releaseMigrationLock() {\n        // Nothing to do here. `pg_advisory_xact_lock` is automatically released at the\n        // end of the transaction and since `supportsTransactionalDdl` true, we know\n        // the `db` instance passed to acquireMigrationLock is actually a transaction.\n    }\n}\n", "/// <reference types=\"./mysql-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nexport class MysqlQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftIdentifierWrapper() {\n        return '`';\n    }\n    getRightIdentifierWrapper() {\n        return '`';\n    }\n}\n", "/// <reference types=\"./mysql-introspector.d.ts\" />\nimport { MIGRATION_LOCK_TABLE, MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { freeze } from '../../util/object-utils.js';\nexport class MysqlIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getMetadata(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            .selectFrom('information_schema.columns')\n            .selectAll()\n            .where('table_schema', '=', this.#db.raw('database()'))\n            .castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('table_name', '!=', MIGRATION_TABLE)\n                .where('table_name', '!=', MIGRATION_LOCK_TABLE);\n        }\n        const rawColumns = await query.execute();\n        return {\n            tables: this.#parseTableMetadata(rawColumns),\n        };\n    }\n    #parseTableMetadata(columns) {\n        return columns.reduce((tables, it) => {\n            let table = tables.find((tbl) => tbl.name === it.TABLE_NAME);\n            if (!table) {\n                table = freeze({\n                    name: it.TABLE_NAME,\n                    columns: [],\n                });\n                tables.push(table);\n            }\n            table.columns.push(freeze({\n                name: it.COLUMN_NAME,\n                dataType: it.DATA_TYPE,\n                isNullable: it.IS_NULLABLE === 'YES',\n            }));\n            return tables;\n        }, []);\n    }\n}\n", "/// <reference types=\"./mysql-adapter.d.ts\" />\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nconst LOCK_ID = 'ea586330-2c93-47c8-908d-981d9d270f9d';\nconst LOCK_TIMEOUT_SECONDS = 60 * 60;\nexport class MysqlAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n    async acquireMigrationLock(db) {\n        // Kysely uses a single connection to run the migrations. Because of that, we\n        // can take a lock using `get_lock`. Locks acquired using `get_lock` get\n        // released when the connection is destroyed (session ends) or when the lock\n        // is released using `release_lock`. This way we know that the lock is either\n        // released by us after successfull or failed migrations OR it's released by\n        // MySQL if the process gets killed for some reason.\n        await db\n            .raw(`select get_lock('${LOCK_ID}', ${LOCK_TIMEOUT_SECONDS})`)\n            .execute();\n    }\n    async releaseMigrationLock(db) {\n        await db.raw(`select release_lock('${LOCK_ID}')`).execute();\n    }\n}\n", "/// <reference types=\"./sqlite-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nexport class SqliteQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getAutoIncrement() {\n        return 'autoincrement';\n    }\n}\n", "/// <reference types=\"./sqlite-introspector.d.ts\" />\nimport { MIGRATION_LOCK_TABLE, MIGRATION_TABLE, } from '../../migration/migrator.js';\nexport class SqliteIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getMetadata(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            .selectFrom('sqlite_schema')\n            .where('type', '=', 'table')\n            .where('name', 'not like', 'sqlite_%')\n            .select('name')\n            .castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('name', '!=', MIGRATION_TABLE)\n                .where('name', '!=', MIGRATION_LOCK_TABLE);\n        }\n        const tables = await query.execute();\n        return {\n            tables: await Promise.all(tables.map(({ name }) => this.#getTableMetadata(name))),\n        };\n    }\n    async #getTableMetadata(table) {\n        const db = this.#db;\n        const columns = await db\n            .selectFrom(db.raw(`PRAGMA_TABLE_INFO(?)`, [table]).as('table_info'))\n            .select(['name', 'type', 'notnull'])\n            .castTo()\n            .execute();\n        return {\n            name: table,\n            columns: columns.map((col) => ({\n                name: col.name,\n                dataType: col.type,\n                isNullable: !col.notnull,\n            })),\n        };\n    }\n}\n", "/// <reference types=\"./sqlite-adapter.d.ts\" />\nexport class SqliteAdapter {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n    async acquireMigrationLock() {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n    async releaseMigrationLock() {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n}\n", "/// <reference types=\"./camel-case-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nexport class SnakeCaseTransformer extends OperationNodeTransformer {\n    #snakeCase;\n    constructor(snakeCase) {\n        super();\n        this.#snakeCase = snakeCase;\n    }\n    transformIdentifier(node) {\n        node = super.transformIdentifier(node);\n        return {\n            ...node,\n            identifier: this.#snakeCase(node.identifier),\n        };\n    }\n}\n", "/// <reference types=\"./camel-case.d.ts\" />\n/**\n * Creates a function that transforms camel case strings to snake case.\n */\nexport function createSnakeCaseMapper({ upperCase = false, underscoreBeforeDigits = false, underscoreBetweenUppercaseLetters = false, } = {}) {\n    return memoize((str) => {\n        if (str.length === 0) {\n            return str;\n        }\n        const upper = str.toUpperCase();\n        const lower = str.toLowerCase();\n        let out = lower[0];\n        for (let i = 1, l = str.length; i < l; ++i) {\n            const char = str[i];\n            const prevChar = str[i - 1];\n            const upperChar = upper[i];\n            const prevUpperChar = upper[i - 1];\n            const lowerChar = lower[i];\n            const prevLowerChar = lower[i - 1];\n            // If underScoreBeforeDigits is true then, well, insert an underscore\n            // before digits :). Only the first digit gets an underscore if\n            // there are multiple.\n            if (underscoreBeforeDigits && isDigit(char) && !isDigit(prevChar)) {\n                out += '_' + char;\n                continue;\n            }\n            // Test if `char` is an upper-case character and that the character\n            // actually has different upper and lower case versions.\n            if (char === upperChar && upperChar !== lowerChar) {\n                const prevCharacterIsUppercase = prevChar === prevUpperChar && prevUpperChar !== prevLowerChar;\n                // If underscoreBetweenUppercaseLetters is true, we always place an underscore\n                // before consecutive uppercase letters (e.g. \"fooBAR\" becomes \"foo_b_a_r\").\n                // Otherwise, we don't (e.g. \"fooBAR\" becomes \"foo_bar\").\n                if (underscoreBetweenUppercaseLetters || !prevCharacterIsUppercase) {\n                    out += '_' + lowerChar;\n                }\n                else {\n                    out += lowerChar;\n                }\n            }\n            else {\n                out += char;\n            }\n        }\n        if (upperCase) {\n            return out.toUpperCase();\n        }\n        else {\n            return out;\n        }\n    });\n}\n/**\n * Creates a function that transforms snake case strings to camel case.\n */\nexport function createCamelCaseMapper({ upperCase = false, } = {}) {\n    return memoize((str) => {\n        if (str.length === 0) {\n            return str;\n        }\n        if (upperCase && isAllUpperCaseSnakeCase(str)) {\n            // Only convert to lower case if the string is all upper\n            // case snake_case. This allows camelCase strings to go\n            // through without changing.\n            str = str.toLowerCase();\n        }\n        let out = str[0];\n        for (let i = 1, l = str.length; i < l; ++i) {\n            const char = str[i];\n            const prevChar = str[i - 1];\n            if (char !== '_') {\n                if (prevChar === '_') {\n                    out += char.toUpperCase();\n                }\n                else {\n                    out += char;\n                }\n            }\n        }\n        return out;\n    });\n}\nfunction isAllUpperCaseSnakeCase(str) {\n    for (let i = 1, l = str.length; i < l; ++i) {\n        const char = str[i];\n        if (char !== '_' && char !== char.toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isDigit(char) {\n    return char >= '0' && char <= '9';\n}\nfunction memoize(func) {\n    const cache = new Map();\n    return (str) => {\n        let mapped = cache.get(str);\n        if (!mapped) {\n            mapped = func(str);\n            cache.set(str, mapped);\n        }\n        return mapped;\n    };\n}\n", "/// <reference types=\"./camel-case-plugin.d.ts\" />\nimport { isBuffer, isDate, isObject } from '../../util/object-utils.js';\nimport { SnakeCaseTransformer } from './camel-case-transformer.js';\nimport { createCamelCaseMapper, createSnakeCaseMapper, } from './camel-case.js';\n/**\n * A plugin that converts snake_case identifiers in the database into\n * camelCase in the javascript side.\n *\n * For example let's assume we have a table called `person_table`\n * with columns `first_name` and `last_name` in the database. When\n * using `CamelCasePlugin` we would setup Kysely like this:\n *\n * ```ts\n * interface Person {\n *   firstName: string\n *   lastName: string\n * }\n *\n * interface Database {\n *   personTable: Person\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new PostgresDialect({\n *     database: 'kysely_test',\n *     host: 'localhost',\n *   }),\n *   plugins: [\n *     new CamelCasePlugin()\n *   ]\n * })\n *\n * const person = await db.selectFrom('personTable')\n *   .where('firstName', '=', 'Arnold')\n *   .select(['firstName', 'lastName'])\n *   .executeTakeFirst()\n *\n * // generated sql:\n * // select first_name, last_name from person_table where first_name = $1\n *\n * if (person) {\n *   console.log(person.firstName)\n * }\n * ```\n *\n * As you can see from the example, __everything__ needs to be defined\n * in camelCase in the typescript code: the table names, the columns,\n * schemas, __everything__. When using the `CamelCasePlugin` Kysely\n * works as if the database was defined in camelCase.\n *\n * There are various options you can give to the plugin to modify\n * the way identifiers are converted. See {@link CamelCasePluginOptions}.\n * If those options are not enough, you can override this plugin's\n * `snakeCase` and `camelCase` methods to make the conversion exactly\n * the way you like:\n *\n * ```ts\n * class MyCamelCasePlugin extends CamelCasePlugin {\n *   protected override snakeCase(str: string): string {\n *     return mySnakeCase(str)\n *   }\n *\n *   protected override camelCase(str: string): string {\n *     return myCamelCase(str)\n *   }\n * }\n * ```\n */\nexport class CamelCasePlugin {\n    #camelCase;\n    #snakeCase;\n    #snakeCaseTransformer;\n    constructor(opt = {}) {\n        this.#camelCase = createCamelCaseMapper(opt);\n        this.#snakeCase = createSnakeCaseMapper(opt);\n        this.#snakeCaseTransformer = new SnakeCaseTransformer(this.snakeCase.bind(this));\n    }\n    transformQuery(args) {\n        return this.#snakeCaseTransformer.transformNode(args.node);\n    }\n    async transformResult(args) {\n        if (args.result.rows && Array.isArray(args.result.rows)) {\n            return {\n                ...args.result,\n                rows: args.result.rows.map((row) => this.mapRow(row)),\n            };\n        }\n        return args.result;\n    }\n    mapRow(row) {\n        return Object.keys(row).reduce((obj, key) => {\n            let value = row[key];\n            if (Array.isArray(value)) {\n                value = value.map((it) => (canMap(it) ? this.mapRow(it) : it));\n            }\n            else if (canMap(value)) {\n                value = this.mapRow(value);\n            }\n            obj[this.camelCase(key)] = value;\n            return obj;\n        }, {});\n    }\n    snakeCase(str) {\n        return this.#snakeCase(str);\n    }\n    camelCase(str) {\n        return this.#camelCase(str);\n    }\n}\nfunction canMap(obj) {\n    return isObject(obj) && !isDate(obj) && !isBuffer(obj);\n}\n", "/// <reference types=\"./deduplicate-joins-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { compare, freeze } from '../../util/object-utils.js';\nexport class DeduplicateJoinsTransformer extends OperationNodeTransformer {\n    transformSelectQuery(node) {\n        return this.#transformQuery(super.transformSelectQuery(node));\n    }\n    transformUpdateQuery(node) {\n        return this.#transformQuery(super.transformUpdateQuery(node));\n    }\n    transformDeleteQuery(node) {\n        return this.#transformQuery(super.transformDeleteQuery(node));\n    }\n    #transformQuery(node) {\n        if (!node.joins || node.joins.length === 0) {\n            return node;\n        }\n        return freeze({\n            ...node,\n            joins: this.#deduplicateJoins(node.joins),\n        });\n    }\n    #deduplicateJoins(joins) {\n        const out = [];\n        for (let i = 0; i < joins.length; ++i) {\n            let foundDuplicate = false;\n            for (let j = i + 1; j < joins.length; ++j) {\n                if (compare(joins[i], joins[j])) {\n                    foundDuplicate = true;\n                    break;\n                }\n            }\n            if (!foundDuplicate) {\n                out.push(joins[i]);\n            }\n        }\n        return freeze(out);\n    }\n}\n", "/// <reference types=\"./deduplicate-joins-plugin.d.ts\" />\nimport { DeduplicateJoinsTransformer } from './deduplicate-joins-transformer.js';\n/**\n * Plugin that removes duplicate joins from queries.\n *\n * See [this recipe](https://github.com/koskimas/kysely/tree/master/recipes/deduplicate-joins.md)\n */\nexport class DeduplicateJoinsPlugin {\n    #transformer = new DeduplicateJoinsTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\n", "/// <reference types=\"./drop-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'DropConstraintNode';\n    },\n    create(constraintName) {\n        return freeze({\n            kind: 'DropConstraintNode',\n            constraintName: IdentifierNode.create(constraintName),\n        });\n    },\n});\n", "/// <reference types=\"./file-migration-provider.d.ts\" />\nimport { isFunction, isObject } from '../util/object-utils.js';\n/**\n * Reads all migrations from a folder.\n *\n * ### Examples\n *\n * ```ts\n * new FileMigrationProvider(\n *   'path/to/migrations/folder'\n * )\n * ```\n */\nexport class FileMigrationProvider {\n    #migrationFolderPath;\n    constructor(migrationFolderPath) {\n        this.#migrationFolderPath = migrationFolderPath;\n    }\n    async getMigrations() {\n        // Import these dynamically so that we don't have any top level\n        // node dependencies.\n        const fs = await import('fs/promises');\n        const path = await import('path');\n        const migrations = {};\n        const files = await fs.readdir(this.#migrationFolderPath);\n        for (const fileName of files) {\n            if ((fileName.endsWith('.js') || fileName.endsWith('.ts')) &&\n                !fileName.endsWith('.d.ts')) {\n                const migration = await import(path.join(this.#migrationFolderPath, fileName));\n                if (isMigration(migration)) {\n                    migrations[fileName.substring(0, fileName.length - 3)] = migration;\n                }\n            }\n        }\n        return migrations;\n    }\n}\nfunction isMigration(obj) {\n    return isObject(obj) && isFunction(obj.up);\n}\n", "/// <reference types=\"./sqlite-driver.d.ts\" />\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { freeze, isBoolean, isFunction, isNumber, } from '../../util/object-utils.js';\nexport class SqliteDriver {\n    #config;\n    #connectionMutex = new ConnectionMutex();\n    #db;\n    #connection;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    async init() {\n        // Import the `better-sqlite3` module here instead at the top of the file\n        // so that this file can be loaded by node without `better-sqlite3` driver\n        // installed. As you can see, there IS an import from `better-sqlite3` at\n        // the top level too, but that's only for types. It doesn't get compiled\n        // into javascript. You can check the built javascript code.\n        const DatabaseConstructor = await importBetterSqlite3Database();\n        const options = {};\n        if (isBoolean(this.#config.readonly)) {\n            options.readonly = this.#config.readonly;\n        }\n        if (isBoolean(this.#config.fileMustExist)) {\n            options.fileMustExist = this.#config.fileMustExist;\n        }\n        if (isNumber(this.#config.timeout)) {\n            options.timeout = this.#config.timeout;\n        }\n        if (isFunction(this.#config.verbose)) {\n            options.verbose = this.#config.verbose;\n        }\n        this.#db = new DatabaseConstructor(this.#config.databasePath, options);\n        this.#connection = new SqliteConnection(this.#db);\n        if (this.#config.onCreateConnection) {\n            await this.#config.onCreateConnection(this.#connection);\n        }\n    }\n    async acquireConnection() {\n        // SQLite only has one single connection. We use a mutex here to wait\n        // until the single connection has been released.\n        await this.#connectionMutex.lock();\n        return this.#connection;\n    }\n    async beginTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('begin'));\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async releaseConnection() {\n        this.#connectionMutex.unlock();\n    }\n    async destroy() {\n        this.#db?.close();\n    }\n}\nasync function importBetterSqlite3Database() {\n    try {\n        // The imported module name must be a string literal to make\n        // some bundlers work. So don't move this code behind a helper\n        // for example.\n        const sqliteModule = await import('better-sqlite3');\n        if (isFunction(sqliteModule)) {\n            return sqliteModule;\n        }\n        else {\n            return sqliteModule.default;\n        }\n    }\n    catch (error) {\n        throw new Error('SQLite client not installed. Please run `npm install better-sqlite3`');\n    }\n}\nclass SqliteConnection {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    executeQuery(compiledQuery) {\n        const { sql, parameters } = compiledQuery;\n        const stmt = this.#db.prepare(sql);\n        if (stmt.reader) {\n            return Promise.resolve({\n                rows: stmt.all(parameters),\n            });\n        }\n        else {\n            const { changes, lastInsertRowid } = stmt.run(parameters);\n            return Promise.resolve({\n                numUpdatedOrDeletedRows: changes !== undefined && changes !== null\n                    ? BigInt(changes)\n                    : undefined,\n                insertId: lastInsertRowid !== undefined && lastInsertRowid !== null\n                    ? BigInt(lastInsertRowid)\n                    : undefined,\n                rows: [],\n            });\n        }\n    }\n}\nclass ConnectionMutex {\n    #promise;\n    #resolve;\n    async lock() {\n        while (this.#promise) {\n            await this.#promise;\n        }\n        this.#promise = new Promise((resolve) => {\n            this.#resolve = resolve;\n        });\n    }\n    unlock() {\n        const resolve = this.#resolve;\n        this.#promise = undefined;\n        this.#resolve = undefined;\n        resolve?.();\n    }\n}\n", "/// <reference types=\"./sqlite-dialect.d.ts\" />\nimport { SqliteDriver } from './sqlite-driver.js';\nimport { SqliteQueryCompiler } from './sqlite-query-compiler.js';\nimport { SqliteIntrospector } from './sqlite-introspector.js';\nimport { SqliteAdapter } from './sqlite-adapter.js';\nimport { freeze } from '../../util/object-utils.js';\n/**\n * SQLite dialect that uses the [better-sqlite3](https://github.com/JoshuaWise/better-sqlite3) library.\n *\n * The {@link SqliteDialectConfig | configuration} is used to construct an instance of\n * [Database](https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md#new-databasepath-options)\n * class. The configuration values are passed directly to the `Database` constructor.\n */\nexport class SqliteDialect {\n    #config;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    createDriver() {\n        return new SqliteDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new SqliteQueryCompiler();\n    }\n    createAdapter() {\n        return new SqliteAdapter();\n    }\n    createIntrospector(db) {\n        return new SqliteIntrospector(db);\n    }\n}\n", "/// <reference types=\"./mysql-driver.d.ts\" />\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { isFunction, isObject, freeze } from '../../util/object-utils.js';\nconst PRIVATE_RELEASE_METHOD = Symbol();\nexport class MysqlDriver {\n    #config;\n    #connections = new WeakMap();\n    #pool;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    async init() {\n        // Import the `mysql2` module here instead at the top of the file\n        // so that this file can be loaded by node without `mysql2` driver\n        // installed. As you can see, there IS an import from `mysql2` at the\n        // top level too, but that's only for types. It doesn't get compiled\n        // into javascript. You can check the built javascript code.\n        const poolFactory = await importMysqlPoolFactory();\n        // Use the `mysql2` module's own pool. All drivers should use the\n        // pool provided by the database library if possible.\n        this.#pool = poolFactory(this.#config);\n    }\n    async acquireConnection() {\n        const rawConnection = await this.#acquireConnection();\n        let connection = this.#connections.get(rawConnection);\n        if (!connection) {\n            connection = new MysqlConnection(rawConnection);\n            this.#connections.set(rawConnection, connection);\n            // The driver must take care of calling `onCreateConnection` when a new\n            // connection is created. The `mysql2` module doesn't provide an async hook\n            // for the connection creation. We need to call the method explicitly.\n            if (this.#config.onCreateConnection) {\n                await this.#config.onCreateConnection(connection);\n            }\n        }\n        return connection;\n    }\n    async #acquireConnection() {\n        return new Promise((resolve, reject) => {\n            this.#pool.getConnection(async (err, rawConnection) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(rawConnection);\n                }\n            });\n        });\n    }\n    async beginTransaction(connection, settings) {\n        if (settings.isolationLevel) {\n            // On MySQL this sets the isolation level of the next transaction.\n            await connection.executeQuery(CompiledQuery.raw(`set transaction isolation level ${settings.isolationLevel}`));\n        }\n        await connection.executeQuery(CompiledQuery.raw('begin'));\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async releaseConnection(connection) {\n        const mysqlConnection = connection;\n        mysqlConnection[PRIVATE_RELEASE_METHOD]();\n    }\n    async destroy() {\n        return new Promise((resolve, reject) => {\n            this.#pool.end((err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n}\nasync function importMysqlPoolFactory() {\n    try {\n        // The imported module name must be a string literal to make\n        // some bundlers work. So don't move this code behind a helper\n        // for example.\n        const mysqlModule = await import('mysql2');\n        if (isFunction(mysqlModule.createPool)) {\n            return mysqlModule.createPool;\n        }\n        else {\n            return mysqlModule.default.createPool;\n        }\n    }\n    catch (error) {\n        throw new Error('MySQL client not installed. Please run `npm install mysql2`');\n    }\n}\nclass MysqlConnection {\n    #rawConnection;\n    constructor(rawConnection) {\n        this.#rawConnection = rawConnection;\n    }\n    async executeQuery(compiledQuery) {\n        const result = await this.#executeQuery(compiledQuery);\n        if (isOkPacket(result)) {\n            const { insertId, affectedRows } = result;\n            return {\n                insertId: insertId !== undefined &&\n                    insertId !== null &&\n                    insertId.toString() !== '0'\n                    ? BigInt(insertId)\n                    : undefined,\n                numUpdatedOrDeletedRows: affectedRows !== undefined && insertId !== null\n                    ? BigInt(affectedRows)\n                    : undefined,\n                rows: [],\n            };\n        }\n        else if (Array.isArray(result)) {\n            return {\n                rows: result,\n            };\n        }\n        return {\n            rows: [],\n        };\n    }\n    #executeQuery(compiledQuery) {\n        return new Promise((resolve, reject) => {\n            this.#rawConnection.query(compiledQuery.sql, compiledQuery.parameters, (err, result) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(result);\n                }\n            });\n        });\n    }\n    [PRIVATE_RELEASE_METHOD]() {\n        this.#rawConnection.release();\n    }\n}\nfunction isOkPacket(obj) {\n    return isObject(obj) && 'insertId' in obj && 'affectedRows' in obj;\n}\n", "/// <reference types=\"./mysql-dialect.d.ts\" />\nimport { MysqlDriver } from './mysql-driver.js';\nimport { MysqlQueryCompiler } from './mysql-query-compiler.js';\nimport { MysqlIntrospector } from './mysql-introspector.js';\nimport { MysqlAdapter } from './mysql-adapter.js';\nimport { freeze } from '../../util/object-utils.js';\n/**\n * MySQL dialect that uses the [mysql2](https://github.com/sidorares/node-mysql2#readme) library.\n *\n * The {@link MysqlDialectConfig | configuration} passed to the constructor\n * is given as-is to the mysql2 library's [createPool](https://github.com/sidorares/node-mysql2#using-connection-pools)\n * method.\n */\nexport class MysqlDialect {\n    #config;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    createDriver() {\n        return new MysqlDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new MysqlQueryCompiler();\n    }\n    createAdapter() {\n        return new MysqlAdapter();\n    }\n    createIntrospector(db) {\n        return new MysqlIntrospector(db);\n    }\n}\n", "/// <reference types=\"./postgres-driver.d.ts\" />\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { isFunction, freeze } from '../../util/object-utils.js';\nconst PRIVATE_RELEASE_METHOD = Symbol();\nexport class PostgresDriver {\n    #config;\n    #connections = new WeakMap();\n    #pool = null;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    async init() {\n        // Import the `pg` module here instead at the top of the file\n        // so that this file can be loaded by node without `pg` driver\n        // installed. As you can see, there IS an import from `pg` at the\n        // top level too, but that's only for types. It doesn't get compiled\n        // into javascript. You can check the built javascript code.\n        const PoolConstructor = await importPgPool();\n        // Use the `pg` module's own pool. All drivers should use the\n        // pool provided by the database library if possible.\n        this.#pool = new PoolConstructor(this.#config);\n    }\n    async acquireConnection() {\n        const client = await this.#pool.connect();\n        let connection = this.#connections.get(client);\n        if (!connection) {\n            connection = new PostgresConnection(client);\n            this.#connections.set(client, connection);\n            // The driver must take care of calling `onCreateConnection` when a new\n            // connection is created. The `pg` module doesn't provide an async hook\n            // for the connection creation. We need to call the method explicitly.\n            if (this.#config.onCreateConnection) {\n                await this.#config.onCreateConnection(connection);\n            }\n        }\n        return connection;\n    }\n    async beginTransaction(connection, settings) {\n        if (settings.isolationLevel) {\n            await connection.executeQuery(CompiledQuery.raw(`start transaction isolation level ${settings.isolationLevel}`));\n        }\n        else {\n            await connection.executeQuery(CompiledQuery.raw('begin'));\n        }\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async releaseConnection(connection) {\n        const pgConnection = connection;\n        pgConnection[PRIVATE_RELEASE_METHOD]();\n    }\n    async destroy() {\n        if (this.#pool) {\n            const pool = this.#pool;\n            this.#pool = null;\n            await pool.end();\n        }\n    }\n}\nasync function importPgPool() {\n    try {\n        // The imported module name must be a string literal to make\n        // some bundlers work. So don't move this code behind a helper\n        // for example.\n        const pgModule = await import('pg');\n        if (isFunction(pgModule.Pool)) {\n            return pgModule.Pool;\n        }\n        else {\n            return pgModule.default.Pool;\n        }\n    }\n    catch (error) {\n        throw new Error('Postgres client not installed. Please run `npm install pg`');\n    }\n}\nclass PostgresConnection {\n    #client;\n    constructor(client) {\n        this.#client = client;\n    }\n    async executeQuery(compiledQuery) {\n        const result = await this.#client.query(compiledQuery.sql, [\n            ...compiledQuery.parameters,\n        ]);\n        if (result.command === 'UPDATE' || result.command === 'DELETE') {\n            return {\n                numUpdatedOrDeletedRows: BigInt(result.rowCount),\n                rows: result.rows ?? [],\n            };\n        }\n        return {\n            rows: result.rows ?? [],\n        };\n    }\n    [PRIVATE_RELEASE_METHOD]() {\n        this.#client.release();\n    }\n}\n", "/// <reference types=\"./postgres-dialect.d.ts\" />\nimport { PostgresDriver } from './postgres-driver.js';\nimport { PostgresIntrospector } from './postgres-introspector.js';\nimport { PostgresQueryCompiler } from './postgres-query-compiler.js';\nimport { PostgresAdapter } from './postgres-adapter.js';\nimport { freeze } from '../../util/object-utils.js';\n/**\n * PostgreSQL dialect that uses the [pg](https://node-postgres.com/) library.\n *\n * The {@link PostgresDialectConfig | configuration} passed to the constructor\n * is given as-is to the pg library's [Pool](https://node-postgres.com/api/pool)\n * constructor. See the following two links for more documentation:\n *\n * https://node-postgres.com/api/pool\n * https://node-postgres.com/api/client\n */\nexport class PostgresDialect {\n    #config;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    createDriver() {\n        return new PostgresDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new PostgresQueryCompiler();\n    }\n    createAdapter() {\n        return new PostgresAdapter();\n    }\n    createIntrospector(db) {\n        return new PostgresIntrospector(db);\n    }\n}\n", "export class DataApiDriver {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    async init() { }\n    async acquireConnection() {\n        return new DataApiConnection(this.#config);\n    }\n    async beginTransaction(conn) {\n        await conn.beginTransaction();\n    }\n    async commitTransaction(conn) {\n        await conn.commitTransaction();\n    }\n    async rollbackTransaction(conn) {\n        await conn.rollbackTransaction();\n    }\n    async releaseConnection(_connection) { }\n    async destroy() { }\n}\nclass DataApiConnection {\n    #config;\n    #transactionId;\n    constructor(config) {\n        this.#config = config;\n    }\n    async beginTransaction() {\n        const r = await this.#config.client\n            .beginTransaction({\n            secretArn: this.#config.secretArn,\n            resourceArn: this.#config.resourceArn,\n            database: this.#config.database,\n        })\n            .promise();\n        this.#transactionId = r.transactionId;\n    }\n    async commitTransaction() {\n        if (!this.#transactionId)\n            throw new Error(\"Cannot commit a transaction before creating it\");\n        await this.#config.client\n            .commitTransaction({\n            secretArn: this.#config.secretArn,\n            resourceArn: this.#config.resourceArn,\n            transactionId: this.#transactionId,\n        })\n            .promise();\n    }\n    async rollbackTransaction() {\n        if (!this.#transactionId)\n            throw new Error(\"Cannot rollback a transaction before creating it\");\n        await this.#config.client\n            .rollbackTransaction({\n            secretArn: this.#config.secretArn,\n            resourceArn: this.#config.resourceArn,\n            transactionId: this.#transactionId,\n        })\n            .promise();\n    }\n    async executeQuery(compiledQuery) {\n        const r = await this.#config.client\n            .executeStatement({\n            transactionId: this.#transactionId,\n            secretArn: this.#config.secretArn,\n            resourceArn: this.#config.resourceArn,\n            sql: compiledQuery.sql,\n            parameters: compiledQuery.parameters,\n            database: this.#config.database,\n            includeResultMetadata: true,\n        })\n            .promise();\n        if (!r.columnMetadata) {\n            return {\n                numUpdatedOrDeletedRows: BigInt(r.numberOfRecordsUpdated || 0),\n                rows: [],\n            };\n        }\n        const rows = r.records\n            ?.filter((r) => r.length !== 0)\n            .map((rec) => Object.fromEntries(rec.map((val, i) => [\n            r.columnMetadata[i].name,\n            val.stringValue ??\n                val.blobValue ??\n                val.longValue ??\n                val.arrayValue ??\n                val.doubleValue ??\n                (val.isNull ? null : val.booleanValue),\n        ])));\n        const result = {\n            rows: rows || [],\n        };\n        return result;\n    }\n}\n", "import { MysqlQueryCompiler, PostgresQueryCompiler } from \"kysely\";\nexport class PostgresDataApiQueryCompiler extends PostgresQueryCompiler {\n    appendValue(value) {\n        const name = this.numParameters;\n        this.append(this.getCurrentParameterPlaceholder());\n        this.addParameter({\n            name: name.toString(),\n            value: serialize(value),\n        });\n    }\n    getCurrentParameterPlaceholder() {\n        return \":\" + this.numParameters;\n    }\n}\nexport class MysqlDataApiQueryCompiler extends MysqlQueryCompiler {\n    appendValue(value) {\n        const name = this.numParameters;\n        this.append(this.getCurrentParameterPlaceholder());\n        this.addParameter({\n            name: name.toString(),\n            value: serialize(value),\n        });\n    }\n    getCurrentParameterPlaceholder() {\n        return \":\" + this.numParameters;\n    }\n}\nfunction serialize(value) {\n    if (value == null)\n        return { isNull: true };\n    switch (typeof value) {\n        case \"number\":\n            if (Number.isInteger(value))\n                return {\n                    longValue: value,\n                };\n            else\n                return {\n                    doubleValue: value,\n                };\n        case \"bigint\":\n            return {\n                doubleValue: Number(value),\n            };\n        case \"string\":\n            return {\n                stringValue: value,\n            };\n        case \"boolean\":\n            return {\n                booleanValue: value,\n            };\n        case \"object\":\n            if (Buffer.isBuffer(value))\n                return {\n                    blobValue: value,\n                };\n            else\n                break;\n    }\n    throw \"wtf\";\n}\n", "import { MysqlAdapter, MysqlIntrospector, PostgresAdapter, PostgresIntrospector, } from \"kysely\";\nimport { DataApiDriver } from \"./data-api-driver\";\nimport { PostgresDataApiQueryCompiler, MysqlDataApiQueryCompiler, } from \"./data-api-query-compiler\";\nexport class DataApiDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createAdapter() {\n        if (this.#config.mode === \"postgres\")\n            return new PostgresAdapter();\n        if (this.#config.mode === \"mysql\")\n            return new MysqlAdapter();\n        throw new Error(\"Unknown mode \" + this.#config.mode);\n    }\n    createDriver() {\n        return new DataApiDriver(this.#config.driver);\n    }\n    createQueryCompiler() {\n        if (this.#config.mode === \"postgres\")\n            return new PostgresDataApiQueryCompiler();\n        if (this.#config.mode === \"mysql\")\n            return new MysqlDataApiQueryCompiler();\n        throw new Error(\"Unknown mode \" + this.#config.mode);\n    }\n    createIntrospector(db) {\n        if (this.#config.mode === \"postgres\")\n            return new PostgresIntrospector(db);\n        if (this.#config.mode === \"mysql\")\n            return new MysqlIntrospector(db);\n        throw new Error(\"Unknown mode \" + this.#config.mode);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
