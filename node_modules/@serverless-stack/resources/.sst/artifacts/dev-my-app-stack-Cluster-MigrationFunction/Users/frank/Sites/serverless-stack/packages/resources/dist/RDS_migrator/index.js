var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// dist/RDS_migrator/index.js
__export(exports, {
  handler: () => handler
});
var import_path = __toModule(require("path"));

// dist/RDS_migrator/node_modules/kysely/dist/esm/util/object-utils.js
function isString(obj) {
  return typeof obj === "string";
}
function isNumber(obj) {
  return typeof obj === "number";
}
function isBoolean(obj) {
  return typeof obj === "boolean";
}
function isNull(obj) {
  return obj === null;
}
function isDate(obj) {
  return obj instanceof Date;
}
function isBigInt(obj) {
  return typeof obj === "bigint";
}
function isBuffer(obj) {
  return typeof Buffer !== "undefined" && Buffer.isBuffer(obj);
}
function isFunction(obj) {
  return typeof obj === "function";
}
function isObject(obj) {
  return typeof obj === "object" && obj !== null;
}
function getLast(arr) {
  return arr[arr.length - 1];
}
function freeze(obj) {
  return Object.freeze(obj);
}
function isReadonlyArray(arg) {
  return Array.isArray(arg);
}
function noop(obj) {
  return obj;
}
function compare(obj1, obj2) {
  if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {
    return compareArrays(obj1, obj2);
  } else if (isObject(obj1) && isObject(obj2)) {
    return compareObjects(obj1, obj2);
  }
  return obj1 === obj2;
}
function compareArrays(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }
  for (let i = 0; i < arr1.length; ++i) {
    if (!compare(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
}
function compareObjects(obj1, obj2) {
  if (isBuffer(obj1) && isBuffer(obj2)) {
    return compareBuffers(obj1, obj2);
  } else if (isDate(obj1) && isDate(obj2)) {
    return compareDates(obj1, obj2);
  }
  return compareGenericObjects(obj1, obj2);
}
function compareBuffers(buf1, buf2) {
  return Buffer.compare(buf1, buf2) === 0;
}
function compareDates(date1, date2) {
  return date1.getTime() === date2.getTime();
}
function compareGenericObjects(obj1, obj2) {
  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (const key of keys1) {
    if (!compare(obj1[key], obj2[key])) {
      return false;
    }
  }
  return true;
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/identifier-node.js
var IdentifierNode = freeze({
  is(node) {
    return node.kind === "IdentifierNode";
  },
  create(identifier) {
    return freeze({
      kind: "IdentifierNode",
      identifier
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/table-node.js
var TableNode = freeze({
  is(node) {
    return node.kind === "TableNode";
  },
  create(table) {
    return freeze({
      kind: "TableNode",
      table: IdentifierNode.create(table)
    });
  },
  createWithSchema(schema, table) {
    return freeze({
      kind: "TableNode",
      schema: IdentifierNode.create(schema),
      table: IdentifierNode.create(table)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/alter-table-node.js
var AlterTableNode = freeze({
  is(node) {
    return node.kind === "AlterTableNode";
  },
  create(table) {
    return freeze({
      kind: "AlterTableNode",
      table: TableNode.create(table)
    });
  },
  cloneWith(node, props) {
    return freeze(__spreadValues(__spreadValues({}, node), props));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/create-index-node.js
var CreateIndexNode = freeze({
  is(node) {
    return node.kind === "CreateIndexNode";
  },
  create(name) {
    return freeze({
      kind: "CreateIndexNode",
      name: IdentifierNode.create(name)
    });
  },
  cloneWith(node, props) {
    return freeze(__spreadValues(__spreadValues({}, node), props));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/create-schema-node.js
var CreateSchemaNode = freeze({
  is(node) {
    return node.kind === "CreateSchemaNode";
  },
  create(schema, params) {
    return freeze(__spreadValues({
      kind: "CreateSchemaNode",
      schema: IdentifierNode.create(schema)
    }, params));
  },
  cloneWith(createSchema, params) {
    return freeze(__spreadValues(__spreadValues({}, createSchema), params));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/create-table-node.js
var CreateTableNode = freeze({
  is(node) {
    return node.kind === "CreateTableNode";
  },
  create(table) {
    return freeze({
      kind: "CreateTableNode",
      table,
      columns: freeze([])
    });
  },
  cloneWithColumn(createTable, column) {
    return freeze(__spreadProps(__spreadValues({}, createTable), {
      columns: freeze([...createTable.columns, column])
    }));
  },
  cloneWithConstraint(createTable, constraint) {
    return freeze(__spreadProps(__spreadValues({}, createTable), {
      constraints: createTable.constraints ? freeze([...createTable.constraints, constraint]) : freeze([constraint])
    }));
  },
  cloneWith(createTable, params) {
    return freeze(__spreadValues(__spreadValues({}, createTable), params));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-index-node.js
var DropIndexNode = freeze({
  is(node) {
    return node.kind === "DropIndexNode";
  },
  create(name, params) {
    return freeze(__spreadValues({
      kind: "DropIndexNode",
      name: IdentifierNode.create(name)
    }, params));
  },
  cloneWith(dropIndex, props) {
    return freeze(__spreadValues(__spreadValues({}, dropIndex), props));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-schema-node.js
var DropSchemaNode = freeze({
  is(node) {
    return node.kind === "DropSchemaNode";
  },
  create(schema, params) {
    return freeze(__spreadValues({
      kind: "DropSchemaNode",
      schema: IdentifierNode.create(schema)
    }, params));
  },
  cloneWith(dropSchema, params) {
    return freeze(__spreadValues(__spreadValues({}, dropSchema), params));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-table-node.js
var DropTableNode = freeze({
  is(node) {
    return node.kind === "DropTableNode";
  },
  create(table, params) {
    return freeze(__spreadValues({
      kind: "DropTableNode",
      table
    }, params));
  },
  cloneWith(dropIndex, params) {
    return freeze(__spreadValues(__spreadValues({}, dropIndex), params));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/alias-node.js
var AliasNode = freeze({
  is(node) {
    return node.kind === "AliasNode";
  },
  create(node, alias) {
    return freeze({
      kind: "AliasNode",
      node,
      alias: IdentifierNode.create(alias)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/operation-node-source.js
function isOperationNodeSource(obj) {
  return isObject(obj) && isFunction(obj.toOperationNode);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/complex-expression-parser.js
function parseComplexExpression(ctx, exp) {
  if (isOperationNodeSource(exp)) {
    return exp.toOperationNode();
  } else if (isFunction(exp)) {
    return exp(ctx.createExpressionBuilder()).toOperationNode();
  }
  throw new Error(`invalid expression: ${JSON.stringify(exp)}`);
}
function parseAliasedComplexExpression(ctx, exp) {
  if (isOperationNodeSource(exp)) {
    return exp.toOperationNode();
  } else if (isFunction(exp)) {
    return exp(ctx.createExpressionBuilder()).toOperationNode();
  }
  throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);
}
function isComplexExpression(obj) {
  return isOperationNodeSource(obj) || isFunction(obj);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/table-parser.js
function parseTableExpressionOrList(ctx, table) {
  if (isReadonlyArray(table)) {
    return table.map((it) => parseTableExpression(ctx, it));
  } else {
    return [parseTableExpression(ctx, table)];
  }
}
function parseTableExpression(ctx, table) {
  if (isString(table)) {
    return parseAliasedTable(table);
  } else {
    return parseAliasedComplexExpression(ctx, table);
  }
}
function parseAliasedTable(from) {
  const ALIAS_SEPARATOR = " as ";
  if (from.includes(ALIAS_SEPARATOR)) {
    const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);
    return AliasNode.create(parseTable(table), alias);
  } else {
    return parseTable(from);
  }
}
function parseTable(from) {
  const SCHEMA_SEPARATOR = ".";
  if (from.includes(SCHEMA_SEPARATOR)) {
    const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);
    return TableNode.createWithSchema(schema, table);
  } else {
    return TableNode.create(from);
  }
}
function trim(str) {
  return str.trim();
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/add-column-node.js
var AddColumnNode = freeze({
  is(node) {
    return node.kind === "AddColumnNode";
  },
  create(column) {
    return freeze({
      kind: "AddColumnNode",
      column
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/column-node.js
var ColumnNode = freeze({
  is(node) {
    return node.kind === "ColumnNode";
  },
  create(column) {
    return freeze({
      kind: "ColumnNode",
      column: IdentifierNode.create(column)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/alter-column-node.js
var AlterColumnNode = freeze({
  is(node) {
    return node.kind === "AlterColumnNode";
  },
  create(column) {
    return freeze({
      kind: "AlterColumnNode",
      column: ColumnNode.create(column)
    });
  },
  cloneWith(node, props) {
    return freeze(__spreadValues(__spreadValues({}, node), props));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/column-definition-node.js
var ColumnDefinitionNode = freeze({
  is(node) {
    return node.kind === "ColumnDefinitionNode";
  },
  create(column, dataType) {
    return freeze({
      kind: "ColumnDefinitionNode",
      column: ColumnNode.create(column),
      dataType
    });
  },
  cloneWith(node, props) {
    return freeze(__spreadValues(__spreadValues({}, node), props));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/data-type-node.js
var DataTypeNode = freeze({
  is(node) {
    return node.kind === "DataTypeNode";
  },
  create(dataType) {
    return freeze({
      kind: "DataTypeNode",
      dataType
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-column-node.js
var DropColumnNode = freeze({
  is(node) {
    return node.kind === "DropColumnNode";
  },
  create(column) {
    return freeze({
      kind: "DropColumnNode",
      column: ColumnNode.create(column)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/rename-column-node.js
var RenameColumnNode = freeze({
  is(node) {
    return node.kind === "RenameColumnNode";
  },
  create(column, newColumn) {
    return freeze({
      kind: "RenameColumnNode",
      column: ColumnNode.create(column),
      renameTo: ColumnNode.create(newColumn)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/util/prevent-await.js
function preventAwait(clazz, message) {
  Object.defineProperties(clazz.prototype, {
    then: {
      enumerable: false,
      value: () => {
        throw new Error(message);
      }
    }
  });
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/check-constraint-node.js
var CheckConstraintNode = freeze({
  is(node) {
    return node.kind === "CheckConstraintNode";
  },
  create(expression, constraintName) {
    return freeze({
      kind: "CheckConstraintNode",
      expression,
      name: constraintName ? IdentifierNode.create(constraintName) : void 0
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/select-all-node.js
var SelectAllNode = freeze({
  is(node) {
    return node.kind === "SelectAllNode";
  },
  create() {
    return freeze({
      kind: "SelectAllNode"
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/reference-node.js
var ReferenceNode = freeze({
  is(node) {
    return node.kind === "ReferenceNode";
  },
  create(table, column) {
    return freeze({
      kind: "ReferenceNode",
      table,
      column
    });
  },
  createSelectAll(table) {
    return freeze({
      kind: "ReferenceNode",
      table: TableNode.create(table),
      column: SelectAllNode.create()
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/references-node.js
var ReferencesNode = freeze({
  is(node) {
    return node.kind === "ReferencesNode";
  },
  create(table, columns) {
    return freeze({
      kind: "ReferencesNode",
      table,
      columns: freeze([...columns])
    });
  },
  cloneWithOnDelete(references, onDelete) {
    return freeze(__spreadProps(__spreadValues({}, references), {
      onDelete
    }));
  },
  cloneWithOnUpdate(references, onUpdate) {
    return freeze(__spreadProps(__spreadValues({}, references), {
      onUpdate
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js
var _dynamicReference;
var DynamicReferenceBuilder = class {
  constructor(reference) {
    __privateAdd(this, _dynamicReference, void 0);
    __privateSet(this, _dynamicReference, reference);
  }
  get dynamicReference() {
    return __privateGet(this, _dynamicReference);
  }
  get refType() {
    return void 0;
  }
  toOperationNode() {
    return parseStringReference(__privateGet(this, _dynamicReference));
  }
};
_dynamicReference = new WeakMap();
function isDynamicReferenceBuilder(obj) {
  return isObject(obj) && isOperationNodeSource(obj) && isString(obj.dynamicReference);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/reference-parser.js
function parseReferenceExpressionOrList(ctx, arg) {
  if (isReadonlyArray(arg)) {
    return arg.map((it) => parseReferenceExpression(ctx, it));
  } else {
    return [parseReferenceExpression(ctx, arg)];
  }
}
function parseReferenceExpression(ctx, exp) {
  if (isString(exp)) {
    return parseStringReference(exp);
  } else if (isDynamicReferenceBuilder(exp)) {
    return exp.toOperationNode();
  }
  return parseComplexExpression(ctx, exp);
}
function parseStringReference(ref) {
  const COLUMN_SEPARATOR = ".";
  if (ref.includes(COLUMN_SEPARATOR)) {
    const parts = ref.split(COLUMN_SEPARATOR).map(trim2);
    if (parts.length === 3) {
      return parseStringReferenceWithTableAndSchema(parts);
    } else if (parts.length === 2) {
      return parseStringReferenceWithTable(parts);
    } else {
      throw new Error(`invalid column reference ${ref}`);
    }
  } else {
    return ColumnNode.create(ref);
  }
}
function parseAliasedStringReference(ref) {
  const ALIAS_SEPARATOR = " as ";
  if (ref.includes(ALIAS_SEPARATOR)) {
    const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim2);
    return AliasNode.create(parseStringReference(columnRef), alias);
  } else {
    return parseStringReference(ref);
  }
}
function parseColumnName(column) {
  return ColumnNode.create(column);
}
function parseStringReferenceWithTableAndSchema(parts) {
  const [schema, table, column] = parts;
  return ReferenceNode.create(TableNode.createWithSchema(schema, table), ColumnNode.create(column));
}
function parseStringReferenceWithTable(parts) {
  const [table, column] = parts;
  return ReferenceNode.create(TableNode.create(table), ColumnNode.create(column));
}
function trim2(str) {
  return str.trim();
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/value-node.js
var ValueNode = freeze({
  is(node) {
    return node.kind === "ValueNode";
  },
  create(value) {
    return freeze({
      kind: "ValueNode",
      value
    });
  },
  createImmediate(value) {
    return freeze({
      kind: "ValueNode",
      value,
      immediate: true
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/raw-node.js
var RawNode = freeze({
  is(node) {
    return node.kind === "RawNode";
  },
  create(sqlFragments, params) {
    return freeze({
      kind: "RawNode",
      sqlFragments: freeze(sqlFragments),
      params: freeze(params)
    });
  },
  createWithSql(sql) {
    return RawNode.create([sql], []);
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/util/random-string.js
var CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
function randomString(length) {
  let chars = "";
  for (let i = 0; i < length; ++i) {
    chars += randomChar();
  }
  return chars;
}
function randomChar() {
  return CHARS[Math.floor(Math.random() * CHARS.length)];
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/util/query-id.js
function createQueryId() {
  return freeze({
    queryId: randomString(8)
  });
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-executor/query-executor.js
var NO_PLUGINS = freeze([]);
var _plugins, _transformResult, transformResult_fn;
var QueryExecutor = class {
  constructor(plugins) {
    __privateAdd(this, _transformResult);
    __privateAdd(this, _plugins, void 0);
    __privateSet(this, _plugins, plugins != null ? plugins : NO_PLUGINS);
  }
  get plugins() {
    return __privateGet(this, _plugins);
  }
  transformQuery(node, queryId) {
    for (const plugin of __privateGet(this, _plugins)) {
      const transformedNode = plugin.transformQuery({ node, queryId });
      if (transformedNode.kind === node.kind) {
        node = transformedNode;
      } else {
        throw new Error([
          `KyselyPlugin.transformQuery must return a node`,
          `of the same kind that was given to it.`,
          `The plugin was given a ${node.kind}`,
          `but it returned a ${transformedNode.kind}`
        ].join(" "));
      }
    }
    return node;
  }
  async executeQuery(compiledQuery, queryId) {
    const result = await this.executeQueryImpl(compiledQuery, queryId);
    return __privateMethod(this, _transformResult, transformResult_fn).call(this, result, queryId);
  }
};
_plugins = new WeakMap();
_transformResult = new WeakSet();
transformResult_fn = async function(result, queryId) {
  for (const plugin of __privateGet(this, _plugins)) {
    result = await plugin.transformResult({ result, queryId });
  }
  return result;
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-executor/noop-query-executor.js
var NoopQueryExecutor = class extends QueryExecutor {
  compileQuery() {
    throw new Error("this query cannot be compiled to SQL");
  }
  async executeQueryImpl() {
    throw new Error("this query cannot be executed");
  }
  withConnectionProvider() {
    throw new Error("this query cannot have a connection provider");
  }
  withPlugin(plugin) {
    return new NoopQueryExecutor([...this.plugins, plugin]);
  }
  withPluginAtFront(plugin) {
    return new NoopQueryExecutor([plugin, ...this.plugins]);
  }
  withoutPlugins() {
    return new NoopQueryExecutor([]);
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/raw-builder/raw-builder.js
var _props;
var _RawBuilder = class {
  constructor(props) {
    __privateAdd(this, _props, void 0);
    var _a, _b;
    __privateSet(this, _props, freeze({
      queryId: (_a = props.queryId) != null ? _a : createQueryId(),
      executor: (_b = props.executor) != null ? _b : new NoopQueryExecutor(),
      sql: props.sql,
      parameters: props.parameters
    }));
  }
  as(alias) {
    return new AliasedRawBuilder(this, alias);
  }
  castTo() {
    return new _RawBuilder(__spreadValues({}, __privateGet(this, _props)));
  }
  withPlugin(plugin) {
    return new _RawBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props)), {
      executor: __privateGet(this, _props).executor.withPlugin(plugin)
    }));
  }
  toOperationNode() {
    var _a;
    const parameterPlaceholderRegex = /(\?\??)/g;
    const sql = __privateGet(this, _props).sql;
    const parameters = (_a = __privateGet(this, _props).parameters) != null ? _a : [];
    const sqlFragments = [];
    const argNodes = [];
    let paramIdx = 0;
    let sqlIdx = 0;
    let match = null;
    while (match = parameterPlaceholderRegex.exec(sql)) {
      const str = match[1];
      if (paramIdx >= parameters.length) {
        throw new Error(`value not provided for all placeholders in string ${sql}`);
      }
      if (match.index > 0 && sql[match.index - 1] === "\\") {
        continue;
      }
      sqlFragments.push(sql.slice(sqlIdx, match.index).replace(/\\\?/g, "?"));
      argNodes.push(parseRawArg(str, parameters[paramIdx]));
      sqlIdx = match.index + str.length;
      ++paramIdx;
    }
    sqlFragments.push(sql.slice(sqlIdx));
    const rawNode = RawNode.create(sqlFragments, argNodes);
    return __privateGet(this, _props).executor.transformQuery(rawNode, __privateGet(this, _props).queryId);
  }
  compile() {
    return __privateGet(this, _props).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props).queryId);
  }
  async execute() {
    return __privateGet(this, _props).executor.executeQuery(this.compile(), __privateGet(this, _props).queryId);
  }
};
var RawBuilder = _RawBuilder;
_props = new WeakMap();
preventAwait(RawBuilder, "don't await RawBuilder instances directly. To execute the query you need to call `execute`");
var _rawBuilder, _alias;
var AliasedRawBuilder = class {
  constructor(rawBuilder, alias) {
    __privateAdd(this, _rawBuilder, void 0);
    __privateAdd(this, _alias, void 0);
    __privateSet(this, _rawBuilder, rawBuilder);
    __privateSet(this, _alias, alias);
  }
  get alias() {
    return __privateGet(this, _alias);
  }
  toOperationNode() {
    return AliasNode.create(__privateGet(this, _rawBuilder).toOperationNode(), __privateGet(this, _alias));
  }
};
_rawBuilder = new WeakMap();
_alias = new WeakMap();
function parseRawArg(match, arg) {
  if (isOperationNodeSource(arg)) {
    return arg.toOperationNode();
  } else if (match === "??") {
    return parseStringReference(arg);
  } else {
    return ValueNode.create(arg);
  }
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/default-value-parser.js
function parseDefaultValueExpression(value) {
  return value instanceof RawBuilder ? value.toOperationNode() : ValueNode.createImmediate(value);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/generated-node.js
var GeneratedNode = freeze({
  is(node) {
    return node.kind === "GeneratedNode";
  },
  create(params) {
    return freeze(__spreadValues({
      kind: "GeneratedNode"
    }, params));
  },
  createWithExpression(expression) {
    return freeze({
      kind: "GeneratedNode",
      always: true,
      expression
    });
  },
  cloneWith(node, params) {
    return freeze(__spreadValues(__spreadValues({}, node), params));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/default-value-node.js
var DefaultValueNode = freeze({
  is(node) {
    return node.kind === "DefaultValueNode";
  },
  create(defaultValue) {
    return freeze({
      kind: "DefaultValueNode",
      defaultValue
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/column-definition-builder.js
var _node;
var _ColumnDefinitionBuilder = class {
  constructor(node) {
    __privateAdd(this, _node, void 0);
    __privateSet(this, _node, node);
  }
  autoIncrement() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), { autoIncrement: true }));
  }
  primaryKey() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), { primaryKey: true }));
  }
  references(ref) {
    const references = parseStringReference(ref);
    if (!ReferenceNode.is(references) || SelectAllNode.is(references.column)) {
      throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);
    }
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      references: ReferencesNode.create(references.table, [
        references.column
      ])
    }));
  }
  onDelete(onDelete) {
    if (!__privateGet(this, _node).references) {
      throw new Error("on delete constraint can only be added for foreign keys");
    }
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      references: ReferencesNode.cloneWithOnDelete(__privateGet(this, _node).references, onDelete)
    }));
  }
  onUpdate(onUpdate) {
    if (!__privateGet(this, _node).references) {
      throw new Error("on update constraint can only be added for foreign keys");
    }
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      references: ReferencesNode.cloneWithOnUpdate(__privateGet(this, _node).references, onUpdate)
    }));
  }
  unique() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), { unique: true }));
  }
  notNull() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), { notNull: true }));
  }
  unsigned() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), { unsigned: true }));
  }
  defaultTo(value) {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      defaultTo: DefaultValueNode.create(parseDefaultValueExpression(value))
    }));
  }
  check(expression) {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      check: CheckConstraintNode.create(expression.toOperationNode())
    }));
  }
  generatedAlwaysAs(expression) {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      generated: GeneratedNode.createWithExpression(expression.toOperationNode())
    }));
  }
  generatedAlwaysAsIdentity() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      generated: GeneratedNode.create({ identity: true, always: true })
    }));
  }
  generatedByDefaultAsIdentity() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      generated: GeneratedNode.create({ identity: true, byDefault: true })
    }));
  }
  stored() {
    if (!__privateGet(this, _node).generated) {
      throw new Error("stored() can only be called after generatedAlwaysAs");
    }
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(__privateGet(this, _node), {
      generated: GeneratedNode.cloneWith(__privateGet(this, _node).generated, {
        stored: true
      })
    }));
  }
  toOperationNode() {
    return __privateGet(this, _node);
  }
};
var ColumnDefinitionBuilder = _ColumnDefinitionBuilder;
_node = new WeakMap();
preventAwait(ColumnDefinitionBuilder, "don't await ColumnDefinitionBuilder instances directly.");

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/modify-column-node.js
var ModifyColumnNode = freeze({
  is(node) {
    return node.kind === "ModifyColumnNode";
  },
  create(column) {
    return freeze({
      kind: "ModifyColumnNode",
      column
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/data-type-parser.js
function parseDataTypeExpression(dataType) {
  return isOperationNodeSource(dataType) ? dataType.toOperationNode() : DataTypeNode.create(dataType);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/foreign-key-constraint-node.js
var ForeignKeyConstraintNode = freeze({
  is(node) {
    return node.kind === "ForeignKeyConstraintNode";
  },
  create(sourceColumns, targetTable, targetColumns, constraintName) {
    return freeze({
      kind: "ForeignKeyConstraintNode",
      columns: sourceColumns,
      references: ReferencesNode.create(targetTable, targetColumns),
      name: constraintName ? IdentifierNode.create(constraintName) : void 0
    });
  },
  cloneWith(node, props) {
    return freeze(__spreadValues(__spreadValues({}, node), props));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js
var _node2;
var _ForeignKeyConstraintBuilder = class {
  constructor(node) {
    __privateAdd(this, _node2, void 0);
    __privateSet(this, _node2, node);
  }
  onDelete(onDelete) {
    return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(__privateGet(this, _node2), {
      onDelete
    }));
  }
  onUpdate(onUpdate) {
    return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(__privateGet(this, _node2), {
      onUpdate
    }));
  }
  toOperationNode() {
    return __privateGet(this, _node2);
  }
};
var ForeignKeyConstraintBuilder = _ForeignKeyConstraintBuilder;
_node2 = new WeakMap();
preventAwait(ForeignKeyConstraintBuilder, "don't await ForeignKeyConstraintBuilder instances directly.");

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/add-constraint-node.js
var AddConstraintNode = freeze({
  is(node) {
    return node.kind === "AddConstraintNode";
  },
  create(constraint) {
    return freeze({
      kind: "AddConstraintNode",
      constraint
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/unique-constraint-node.js
var UniqueConstraintNode = freeze({
  is(node) {
    return node.kind === "UniqueConstraintNode";
  },
  create(columns, constraintName) {
    return freeze({
      kind: "UniqueConstraintNode",
      columns: freeze(columns.map(ColumnNode.create)),
      name: constraintName ? IdentifierNode.create(constraintName) : void 0
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/alter-table-builder.js
var _props2;
var AlterTableBuilder = class {
  constructor(props) {
    __privateAdd(this, _props2, void 0);
    __privateSet(this, _props2, freeze(props));
  }
  renameTo(newTableName) {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props2).alterTableNode, {
        renameTo: parseTable(newTableName)
      })
    }));
  }
  setSchema(newSchema) {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props2).alterTableNode, {
        setSchema: IdentifierNode.create(newSchema)
      })
    }));
  }
  alterColumn(column) {
    return new AlterColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      alterColumnNode: AlterColumnNode.create(column)
    }));
  }
  dropColumn(column) {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props2).alterTableNode, {
        dropColumn: DropColumnNode.create(column)
      })
    }));
  }
  renameColumn(column, newColumn) {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props2).alterTableNode, {
        renameColumn: RenameColumnNode.create(column, newColumn)
      })
    }));
  }
  addColumn(columnName, dataType) {
    return new AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      columnBuilder: new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType)))
    }));
  }
  modifyColumn(columnName, dataType) {
    return new AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      columnBuilder: new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType)))
    }));
  }
  addUniqueConstraint(constraintName, columns) {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props2).alterTableNode, {
        addConstraint: AddConstraintNode.create(UniqueConstraintNode.create(columns, constraintName))
      })
    }));
  }
  addCheckConstraint(constraintName, checkExpression) {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props2).alterTableNode, {
        addConstraint: AddConstraintNode.create(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName))
      })
    }));
  }
  addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns) {
    return new AlterTableAddForeignKeyConstraintBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props2)), {
      constraintBuilder: new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName))
    }));
  }
};
_props2 = new WeakMap();
var _props3;
var AlterColumnBuilder = class {
  constructor(props) {
    __privateAdd(this, _props3, void 0);
    __privateSet(this, _props3, freeze(props));
  }
  setDataType(dataType) {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props3)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props3).alterTableNode, {
        alterColumn: AlterColumnNode.cloneWith(__privateGet(this, _props3).alterColumnNode, {
          dataType: DataTypeNode.create(dataType)
        })
      })
    }));
  }
  setDefault(value) {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props3)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props3).alterTableNode, {
        alterColumn: AlterColumnNode.cloneWith(__privateGet(this, _props3).alterColumnNode, {
          setDefault: parseDefaultValueExpression(value)
        })
      })
    }));
  }
  dropDefault() {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props3)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props3).alterTableNode, {
        alterColumn: AlterColumnNode.cloneWith(__privateGet(this, _props3).alterColumnNode, {
          dropDefault: true
        })
      })
    }));
  }
  setNotNull() {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props3)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props3).alterTableNode, {
        alterColumn: AlterColumnNode.cloneWith(__privateGet(this, _props3).alterColumnNode, {
          setNotNull: true
        })
      })
    }));
  }
  dropNotNull() {
    return new AlterTableExecutor(__spreadProps(__spreadValues({}, __privateGet(this, _props3)), {
      alterTableNode: AlterTableNode.cloneWith(__privateGet(this, _props3).alterTableNode, {
        alterColumn: AlterColumnNode.cloneWith(__privateGet(this, _props3).alterColumnNode, {
          dropNotNull: true
        })
      })
    }));
  }
};
_props3 = new WeakMap();
var _props4;
var AlterTableExecutor = class {
  constructor(props) {
    __privateAdd(this, _props4, void 0);
    __privateSet(this, _props4, freeze(props));
  }
  toOperationNode() {
    return __privateGet(this, _props4).executor.transformQuery(__privateGet(this, _props4).alterTableNode, __privateGet(this, _props4).queryId);
  }
  compile() {
    return __privateGet(this, _props4).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props4).queryId);
  }
  async execute() {
    await __privateGet(this, _props4).executor.executeQuery(this.compile(), __privateGet(this, _props4).queryId);
  }
};
_props4 = new WeakMap();
var _props5;
var _AlterTableAddColumnBuilder = class {
  constructor(props) {
    __privateAdd(this, _props5, void 0);
    __privateSet(this, _props5, freeze(props));
  }
  autoIncrement() {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.autoIncrement()
    }));
  }
  primaryKey() {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.primaryKey()
    }));
  }
  references(ref) {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.references(ref)
    }));
  }
  onDelete(onDelete) {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.onDelete(onDelete)
    }));
  }
  onUpdate(onDelete) {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.onUpdate(onDelete)
    }));
  }
  unique() {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.unique()
    }));
  }
  notNull() {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.notNull()
    }));
  }
  unsigned() {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.unsigned()
    }));
  }
  defaultTo(value) {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.defaultTo(value)
    }));
  }
  check(expression) {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.check(expression)
    }));
  }
  generatedAlwaysAs(expression) {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.generatedAlwaysAs(expression)
    }));
  }
  generatedAlwaysAsIdentity() {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.generatedAlwaysAsIdentity()
    }));
  }
  generatedByDefaultAsIdentity() {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.generatedByDefaultAsIdentity()
    }));
  }
  stored() {
    return new _AlterTableAddColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props5)), {
      columnBuilder: __privateGet(this, _props5).columnBuilder.stored()
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props5).executor.transformQuery(AlterTableNode.cloneWith(__privateGet(this, _props5).alterTableNode, {
      addColumn: AddColumnNode.create(__privateGet(this, _props5).columnBuilder.toOperationNode())
    }), __privateGet(this, _props5).queryId);
  }
  compile() {
    return __privateGet(this, _props5).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props5).queryId);
  }
  async execute() {
    await __privateGet(this, _props5).executor.executeQuery(this.compile(), __privateGet(this, _props5).queryId);
  }
};
var AlterTableAddColumnBuilder = _AlterTableAddColumnBuilder;
_props5 = new WeakMap();
var _props6;
var _AlterTableModifyColumnBuilder = class {
  constructor(props) {
    __privateAdd(this, _props6, void 0);
    __privateSet(this, _props6, freeze(props));
  }
  autoIncrement() {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.autoIncrement()
    }));
  }
  primaryKey() {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.primaryKey()
    }));
  }
  references(ref) {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.references(ref)
    }));
  }
  onDelete(onDelete) {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.onDelete(onDelete)
    }));
  }
  onUpdate(onUpdate) {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.onUpdate(onUpdate)
    }));
  }
  unique() {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.unique()
    }));
  }
  notNull() {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.notNull()
    }));
  }
  unsigned() {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.unsigned()
    }));
  }
  defaultTo(value) {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.defaultTo(value)
    }));
  }
  check(expression) {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.check(expression)
    }));
  }
  generatedAlwaysAs(expression) {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.generatedAlwaysAs(expression)
    }));
  }
  generatedAlwaysAsIdentity() {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.generatedAlwaysAsIdentity()
    }));
  }
  generatedByDefaultAsIdentity() {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.generatedByDefaultAsIdentity()
    }));
  }
  stored() {
    return new _AlterTableModifyColumnBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props6)), {
      columnBuilder: __privateGet(this, _props6).columnBuilder.stored()
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props6).executor.transformQuery(AlterTableNode.cloneWith(__privateGet(this, _props6).alterTableNode, {
      modifyColumn: ModifyColumnNode.create(__privateGet(this, _props6).columnBuilder.toOperationNode())
    }), __privateGet(this, _props6).queryId);
  }
  compile() {
    return __privateGet(this, _props6).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props6).queryId);
  }
  async execute() {
    await __privateGet(this, _props6).executor.executeQuery(this.compile(), __privateGet(this, _props6).queryId);
  }
};
var AlterTableModifyColumnBuilder = _AlterTableModifyColumnBuilder;
_props6 = new WeakMap();
var _props7;
var _AlterTableAddForeignKeyConstraintBuilder = class {
  constructor(props) {
    __privateAdd(this, _props7, void 0);
    __privateSet(this, _props7, freeze(props));
  }
  onDelete(onDelete) {
    return new _AlterTableAddForeignKeyConstraintBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props7)), {
      constraintBuilder: __privateGet(this, _props7).constraintBuilder.onDelete(onDelete)
    }));
  }
  onUpdate(onUpdate) {
    return new _AlterTableAddForeignKeyConstraintBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props7)), {
      constraintBuilder: __privateGet(this, _props7).constraintBuilder.onUpdate(onUpdate)
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props7).executor.transformQuery(AlterTableNode.cloneWith(__privateGet(this, _props7).alterTableNode, {
      addConstraint: AddConstraintNode.create(__privateGet(this, _props7).constraintBuilder.toOperationNode())
    }), __privateGet(this, _props7).queryId);
  }
  compile() {
    return __privateGet(this, _props7).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props7).queryId);
  }
  async execute() {
    await __privateGet(this, _props7).executor.executeQuery(this.compile(), __privateGet(this, _props7).queryId);
  }
};
var AlterTableAddForeignKeyConstraintBuilder = _AlterTableAddForeignKeyConstraintBuilder;
_props7 = new WeakMap();
preventAwait(AlterTableBuilder, "don't await AlterTableBuilder instances");
preventAwait(AlterColumnBuilder, "don't await AlterColumnBuilder instances");
preventAwait(AlterTableExecutor, "don't await AlterTableExecutor instances directly. To execute the query you need to call `execute`");
preventAwait(AlterTableAddColumnBuilder, "don't await AlterTableAddColumnBuilder instances directly. To execute the query you need to call `execute`");
preventAwait(AlterTableModifyColumnBuilder, "don't await AlterTableModifyColumnBuilder instances directly. To execute the query you need to call `execute`");
preventAwait(AlterTableAddForeignKeyConstraintBuilder, "don't await AlterTableAddForeignKeyConstraintBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/list-node.js
var ListNode = freeze({
  is(node) {
    return node.kind === "ListNode";
  },
  create(items) {
    return freeze({
      kind: "ListNode",
      items: freeze(items)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/create-index-builder.js
var _props8;
var _CreateIndexBuilder = class {
  constructor(props) {
    __privateAdd(this, _props8, void 0);
    __privateSet(this, _props8, freeze(props));
  }
  unique() {
    return new _CreateIndexBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props8)), {
      createIndexNode: CreateIndexNode.cloneWith(__privateGet(this, _props8).createIndexNode, {
        unique: true
      })
    }));
  }
  on(table) {
    return new _CreateIndexBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props8)), {
      createIndexNode: CreateIndexNode.cloneWith(__privateGet(this, _props8).createIndexNode, {
        table: parseTable(table)
      })
    }));
  }
  column(column) {
    return new _CreateIndexBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props8)), {
      createIndexNode: CreateIndexNode.cloneWith(__privateGet(this, _props8).createIndexNode, {
        expression: parseColumnName(column)
      })
    }));
  }
  columns(columns) {
    return new _CreateIndexBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props8)), {
      createIndexNode: CreateIndexNode.cloneWith(__privateGet(this, _props8).createIndexNode, {
        expression: ListNode.create(columns.map(parseColumnName))
      })
    }));
  }
  expression(expression) {
    return new _CreateIndexBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props8)), {
      createIndexNode: CreateIndexNode.cloneWith(__privateGet(this, _props8).createIndexNode, {
        expression: expression.toOperationNode()
      })
    }));
  }
  using(indexType) {
    return new _CreateIndexBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props8)), {
      createIndexNode: CreateIndexNode.cloneWith(__privateGet(this, _props8).createIndexNode, {
        using: RawNode.createWithSql(indexType)
      })
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props8).executor.transformQuery(__privateGet(this, _props8).createIndexNode, __privateGet(this, _props8).queryId);
  }
  compile() {
    return __privateGet(this, _props8).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props8).queryId);
  }
  async execute() {
    await __privateGet(this, _props8).executor.executeQuery(this.compile(), __privateGet(this, _props8).queryId);
  }
};
var CreateIndexBuilder = _CreateIndexBuilder;
_props8 = new WeakMap();
preventAwait(CreateIndexBuilder, "don't await CreateIndexBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/create-schema-builder.js
var _props9;
var _CreateSchemaBuilder = class {
  constructor(props) {
    __privateAdd(this, _props9, void 0);
    __privateSet(this, _props9, freeze(props));
  }
  ifNotExists() {
    return new _CreateSchemaBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props9)), {
      createSchemaNode: CreateSchemaNode.cloneWith(__privateGet(this, _props9).createSchemaNode, { ifNotExists: true })
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props9).executor.transformQuery(__privateGet(this, _props9).createSchemaNode, __privateGet(this, _props9).queryId);
  }
  compile() {
    return __privateGet(this, _props9).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props9).queryId);
  }
  async execute() {
    await __privateGet(this, _props9).executor.executeQuery(this.compile(), __privateGet(this, _props9).queryId);
  }
};
var CreateSchemaBuilder = _CreateSchemaBuilder;
_props9 = new WeakMap();
preventAwait(CreateSchemaBuilder, "don't await CreateSchemaBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/primary-constraint-node.js
var PrimaryConstraintNode = freeze({
  is(node) {
    return node.kind === "PrimaryKeyConstraintNode";
  },
  create(columns, constraintName) {
    return freeze({
      kind: "PrimaryKeyConstraintNode",
      columns: freeze(columns.map(ColumnNode.create)),
      name: constraintName ? IdentifierNode.create(constraintName) : void 0
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/create-table-builder.js
var _props10;
var _CreateTableBuilder = class {
  constructor(props) {
    __privateAdd(this, _props10, void 0);
    __privateSet(this, _props10, freeze(props));
  }
  temporary() {
    return new _CreateTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props10)), {
      createTableNode: CreateTableNode.cloneWith(__privateGet(this, _props10).createTableNode, {
        temporary: true
      })
    }));
  }
  onCommit(onCommit) {
    return new _CreateTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props10)), {
      createTableNode: CreateTableNode.cloneWith(__privateGet(this, _props10).createTableNode, {
        onCommit
      })
    }));
  }
  ifNotExists() {
    return new _CreateTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props10)), {
      createTableNode: CreateTableNode.cloneWith(__privateGet(this, _props10).createTableNode, {
        ifNotExists: true
      })
    }));
  }
  addColumn(columnName, dataType, build = noop) {
    const columnBuilder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
    return new _CreateTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props10)), {
      createTableNode: CreateTableNode.cloneWithColumn(__privateGet(this, _props10).createTableNode, columnBuilder.toOperationNode())
    }));
  }
  addPrimaryKeyConstraint(constraintName, columns) {
    return new _CreateTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props10)), {
      createTableNode: CreateTableNode.cloneWithConstraint(__privateGet(this, _props10).createTableNode, PrimaryConstraintNode.create(columns, constraintName))
    }));
  }
  addUniqueConstraint(constraintName, columns) {
    return new _CreateTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props10)), {
      createTableNode: CreateTableNode.cloneWithConstraint(__privateGet(this, _props10).createTableNode, UniqueConstraintNode.create(columns, constraintName))
    }));
  }
  addCheckConstraint(constraintName, checkExpression) {
    return new _CreateTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props10)), {
      createTableNode: CreateTableNode.cloneWithConstraint(__privateGet(this, _props10).createTableNode, CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName))
    }));
  }
  addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {
    const builder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));
    return new _CreateTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props10)), {
      createTableNode: CreateTableNode.cloneWithConstraint(__privateGet(this, _props10).createTableNode, builder.toOperationNode())
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props10).executor.transformQuery(__privateGet(this, _props10).createTableNode, __privateGet(this, _props10).queryId);
  }
  compile() {
    return __privateGet(this, _props10).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props10).queryId);
  }
  async execute() {
    await __privateGet(this, _props10).executor.executeQuery(this.compile(), __privateGet(this, _props10).queryId);
  }
};
var CreateTableBuilder = _CreateTableBuilder;
_props10 = new WeakMap();
preventAwait(CreateTableBuilder, "don't await CreateTableBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/drop-index-builder.js
var _props11;
var _DropIndexBuilder = class {
  constructor(props) {
    __privateAdd(this, _props11, void 0);
    __privateSet(this, _props11, freeze(props));
  }
  on(table) {
    return new _DropIndexBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props11)), {
      dropIndexNode: DropIndexNode.cloneWith(__privateGet(this, _props11).dropIndexNode, {
        table: parseTable(table)
      })
    }));
  }
  ifExists() {
    return new _DropIndexBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props11)), {
      dropIndexNode: DropIndexNode.cloneWith(__privateGet(this, _props11).dropIndexNode, {
        ifExists: true
      })
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props11).executor.transformQuery(__privateGet(this, _props11).dropIndexNode, __privateGet(this, _props11).queryId);
  }
  compile() {
    return __privateGet(this, _props11).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props11).queryId);
  }
  async execute() {
    await __privateGet(this, _props11).executor.executeQuery(this.compile(), __privateGet(this, _props11).queryId);
  }
};
var DropIndexBuilder = _DropIndexBuilder;
_props11 = new WeakMap();
preventAwait(DropIndexBuilder, "don't await DropIndexBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/drop-schema-builder.js
var _props12;
var _DropSchemaBuilder = class {
  constructor(props) {
    __privateAdd(this, _props12, void 0);
    __privateSet(this, _props12, freeze(props));
  }
  ifExists() {
    return new _DropSchemaBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props12)), {
      dropSchemaNode: DropSchemaNode.cloneWith(__privateGet(this, _props12).dropSchemaNode, {
        ifExists: true
      })
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props12).executor.transformQuery(__privateGet(this, _props12).dropSchemaNode, __privateGet(this, _props12).queryId);
  }
  compile() {
    return __privateGet(this, _props12).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props12).queryId);
  }
  async execute() {
    await __privateGet(this, _props12).executor.executeQuery(this.compile(), __privateGet(this, _props12).queryId);
  }
};
var DropSchemaBuilder = _DropSchemaBuilder;
_props12 = new WeakMap();
preventAwait(DropSchemaBuilder, "don't await DropSchemaBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/drop-table-builder.js
var _props13;
var _DropTableBuilder = class {
  constructor(props) {
    __privateAdd(this, _props13, void 0);
    __privateSet(this, _props13, freeze(props));
  }
  ifExists() {
    return new _DropTableBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props13)), {
      dropTableNode: DropTableNode.cloneWith(__privateGet(this, _props13).dropTableNode, {
        ifExists: true
      })
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props13).executor.transformQuery(__privateGet(this, _props13).dropTableNode, __privateGet(this, _props13).queryId);
  }
  compile() {
    return __privateGet(this, _props13).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props13).queryId);
  }
  async execute() {
    await __privateGet(this, _props13).executor.executeQuery(this.compile(), __privateGet(this, _props13).queryId);
  }
};
var DropTableBuilder = _DropTableBuilder;
_props13 = new WeakMap();
preventAwait(DropTableBuilder, "don't await DropTableBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js
var _transformers;
var OperationNodeTransformer = class {
  constructor() {
    __publicField(this, "nodeStack", []);
    __privateAdd(this, _transformers, freeze({
      AliasNode: this.transformAlias.bind(this),
      ColumnNode: this.transformColumn.bind(this),
      IdentifierNode: this.transformIdentifier.bind(this),
      RawNode: this.transformRaw.bind(this),
      ReferenceNode: this.transformReference.bind(this),
      SelectQueryNode: this.transformSelectQuery.bind(this),
      SelectionNode: this.transformSelection.bind(this),
      TableNode: this.transformTable.bind(this),
      FromNode: this.transformFrom.bind(this),
      SelectAllNode: this.transformSelectAll.bind(this),
      FilterNode: this.transformFilter.bind(this),
      AndNode: this.transformAnd.bind(this),
      OrNode: this.transformOr.bind(this),
      ValueNode: this.transformValue.bind(this),
      ValueListNode: this.transformValueList.bind(this),
      PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),
      ParensNode: this.transformParens.bind(this),
      JoinNode: this.transformJoin.bind(this),
      OperatorNode: this.transformOperator.bind(this),
      WhereNode: this.transformWhere.bind(this),
      InsertQueryNode: this.transformInsertQuery.bind(this),
      DeleteQueryNode: this.transformDeleteQuery.bind(this),
      ReturningNode: this.transformReturning.bind(this),
      CreateTableNode: this.transformCreateTable.bind(this),
      AddColumnNode: this.transformAddColumn.bind(this),
      ColumnDefinitionNode: this.transformColumnDefinition.bind(this),
      DropTableNode: this.transformDropTable.bind(this),
      DataTypeNode: this.transformDataType.bind(this),
      OrderByNode: this.transformOrderBy.bind(this),
      OrderByItemNode: this.transformOrderByItem.bind(this),
      GroupByNode: this.transformGroupBy.bind(this),
      GroupByItemNode: this.transformGroupByItem.bind(this),
      UpdateQueryNode: this.transformUpdateQuery.bind(this),
      ColumnUpdateNode: this.transformColumnUpdate.bind(this),
      LimitNode: this.transformLimit.bind(this),
      OffsetNode: this.transformOffset.bind(this),
      OnConflictNode: this.transformOnConflict.bind(this),
      OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),
      CreateIndexNode: this.transformCreateIndex.bind(this),
      DropIndexNode: this.transformDropIndex.bind(this),
      ListNode: this.transformList.bind(this),
      PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),
      UniqueConstraintNode: this.transformUniqueConstraint.bind(this),
      ReferencesNode: this.transformReferences.bind(this),
      CheckConstraintNode: this.transformCheckConstraint.bind(this),
      WithNode: this.transformWith.bind(this),
      CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),
      CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),
      HavingNode: this.transformHaving.bind(this),
      CreateSchemaNode: this.transformCreateSchema.bind(this),
      DropSchemaNode: this.transformDropSchema.bind(this),
      AlterTableNode: this.transformAlterTable.bind(this),
      DropColumnNode: this.transformDropColumn.bind(this),
      RenameColumnNode: this.transformRenameColumn.bind(this),
      AlterColumnNode: this.transformAlterColumn.bind(this),
      ModifyColumnNode: this.transformModifyColumn.bind(this),
      AddConstraintNode: this.transformAddConstraint.bind(this),
      DropConstraintNode: this.transformDropConstraint.bind(this),
      ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),
      UnionNode: this.transformUnion.bind(this),
      CreateViewNode: this.transformCreateView.bind(this),
      DropViewNode: this.transformDropView.bind(this),
      GeneratedNode: this.transformGenerated.bind(this),
      DefaultValueNode: this.transformDefaultValue.bind(this),
      OnNode: this.transformOn.bind(this),
      ValuesNode: this.transformValues.bind(this)
    }));
    __publicField(this, "transformNode", (node) => {
      if (!node) {
        return void 0;
      }
      this.nodeStack.push(node);
      const out = __privateGet(this, _transformers)[node.kind](node);
      this.nodeStack.pop();
      return freeze(out);
    });
  }
  transformNodeList(list) {
    if (!list) {
      return list;
    }
    return freeze(list.map(this.transformNode));
  }
  transformSelectQuery(node) {
    return {
      kind: "SelectQueryNode",
      from: this.transformNode(node.from),
      selections: this.transformNodeList(node.selections),
      distinctOnSelections: this.transformNodeList(node.distinctOnSelections),
      distinct: node.distinct,
      joins: this.transformNodeList(node.joins),
      groupBy: this.transformNode(node.groupBy),
      orderBy: this.transformNode(node.orderBy),
      where: this.transformNode(node.where),
      modifiers: node.modifiers,
      limit: this.transformNode(node.limit),
      offset: this.transformNode(node.offset),
      with: this.transformNode(node.with),
      having: this.transformNode(node.having),
      union: this.transformNodeList(node.union)
    };
  }
  transformSelection(node) {
    return {
      kind: "SelectionNode",
      selection: this.transformNode(node.selection)
    };
  }
  transformColumn(node) {
    return {
      kind: "ColumnNode",
      column: this.transformNode(node.column)
    };
  }
  transformAlias(node) {
    return {
      kind: "AliasNode",
      node: this.transformNode(node.node),
      alias: this.transformNode(node.alias)
    };
  }
  transformTable(node) {
    return {
      kind: "TableNode",
      schema: this.transformNode(node.schema),
      table: this.transformNode(node.table)
    };
  }
  transformFrom(node) {
    return {
      kind: "FromNode",
      froms: this.transformNodeList(node.froms)
    };
  }
  transformReference(node) {
    return {
      kind: "ReferenceNode",
      table: this.transformNode(node.table),
      column: this.transformNode(node.column)
    };
  }
  transformFilter(node) {
    return {
      kind: "FilterNode",
      left: this.transformNode(node.left),
      op: this.transformNode(node.op),
      right: this.transformNode(node.right)
    };
  }
  transformAnd(node) {
    return {
      kind: "AndNode",
      left: this.transformNode(node.left),
      right: this.transformNode(node.right)
    };
  }
  transformOr(node) {
    return {
      kind: "OrNode",
      left: this.transformNode(node.left),
      right: this.transformNode(node.right)
    };
  }
  transformValueList(node) {
    return {
      kind: "ValueListNode",
      values: this.transformNodeList(node.values)
    };
  }
  transformParens(node) {
    return {
      kind: "ParensNode",
      node: this.transformNode(node.node)
    };
  }
  transformJoin(node) {
    return {
      kind: "JoinNode",
      joinType: node.joinType,
      table: this.transformNode(node.table),
      on: this.transformNode(node.on)
    };
  }
  transformRaw(node) {
    return {
      kind: "RawNode",
      sqlFragments: freeze([...node.sqlFragments]),
      params: this.transformNodeList(node.params)
    };
  }
  transformWhere(node) {
    return {
      kind: "WhereNode",
      where: this.transformNode(node.where)
    };
  }
  transformInsertQuery(node) {
    return {
      kind: "InsertQueryNode",
      into: this.transformNode(node.into),
      columns: this.transformNodeList(node.columns),
      values: this.transformNode(node.values),
      returning: this.transformNode(node.returning),
      onConflict: this.transformNode(node.onConflict),
      onDuplicateKey: this.transformNode(node.onDuplicateKey),
      with: this.transformNode(node.with),
      ignore: node.ignore
    };
  }
  transformValues(node) {
    return {
      kind: "ValuesNode",
      values: this.transformNodeList(node.values)
    };
  }
  transformDeleteQuery(node) {
    return {
      kind: "DeleteQueryNode",
      from: this.transformNode(node.from),
      joins: this.transformNodeList(node.joins),
      where: this.transformNode(node.where),
      returning: this.transformNode(node.returning),
      with: this.transformNode(node.with)
    };
  }
  transformReturning(node) {
    return {
      kind: "ReturningNode",
      selections: this.transformNodeList(node.selections)
    };
  }
  transformCreateTable(node) {
    return {
      kind: "CreateTableNode",
      table: this.transformNode(node.table),
      columns: this.transformNodeList(node.columns),
      constraints: this.transformNodeList(node.constraints),
      temporary: node.temporary,
      ifNotExists: node.ifNotExists,
      onCommit: node.onCommit
    };
  }
  transformColumnDefinition(node) {
    return {
      kind: "ColumnDefinitionNode",
      column: this.transformNode(node.column),
      dataType: this.transformNode(node.dataType),
      references: this.transformNode(node.references),
      primaryKey: node.primaryKey,
      autoIncrement: node.autoIncrement,
      unique: node.unique,
      notNull: node.notNull,
      unsigned: node.unsigned,
      defaultTo: this.transformNode(node.defaultTo),
      check: this.transformNode(node.check),
      generated: this.transformNode(node.generated)
    };
  }
  transformAddColumn(node) {
    return {
      kind: "AddColumnNode",
      column: this.transformNode(node.column)
    };
  }
  transformDropTable(node) {
    return {
      kind: "DropTableNode",
      table: this.transformNode(node.table),
      ifExists: node.ifExists
    };
  }
  transformOrderBy(node) {
    return {
      kind: "OrderByNode",
      items: this.transformNodeList(node.items)
    };
  }
  transformOrderByItem(node) {
    return {
      kind: "OrderByItemNode",
      orderBy: this.transformNode(node.orderBy),
      direction: this.transformNode(node.direction)
    };
  }
  transformGroupBy(node) {
    return {
      kind: "GroupByNode",
      items: this.transformNodeList(node.items)
    };
  }
  transformGroupByItem(node) {
    return {
      kind: "GroupByItemNode",
      groupBy: this.transformNode(node.groupBy)
    };
  }
  transformUpdateQuery(node) {
    return {
      kind: "UpdateQueryNode",
      table: this.transformNode(node.table),
      joins: this.transformNodeList(node.joins),
      where: this.transformNode(node.where),
      updates: this.transformNodeList(node.updates),
      returning: this.transformNode(node.returning),
      with: this.transformNode(node.with)
    };
  }
  transformColumnUpdate(node) {
    return {
      kind: "ColumnUpdateNode",
      column: this.transformNode(node.column),
      value: this.transformNode(node.value)
    };
  }
  transformLimit(node) {
    return {
      kind: "LimitNode",
      limit: this.transformNode(node.limit)
    };
  }
  transformOffset(node) {
    return {
      kind: "OffsetNode",
      offset: this.transformNode(node.offset)
    };
  }
  transformOnConflict(node) {
    return {
      kind: "OnConflictNode",
      columns: this.transformNodeList(node.columns),
      constraint: this.transformNode(node.constraint),
      indexExpression: this.transformNode(node.indexExpression),
      indexWhere: this.transformNode(node.indexWhere),
      updates: this.transformNodeList(node.updates),
      updateWhere: this.transformNode(node.updateWhere),
      doNothing: node.doNothing
    };
  }
  transformOnDuplicateKey(node) {
    return {
      kind: "OnDuplicateKeyNode",
      updates: this.transformNodeList(node.updates)
    };
  }
  transformCreateIndex(node) {
    return {
      kind: "CreateIndexNode",
      name: this.transformNode(node.name),
      table: this.transformNode(node.table),
      expression: this.transformNode(node.expression),
      unique: node.unique,
      using: this.transformNode(node.using)
    };
  }
  transformList(node) {
    return {
      kind: "ListNode",
      items: this.transformNodeList(node.items)
    };
  }
  transformDropIndex(node) {
    return {
      kind: "DropIndexNode",
      name: this.transformNode(node.name),
      table: this.transformNode(node.table),
      ifExists: node.ifExists
    };
  }
  transformPrimaryKeyConstraint(node) {
    return {
      kind: "PrimaryKeyConstraintNode",
      columns: this.transformNodeList(node.columns),
      name: this.transformNode(node.name)
    };
  }
  transformUniqueConstraint(node) {
    return {
      kind: "UniqueConstraintNode",
      columns: this.transformNodeList(node.columns),
      name: this.transformNode(node.name)
    };
  }
  transformForeignKeyConstraint(node) {
    return {
      kind: "ForeignKeyConstraintNode",
      columns: this.transformNodeList(node.columns),
      references: this.transformNode(node.references),
      name: this.transformNode(node.name),
      onDelete: node.onDelete,
      onUpdate: node.onUpdate
    };
  }
  transformUnion(node) {
    return {
      kind: "UnionNode",
      union: this.transformNode(node.union),
      all: node.all
    };
  }
  transformReferences(node) {
    return {
      kind: "ReferencesNode",
      table: this.transformNode(node.table),
      columns: this.transformNodeList(node.columns),
      onDelete: node.onDelete,
      onUpdate: node.onUpdate
    };
  }
  transformCheckConstraint(node) {
    return {
      kind: "CheckConstraintNode",
      expression: this.transformNode(node.expression),
      name: this.transformNode(node.name)
    };
  }
  transformWith(node) {
    return {
      kind: "WithNode",
      expressions: this.transformNodeList(node.expressions),
      recursive: node.recursive
    };
  }
  transformCommonTableExpression(node) {
    return {
      kind: "CommonTableExpressionNode",
      name: this.transformNode(node.name),
      expression: this.transformNode(node.expression)
    };
  }
  transformCommonTableExpressionName(node) {
    return {
      kind: "CommonTableExpressionNameNode",
      table: this.transformNode(node.table),
      columns: this.transformNodeList(node.columns)
    };
  }
  transformHaving(node) {
    return {
      kind: "HavingNode",
      having: this.transformNode(node.having)
    };
  }
  transformCreateSchema(node) {
    return {
      kind: "CreateSchemaNode",
      schema: this.transformNode(node.schema)
    };
  }
  transformDropSchema(node) {
    return {
      kind: "DropSchemaNode",
      schema: this.transformNode(node.schema),
      ifExists: node.ifExists
    };
  }
  transformAlterTable(node) {
    return {
      kind: "AlterTableNode",
      table: this.transformNode(node.table),
      renameTo: this.transformNode(node.renameTo),
      setSchema: this.transformNode(node.setSchema),
      renameColumn: this.transformNode(node.renameColumn),
      addColumn: this.transformNode(node.addColumn),
      dropColumn: this.transformNode(node.dropColumn),
      alterColumn: this.transformNode(node.alterColumn),
      modifyColumn: this.transformNode(node.modifyColumn),
      addConstraint: this.transformNode(node.addConstraint),
      dropConstraint: this.transformNode(node.dropConstraint)
    };
  }
  transformDropColumn(node) {
    return {
      kind: "DropColumnNode",
      column: this.transformNode(node.column)
    };
  }
  transformRenameColumn(node) {
    return {
      kind: "RenameColumnNode",
      column: this.transformNode(node.column),
      renameTo: this.transformNode(node.renameTo)
    };
  }
  transformAlterColumn(node) {
    return {
      kind: "AlterColumnNode",
      column: this.transformNode(node.column),
      dataType: this.transformNode(node.dataType),
      dataTypeExpression: this.transformNode(node.dataTypeExpression),
      setDefault: this.transformNode(node.setDefault),
      dropDefault: node.dropDefault,
      setNotNull: node.setNotNull,
      dropNotNull: node.dropNotNull
    };
  }
  transformModifyColumn(node) {
    return {
      kind: "ModifyColumnNode",
      column: this.transformNode(node.column)
    };
  }
  transformAddConstraint(node) {
    return {
      kind: "AddConstraintNode",
      constraint: this.transformNode(node.constraint)
    };
  }
  transformDropConstraint(node) {
    return {
      kind: "DropConstraintNode",
      constraintName: this.transformNode(node.constraintName)
    };
  }
  transformCreateView(node) {
    return {
      kind: "CreateViewNode",
      name: this.transformNode(node.name),
      temporary: node.temporary,
      orReplace: node.orReplace,
      ifNotExists: node.ifNotExists,
      materialized: node.materialized,
      columns: this.transformNodeList(node.columns),
      as: this.transformNode(node.as)
    };
  }
  transformDropView(node) {
    return {
      kind: "DropViewNode",
      name: this.transformNode(node.name),
      ifExists: node.ifExists,
      materialized: node.materialized
    };
  }
  transformGenerated(node) {
    return {
      kind: "GeneratedNode",
      byDefault: node.byDefault,
      always: node.always,
      identity: node.identity,
      stored: node.stored,
      expression: this.transformNode(node.expression)
    };
  }
  transformDefaultValue(node) {
    return {
      kind: "DefaultValueNode",
      defaultValue: this.transformNode(node.defaultValue)
    };
  }
  transformOn(node) {
    return {
      kind: "OnNode",
      on: this.transformNode(node.on)
    };
  }
  transformDataType(node) {
    return node;
  }
  transformSelectAll(node) {
    return node;
  }
  transformIdentifier(node) {
    return node;
  }
  transformValue(node) {
    return node;
  }
  transformPrimitiveValueList(node) {
    return node;
  }
  transformOperator(node) {
    return node;
  }
};
_transformers = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js
var _schema, _tables, _transformRoot, transformRoot_fn, _collectTables, collectTables_fn, _collectTablesFromTableExpressionNodes, collectTablesFromTableExpressionNodes_fn, _collectTablesFromJoins, collectTablesFromJoins_fn, _collectTablesFromTableExpressionNode, collectTablesFromTableExpressionNode_fn, _removeCommonTableExpressionTables, removeCommonTableExpressionTables_fn;
var WithSchemaTransformer = class extends OperationNodeTransformer {
  constructor(schema) {
    super();
    __privateAdd(this, _transformRoot);
    __privateAdd(this, _collectTables);
    __privateAdd(this, _collectTablesFromTableExpressionNodes);
    __privateAdd(this, _collectTablesFromJoins);
    __privateAdd(this, _collectTablesFromTableExpressionNode);
    __privateAdd(this, _removeCommonTableExpressionTables);
    __privateAdd(this, _schema, void 0);
    __privateAdd(this, _tables, new Set());
    __privateSet(this, _schema, schema);
  }
  transformSelectQuery(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformSelectQuery(node2));
  }
  transformInsertQuery(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformInsertQuery(node2));
  }
  transformUpdateQuery(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformUpdateQuery(node2));
  }
  transformDeleteQuery(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformDeleteQuery(node2));
  }
  transformCreateTable(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformCreateTable(node2));
  }
  transformDropTable(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformDropTable(node2));
  }
  transformCreateIndex(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformCreateIndex(node2));
  }
  transformDropIndex(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformDropIndex(node2));
  }
  transformCreateView(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformCreateView(node2));
  }
  transformDropView(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformDropView(node2));
  }
  transformAlterTable(node) {
    return __privateMethod(this, _transformRoot, transformRoot_fn).call(this, node, (node2) => super.transformAlterTable(node2));
  }
  transformTable(node) {
    const transformed = super.transformTable(node);
    if (transformed.schema || !__privateGet(this, _tables).has(node.table.identifier)) {
      return transformed;
    }
    return __spreadProps(__spreadValues({}, transformed), {
      schema: {
        kind: "IdentifierNode",
        identifier: __privateGet(this, _schema)
      }
    });
  }
};
_schema = new WeakMap();
_tables = new WeakMap();
_transformRoot = new WeakSet();
transformRoot_fn = function(node, transform) {
  const tables = __privateMethod(this, _collectTables, collectTables_fn).call(this, node);
  for (const table of tables) {
    __privateGet(this, _tables).add(table);
  }
  const transformed = transform(node);
  for (const table of tables) {
    __privateGet(this, _tables).delete(table);
  }
  return transformed;
};
_collectTables = new WeakSet();
collectTables_fn = function(node) {
  const tables = new Set();
  if ("from" in node && node.from) {
    __privateMethod(this, _collectTablesFromTableExpressionNodes, collectTablesFromTableExpressionNodes_fn).call(this, node.from.froms, tables);
  }
  if ("into" in node && node.into) {
    __privateMethod(this, _collectTablesFromTableExpressionNode, collectTablesFromTableExpressionNode_fn).call(this, node.into, tables);
  }
  if ("table" in node && node.table) {
    __privateMethod(this, _collectTablesFromTableExpressionNode, collectTablesFromTableExpressionNode_fn).call(this, node.table, tables);
  }
  if ("joins" in node && node.joins) {
    __privateMethod(this, _collectTablesFromJoins, collectTablesFromJoins_fn).call(this, node.joins, tables);
  }
  if ("with" in node && node.with) {
    __privateMethod(this, _removeCommonTableExpressionTables, removeCommonTableExpressionTables_fn).call(this, node.with, tables);
  }
  return tables;
};
_collectTablesFromTableExpressionNodes = new WeakSet();
collectTablesFromTableExpressionNodes_fn = function(nodes, tables) {
  for (const node of nodes) {
    __privateMethod(this, _collectTablesFromTableExpressionNode, collectTablesFromTableExpressionNode_fn).call(this, node, tables);
  }
};
_collectTablesFromJoins = new WeakSet();
collectTablesFromJoins_fn = function(nodes, tables) {
  for (const node of nodes) {
    __privateMethod(this, _collectTablesFromTableExpressionNode, collectTablesFromTableExpressionNode_fn).call(this, node.table, tables);
  }
};
_collectTablesFromTableExpressionNode = new WeakSet();
collectTablesFromTableExpressionNode_fn = function(node, tables) {
  const table = TableNode.is(node) ? node : AliasNode.is(node) && TableNode.is(node.node) ? node.node : null;
  if (table && !__privateGet(this, _tables).has(table.table.identifier)) {
    tables.add(table.table.identifier);
  }
};
_removeCommonTableExpressionTables = new WeakSet();
removeCommonTableExpressionTables_fn = function(node, tables) {
  for (const expr of node.expressions) {
    tables.delete(expr.name.table.table.identifier);
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js
var _transformer;
var WithSchemaPlugin = class {
  constructor(schema) {
    __privateAdd(this, _transformer, void 0);
    __privateSet(this, _transformer, new WithSchemaTransformer(schema));
  }
  transformQuery(args) {
    return __privateGet(this, _transformer).transformNode(args.node);
  }
  async transformResult(args) {
    return args.result;
  }
};
_transformer = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/create-view-node.js
var CreateViewNode = freeze({
  is(node) {
    return node.kind === "CreateViewNode";
  },
  create(name) {
    return freeze({
      kind: "CreateViewNode",
      name: IdentifierNode.create(name)
    });
  },
  cloneWith(createView, params) {
    return freeze(__spreadValues(__spreadValues({}, createView), params));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js
var ImmediateValueTransformer = class extends OperationNodeTransformer {
  transformValue(node) {
    return __spreadProps(__spreadValues({}, super.transformValue(node)), {
      immediate: true
    });
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js
var _transformer2;
var ImmediateValuePlugin = class {
  constructor() {
    __privateAdd(this, _transformer2, new ImmediateValueTransformer());
  }
  transformQuery(args) {
    return __privateGet(this, _transformer2).transformNode(args.node);
  }
  transformResult(args) {
    return Promise.resolve(args.result);
  }
};
_transformer2 = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/create-view-builder.js
var _props14;
var _CreateViewBuilder = class {
  constructor(props) {
    __privateAdd(this, _props14, void 0);
    __privateSet(this, _props14, freeze(props));
  }
  temporary() {
    return new _CreateViewBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props14)), {
      createViewNode: CreateViewNode.cloneWith(__privateGet(this, _props14).createViewNode, {
        temporary: true
      })
    }));
  }
  materialized() {
    return new _CreateViewBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props14)), {
      createViewNode: CreateViewNode.cloneWith(__privateGet(this, _props14).createViewNode, {
        materialized: true
      })
    }));
  }
  ifNotExists() {
    return new _CreateViewBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props14)), {
      createViewNode: CreateViewNode.cloneWith(__privateGet(this, _props14).createViewNode, {
        ifNotExists: true
      })
    }));
  }
  orReplace() {
    return new _CreateViewBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props14)), {
      createViewNode: CreateViewNode.cloneWith(__privateGet(this, _props14).createViewNode, {
        orReplace: true
      })
    }));
  }
  columns(columns) {
    return new _CreateViewBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props14)), {
      createViewNode: CreateViewNode.cloneWith(__privateGet(this, _props14).createViewNode, {
        columns: columns.map(parseColumnName)
      })
    }));
  }
  as(query) {
    const queryNode = query.withPlugin(new ImmediateValuePlugin()).toOperationNode();
    return new _CreateViewBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props14)), {
      createViewNode: CreateViewNode.cloneWith(__privateGet(this, _props14).createViewNode, {
        as: queryNode
      })
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props14).executor.transformQuery(__privateGet(this, _props14).createViewNode, __privateGet(this, _props14).queryId);
  }
  compile() {
    return __privateGet(this, _props14).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props14).queryId);
  }
  async execute() {
    await __privateGet(this, _props14).executor.executeQuery(this.compile(), __privateGet(this, _props14).queryId);
  }
};
var CreateViewBuilder = _CreateViewBuilder;
_props14 = new WeakMap();
preventAwait(CreateViewBuilder, "don't await CreateViewBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-view-node.js
var DropViewNode = freeze({
  is(node) {
    return node.kind === "DropViewNode";
  },
  create(name) {
    return freeze({
      kind: "DropViewNode",
      name: IdentifierNode.create(name)
    });
  },
  cloneWith(dropView, params) {
    return freeze(__spreadValues(__spreadValues({}, dropView), params));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/drop-view-builder.js
var _props15;
var _DropViewBuilder = class {
  constructor(props) {
    __privateAdd(this, _props15, void 0);
    __privateSet(this, _props15, freeze(props));
  }
  materialized() {
    return new _DropViewBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props15)), {
      dropViewNode: DropViewNode.cloneWith(__privateGet(this, _props15).dropViewNode, {
        materialized: true
      })
    }));
  }
  ifExists() {
    return new _DropViewBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props15)), {
      dropViewNode: DropViewNode.cloneWith(__privateGet(this, _props15).dropViewNode, {
        ifExists: true
      })
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props15).executor.transformQuery(__privateGet(this, _props15).dropViewNode, __privateGet(this, _props15).queryId);
  }
  compile() {
    return __privateGet(this, _props15).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props15).queryId);
  }
  async execute() {
    await __privateGet(this, _props15).executor.executeQuery(this.compile(), __privateGet(this, _props15).queryId);
  }
};
var DropViewBuilder = _DropViewBuilder;
_props15 = new WeakMap();
preventAwait(DropViewBuilder, "don't await DropViewBuilder instances directly. To execute the query you need to call `execute`");

// dist/RDS_migrator/node_modules/kysely/dist/esm/schema/schema.js
var _executor;
var _SchemaModule = class {
  constructor(executor) {
    __privateAdd(this, _executor, void 0);
    __privateSet(this, _executor, executor);
  }
  createTable(table) {
    return new CreateTableBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      createTableNode: CreateTableNode.create(parseTable(table))
    });
  }
  dropTable(table) {
    return new DropTableBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      dropTableNode: DropTableNode.create(parseTable(table))
    });
  }
  createIndex(indexName) {
    return new CreateIndexBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      createIndexNode: CreateIndexNode.create(indexName)
    });
  }
  dropIndex(indexName) {
    return new DropIndexBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      dropIndexNode: DropIndexNode.create(indexName)
    });
  }
  createSchema(schema) {
    return new CreateSchemaBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      createSchemaNode: CreateSchemaNode.create(schema)
    });
  }
  dropSchema(schema) {
    return new DropSchemaBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      dropSchemaNode: DropSchemaNode.create(schema)
    });
  }
  alterTable(table) {
    return new AlterTableBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      alterTableNode: AlterTableNode.create(table)
    });
  }
  createView(viewName) {
    return new CreateViewBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      createViewNode: CreateViewNode.create(viewName)
    });
  }
  dropView(viewName) {
    return new DropViewBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _executor),
      dropViewNode: DropViewNode.create(viewName)
    });
  }
  withSchema(schema) {
    return new _SchemaModule(__privateGet(this, _executor).withPluginAtFront(new WithSchemaPlugin(schema)));
  }
};
var SchemaModule = _SchemaModule;
_executor = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/dynamic/dynamic.js
var DynamicModule = class {
  ref(reference) {
    return new DynamicReferenceBuilder(reference);
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/driver/default-connection-provider.js
var _driver;
var DefaultConnectionProvider = class {
  constructor(driver) {
    __privateAdd(this, _driver, void 0);
    __privateSet(this, _driver, driver);
  }
  async withConnection(runner) {
    const connection = await __privateGet(this, _driver).acquireConnection();
    try {
      return await runner(connection);
    } finally {
      await __privateGet(this, _driver).releaseConnection(connection);
    }
  }
};
_driver = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/and-node.js
var AndNode = freeze({
  is(node) {
    return node.kind === "AndNode";
  },
  create(left, right) {
    return freeze({
      kind: "AndNode",
      left,
      right
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/or-node.js
var OrNode = freeze({
  is(node) {
    return node.kind === "OrNode";
  },
  create(left, right) {
    return freeze({
      kind: "OrNode",
      left,
      right
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/on-node.js
var OnNode = freeze({
  is(node) {
    return node.kind === "OnNode";
  },
  create(filter) {
    return freeze({
      kind: "OnNode",
      on: filter
    });
  },
  cloneWithFilter(onNode, op, filter) {
    return freeze(__spreadProps(__spreadValues({}, onNode), {
      on: op === "And" ? AndNode.create(onNode.on, filter) : OrNode.create(onNode.on, filter)
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/join-node.js
var JoinNode = freeze({
  is(node) {
    return node.kind === "JoinNode";
  },
  create(joinType, table) {
    return freeze({
      kind: "JoinNode",
      joinType,
      table,
      on: void 0
    });
  },
  createWithOn(joinType, table, on) {
    return freeze({
      kind: "JoinNode",
      joinType,
      table,
      on: OnNode.create(on)
    });
  },
  cloneWithOn(joinNode, filter) {
    return freeze(__spreadProps(__spreadValues({}, joinNode), {
      on: joinNode.on ? OnNode.cloneWithFilter(joinNode.on, "And", filter) : OnNode.create(filter)
    }));
  },
  cloneWithOrOn(joinNode, filter) {
    return freeze(__spreadProps(__spreadValues({}, joinNode), {
      on: joinNode.on ? OnNode.cloneWithFilter(joinNode.on, "Or", filter) : OnNode.create(filter)
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/filter-node.js
var FilterNode = freeze({
  is(node) {
    return node.kind === "FilterNode";
  },
  create(left, op, right) {
    return freeze({
      kind: "FilterNode",
      left,
      op,
      right
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/operator-node.js
var OPERATORS = [
  "=",
  "==",
  "!=",
  "<>",
  ">",
  ">=",
  "<",
  "<=",
  "in",
  "not in",
  "is",
  "is not",
  "like",
  "not like",
  "ilike",
  "not ilike",
  "@>",
  "<@",
  "?",
  "?",
  "?&",
  "!<",
  "!>",
  "<=>",
  "!~",
  "~",
  "~*",
  "!~*",
  "exists",
  "not exists",
  "&&",
  "||",
  "@@",
  "@@@",
  "!!",
  "<->"
];
var OperatorNode = freeze({
  is(node) {
    return node.kind === "OperatorNode";
  },
  create(operator) {
    return freeze({
      kind: "OperatorNode",
      operator
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/parens-node.js
var ParensNode = freeze({
  is(node) {
    return node.kind === "ParensNode";
  },
  create(node) {
    return freeze({
      kind: "ParensNode",
      node
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js
var PrimitiveValueListNode = freeze({
  is(node) {
    return node.kind === "PrimitiveValueListNode";
  },
  create(values) {
    return freeze({
      kind: "PrimitiveValueListNode",
      values: freeze([...values])
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/value-list-node.js
var ValueListNode = freeze({
  is(node) {
    return node.kind === "ValueListNode";
  },
  create(values) {
    return freeze({
      kind: "ValueListNode",
      values: freeze(values)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/value-parser.js
function parseValueExpressionOrList(ctx, arg) {
  if (isReadonlyArray(arg)) {
    return parseValueExpressionList(ctx, arg);
  } else {
    return parseValueExpression(ctx, arg);
  }
}
function parseValueExpression(ctx, exp) {
  if (isComplexExpression(exp)) {
    return parseComplexExpression(ctx, exp);
  }
  return ValueNode.create(exp);
}
function parseValueExpressionList(ctx, arg) {
  if (arg.some(isComplexExpression)) {
    return ValueListNode.create(arg.map((it) => parseValueExpression(ctx, it)));
  }
  return PrimitiveValueListNode.create(arg);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/filter-parser.js
function parseWhereFilter(ctx, args) {
  return parseFilter(ctx, "where", args);
}
function parseHavingFilter(ctx, args) {
  return parseFilter(ctx, "having", args);
}
function parseOnFilter(ctx, args) {
  return parseFilter(ctx, "on", args);
}
function parseReferenceFilter(ctx, lhs, op, rhs) {
  return FilterNode.create(parseReferenceExpression(ctx, lhs), parseFilterOperator(op), parseReferenceExpression(ctx, rhs));
}
function parseExistFilter(ctx, arg) {
  return parseExistExpression(ctx, "exists", arg);
}
function parseNotExistFilter(ctx, arg) {
  return parseExistExpression(ctx, "not exists", arg);
}
function parseFilter(ctx, type, args) {
  if (args.length === 3) {
    return parseThreeArgFilter(ctx, args[0], args[1], args[2]);
  } else if (args.length === 1) {
    return parseOneArgFilter(ctx, type, args[0]);
  }
  throw createFilterError(type, args);
}
function parseThreeArgFilter(ctx, left, op, right) {
  if ((op === "is" || op === "is not") && (isNull(right) || isBoolean(right))) {
    return parseIsFilter(ctx, left, op, right);
  }
  return FilterNode.create(parseReferenceExpression(ctx, left), parseFilterOperator(op), parseValueExpressionOrList(ctx, right));
}
function parseIsFilter(ctx, left, op, right) {
  return FilterNode.create(parseReferenceExpression(ctx, left), parseFilterOperator(op), ValueNode.createImmediate(right));
}
function parseFilterOperator(op) {
  if (isString(op) && OPERATORS.includes(op)) {
    return OperatorNode.create(op);
  } else if (isOperationNodeSource(op)) {
    return op.toOperationNode();
  }
  throw new Error(`invalid comparison operator ${JSON.stringify(op)} passed to a filter method`);
}
function parseExistExpression(ctx, type, arg) {
  return FilterNode.create(void 0, OperatorNode.create(type), parseValueExpressionOrList(ctx, arg));
}
function parseOneArgFilter(ctx, type, arg) {
  if (isFunction(arg)) {
    return GROUP_PARSERS[type](ctx, arg);
  } else if (isOperationNodeSource(arg)) {
    const node = arg.toOperationNode();
    if (RawNode.is(node)) {
      return node;
    }
  }
  throw createFilterError(type, arg);
}
function createFilterError(type, args) {
  return new Error(`invalid arguments passed to a '${type}' method: ${JSON.stringify(args)}`);
}
var GROUP_PARSERS = freeze({
  where(ctx, callback) {
    const query = callback(ctx.createSelectQueryBuilder());
    const queryNode = query.toOperationNode();
    if (!queryNode.where) {
      throw new Error("no `where` methods called insided a group callback");
    }
    return ParensNode.create(queryNode.where.where);
  },
  having(ctx, callback) {
    const query = callback(ctx.createSelectQueryBuilder());
    const queryNode = query.toOperationNode();
    if (!queryNode.having) {
      throw new Error("no `having` methods called insided a group callback");
    }
    return ParensNode.create(queryNode.having.having);
  },
  on(ctx, callback) {
    const joinBuilder = callback(ctx.createJoinBuilder("InnerJoin", "table"));
    const joinNode = joinBuilder.toOperationNode();
    if (!joinNode.on) {
      throw new Error("no `on` methods called insided a group callback");
    }
    return ParensNode.create(joinNode.on.on);
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/join-parser.js
function parseJoin(ctx, joinType, args) {
  if (args.length === 3) {
    return parseSingleOnJoin(ctx, joinType, args[0], args[1], args[2]);
  } else if (args.length === 2) {
    return parseCallbackJoin(ctx, joinType, args[0], args[1]);
  } else {
    throw new Error("not implemented");
  }
}
function parseCallbackJoin(ctx, joinType, from, callback) {
  const joinBuilder = callback(ctx.createJoinBuilder(joinType, from));
  return joinBuilder.toOperationNode();
}
function parseSingleOnJoin(ctx, joinType, from, lhsColumn, rhsColumn) {
  return JoinNode.createWithOn(joinType, parseTableExpression(ctx, from), parseReferenceFilter(ctx, lhsColumn, "=", rhsColumn));
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/selection-node.js
var SelectionNode = freeze({
  is(node) {
    return node.kind === "SelectionNode";
  },
  create(selection) {
    return freeze({
      kind: "SelectionNode",
      selection
    });
  },
  createSelectAll() {
    return freeze({
      kind: "SelectionNode",
      selection: SelectAllNode.create()
    });
  },
  createSelectAllFromTable(table) {
    return freeze({
      kind: "SelectionNode",
      selection: ReferenceNode.createSelectAll(table)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/select-parser.js
function parseSelectExpressionOrList(ctx, selection) {
  if (isReadonlyArray(selection)) {
    return selection.map((it) => parseSelectExpression(ctx, it));
  } else {
    return [parseSelectExpression(ctx, selection)];
  }
}
function parseSelectExpression(ctx, selection) {
  if (isString(selection)) {
    return SelectionNode.create(parseAliasedStringReference(selection));
  } else if (isDynamicReferenceBuilder(selection)) {
    return SelectionNode.create(selection.toOperationNode());
  } else {
    return SelectionNode.create(parseAliasedComplexExpression(ctx, selection));
  }
}
function parseSelectAll(table) {
  if (!table) {
    return [SelectionNode.createSelectAll()];
  } else if (Array.isArray(table)) {
    return table.map(parseSelectAllArg);
  } else {
    return [parseSelectAllArg(table)];
  }
}
function parseSelectAllArg(table) {
  if (isString(table)) {
    return SelectionNode.createSelectAllFromTable(table);
  }
  throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/from-node.js
var FromNode = freeze({
  is(node) {
    return node.kind === "FromNode";
  },
  create(froms) {
    return freeze({
      kind: "FromNode",
      froms: freeze(froms)
    });
  },
  cloneWithFroms(from, froms) {
    return freeze(__spreadProps(__spreadValues({}, from), {
      froms: freeze([...from.froms, ...froms])
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/group-by-node.js
var GroupByNode = freeze({
  is(node) {
    return node.kind === "GroupByNode";
  },
  create(items) {
    return freeze({
      kind: "GroupByNode",
      items: freeze(items)
    });
  },
  cloneWithItems(orderBy, items) {
    return freeze(__spreadProps(__spreadValues({}, orderBy), {
      items: freeze([...orderBy.items, ...items])
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/having-node.js
var HavingNode = freeze({
  is(node) {
    return node.kind === "HavingNode";
  },
  create(filter) {
    return freeze({
      kind: "HavingNode",
      having: filter
    });
  },
  cloneWithFilter(havingNode, op, filter) {
    return freeze(__spreadProps(__spreadValues({}, havingNode), {
      having: op === "And" ? AndNode.create(havingNode.having, filter) : OrNode.create(havingNode.having, filter)
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/order-by-node.js
var OrderByNode = freeze({
  is(node) {
    return node.kind === "OrderByNode";
  },
  create(item) {
    return freeze({
      kind: "OrderByNode",
      items: freeze([item])
    });
  },
  cloneWithItem(orderBy, item) {
    return freeze(__spreadProps(__spreadValues({}, orderBy), {
      items: freeze([...orderBy.items, item])
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/select-query-node.js
var SelectQueryNode = freeze({
  is(node) {
    return node.kind === "SelectQueryNode";
  },
  create(fromItems, withNode) {
    return freeze(__spreadValues({
      kind: "SelectQueryNode",
      from: FromNode.create(fromItems)
    }, withNode && { with: withNode }));
  },
  cloneWithSelections(select, selections) {
    return freeze(__spreadProps(__spreadValues({}, select), {
      selections: select.selections ? freeze([...select.selections, ...selections]) : freeze(selections)
    }));
  },
  cloneWithDistinctOnSelections(select, selections) {
    return freeze(__spreadProps(__spreadValues({}, select), {
      distinctOnSelections: select.distinctOnSelections ? freeze([...select.distinctOnSelections, ...selections]) : freeze(selections)
    }));
  },
  cloneWithModifier(select, modifier) {
    return freeze(__spreadProps(__spreadValues({}, select), {
      modifiers: select.modifiers ? freeze([...select.modifiers, modifier]) : freeze([modifier])
    }));
  },
  cloneWithOrderByItem(selectNode, item) {
    return freeze(__spreadProps(__spreadValues({}, selectNode), {
      orderBy: selectNode.orderBy ? OrderByNode.cloneWithItem(selectNode.orderBy, item) : OrderByNode.create(item)
    }));
  },
  cloneWithGroupByItems(selectNode, items) {
    return freeze(__spreadProps(__spreadValues({}, selectNode), {
      groupBy: selectNode.groupBy ? GroupByNode.cloneWithItems(selectNode.groupBy, items) : GroupByNode.create(items)
    }));
  },
  cloneWithLimit(selectNode, limit) {
    return freeze(__spreadProps(__spreadValues({}, selectNode), {
      limit
    }));
  },
  cloneWithOffset(selectNode, offset) {
    return freeze(__spreadProps(__spreadValues({}, selectNode), {
      offset
    }));
  },
  cloneWithHaving(selectNode, filter) {
    return freeze(__spreadProps(__spreadValues({}, selectNode), {
      having: selectNode.having ? HavingNode.cloneWithFilter(selectNode.having, "And", filter) : HavingNode.create(filter)
    }));
  },
  cloneWithOrHaving(selectNode, filter) {
    return freeze(__spreadProps(__spreadValues({}, selectNode), {
      having: selectNode.having ? HavingNode.cloneWithFilter(selectNode.having, "Or", filter) : HavingNode.create(filter)
    }));
  },
  cloneWithDistinct(selectNode) {
    return freeze(__spreadProps(__spreadValues({}, selectNode), {
      distinct: true
    }));
  },
  cloneWithUnion(selectNode, union) {
    return freeze(__spreadProps(__spreadValues({}, selectNode), {
      union: selectNode.union ? freeze([...selectNode.union, union]) : freeze([union])
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/insert-query-node.js
var InsertQueryNode = freeze({
  is(node) {
    return node.kind === "InsertQueryNode";
  },
  create(into, withNode) {
    return freeze(__spreadValues({
      kind: "InsertQueryNode",
      into
    }, withNode && { with: withNode }));
  },
  cloneWith(insertQuery, props) {
    return freeze(__spreadValues(__spreadValues({}, insertQuery), props));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/update-query-node.js
var UpdateQueryNode = freeze({
  is(node) {
    return node.kind === "UpdateQueryNode";
  },
  create(table, withNode) {
    return __spreadValues({
      kind: "UpdateQueryNode",
      table
    }, withNode && { with: withNode });
  },
  cloneWithUpdates(updateQuery, updates) {
    return freeze(__spreadProps(__spreadValues({}, updateQuery), {
      updates: updateQuery.updates ? freeze([...updateQuery.updates, ...updates]) : updates
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/delete-query-node.js
var DeleteQueryNode = freeze({
  is(node) {
    return node.kind === "DeleteQueryNode";
  },
  create(fromItem, withNode) {
    return freeze(__spreadValues({
      kind: "DeleteQueryNode",
      from: FromNode.create([fromItem])
    }, withNode && { with: withNode }));
  },
  cloneWithOrderByItem(deleteNode, item) {
    return freeze(__spreadProps(__spreadValues({}, deleteNode), {
      orderBy: deleteNode.orderBy ? OrderByNode.cloneWithItem(deleteNode.orderBy, item) : OrderByNode.create(item)
    }));
  },
  cloneWithLimit(deleteNode, limit) {
    return freeze(__spreadProps(__spreadValues({}, deleteNode), {
      limit
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/where-node.js
var WhereNode = freeze({
  is(node) {
    return node.kind === "WhereNode";
  },
  create(filter) {
    return freeze({
      kind: "WhereNode",
      where: filter
    });
  },
  cloneWithFilter(whereNode, op, filter) {
    return freeze(__spreadProps(__spreadValues({}, whereNode), {
      where: op === "And" ? AndNode.create(whereNode.where, filter) : OrNode.create(whereNode.where, filter)
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/returning-node.js
var ReturningNode = freeze({
  is(node) {
    return node.kind === "ReturningNode";
  },
  create(selections) {
    return freeze({
      kind: "ReturningNode",
      selections: freeze(selections)
    });
  },
  cloneWithSelections(returning, selections) {
    return freeze(__spreadProps(__spreadValues({}, returning), {
      selections: returning.selections ? freeze([...returning.selections, ...selections]) : freeze(selections)
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/query-node.js
var QueryNode = freeze({
  is(node) {
    return DeleteQueryNode.is(node) || InsertQueryNode.is(node) || UpdateQueryNode.is(node) || SelectQueryNode.is(node);
  },
  cloneWithWhere(node, filter) {
    return freeze(__spreadProps(__spreadValues({}, node), {
      where: node.where ? WhereNode.cloneWithFilter(node.where, "And", filter) : WhereNode.create(filter)
    }));
  },
  cloneWithOrWhere(node, filter) {
    return freeze(__spreadProps(__spreadValues({}, node), {
      where: node.where ? WhereNode.cloneWithFilter(node.where, "Or", filter) : WhereNode.create(filter)
    }));
  },
  cloneWithJoin(node, join) {
    return freeze(__spreadProps(__spreadValues({}, node), {
      joins: node.joins ? freeze([...node.joins, join]) : freeze([join])
    }));
  },
  cloneWithReturning(node, selections) {
    return freeze(__spreadProps(__spreadValues({}, node), {
      returning: node.returning ? ReturningNode.cloneWithSelections(node.returning, selections) : ReturningNode.create(selections)
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/order-by-item-node.js
var OrderByItemNode = freeze({
  is(node) {
    return node.kind === "OrderByItemNode";
  },
  create(orderBy, direction) {
    return freeze({
      kind: "OrderByItemNode",
      orderBy,
      direction
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/order-by-parser.js
function parseOrderBy(ctx, orderBy, direction) {
  return OrderByItemNode.create(parseOrderByExpression(ctx, orderBy), parseOrderByDirectionExpression(direction));
}
function parseOrderByExpression(ctx, expr) {
  return parseReferenceExpression(ctx, expr);
}
function parseOrderByDirectionExpression(expr) {
  if (!expr) {
    return void 0;
  }
  if (expr === "asc" || expr === "desc") {
    return RawNode.createWithSql(expr);
  } else {
    return expr.toOperationNode();
  }
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/limit-node.js
var LimitNode = freeze({
  is(node) {
    return node.kind === "LimitNode";
  },
  create(limit) {
    return freeze({
      kind: "LimitNode",
      limit: ValueNode.create(limit)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/offset-node.js
var OffsetNode = freeze({
  is(node) {
    return node.kind === "OffsetNode";
  },
  create(offset) {
    return freeze({
      kind: "OffsetNode",
      offset: ValueNode.create(offset)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/group-by-item-node.js
var GroupByItemNode = freeze({
  is(node) {
    return node.kind === "GroupByItemNode";
  },
  create(groupBy) {
    return freeze({
      kind: "GroupByItemNode",
      groupBy
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/group-by-parser.js
function parseGroupBy(ctx, orderBy) {
  return parseReferenceExpressionOrList(ctx, orderBy).map(GroupByItemNode.create);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/union-node.js
var UnionNode = freeze({
  is(node) {
    return node.kind === "UnionNode";
  },
  create(union, all) {
    return freeze({
      kind: "UnionNode",
      union,
      all
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/union-parser.js
function parseUnion(union, all) {
  return UnionNode.create(union.toOperationNode(), all);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/no-result-error.js
var NoResultError = class extends Error {
  node;
  constructor(node) {
    super("no result");
    this.node = node;
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/select-query-builder.js
var _props16;
var _SelectQueryBuilder = class {
  constructor(props) {
    __privateAdd(this, _props16, void 0);
    __privateSet(this, _props16, freeze(props));
  }
  where(...args) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props16).queryNode, parseWhereFilter(__privateGet(this, _props16).parseContext, args))
    }));
  }
  whereRef(lhs, op, rhs) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props16).queryNode, parseReferenceFilter(__privateGet(this, _props16).parseContext, lhs, op, rhs))
    }));
  }
  orWhere(...args) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props16).queryNode, parseWhereFilter(__privateGet(this, _props16).parseContext, args))
    }));
  }
  orWhereRef(lhs, op, rhs) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props16).queryNode, parseReferenceFilter(__privateGet(this, _props16).parseContext, lhs, op, rhs))
    }));
  }
  whereExists(arg) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props16).queryNode, parseExistFilter(__privateGet(this, _props16).parseContext, arg))
    }));
  }
  whereNotExists(arg) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props16).queryNode, parseNotExistFilter(__privateGet(this, _props16).parseContext, arg))
    }));
  }
  orWhereExists(arg) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props16).queryNode, parseExistFilter(__privateGet(this, _props16).parseContext, arg))
    }));
  }
  orWhereNotExists(arg) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props16).queryNode, parseNotExistFilter(__privateGet(this, _props16).parseContext, arg))
    }));
  }
  having(...args) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithHaving(__privateGet(this, _props16).queryNode, parseHavingFilter(__privateGet(this, _props16).parseContext, args))
    }));
  }
  havingRef(lhs, op, rhs) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithHaving(__privateGet(this, _props16).queryNode, parseReferenceFilter(__privateGet(this, _props16).parseContext, lhs, op, rhs))
    }));
  }
  orHaving(...args) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithOrHaving(__privateGet(this, _props16).queryNode, parseHavingFilter(__privateGet(this, _props16).parseContext, args))
    }));
  }
  orHavingRef(lhs, op, rhs) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithOrHaving(__privateGet(this, _props16).queryNode, parseReferenceFilter(__privateGet(this, _props16).parseContext, lhs, op, rhs))
    }));
  }
  havingExists(arg) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithHaving(__privateGet(this, _props16).queryNode, parseExistFilter(__privateGet(this, _props16).parseContext, arg))
    }));
  }
  havingNotExist(arg) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithHaving(__privateGet(this, _props16).queryNode, parseNotExistFilter(__privateGet(this, _props16).parseContext, arg))
    }));
  }
  orHavingExists(arg) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithOrHaving(__privateGet(this, _props16).queryNode, parseExistFilter(__privateGet(this, _props16).parseContext, arg))
    }));
  }
  orHavingNotExists(arg) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithOrHaving(__privateGet(this, _props16).queryNode, parseNotExistFilter(__privateGet(this, _props16).parseContext, arg))
    }));
  }
  select(selection) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithSelections(__privateGet(this, _props16).queryNode, parseSelectExpressionOrList(__privateGet(this, _props16).parseContext, selection))
    }));
  }
  distinctOn(selection) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithDistinctOnSelections(__privateGet(this, _props16).queryNode, parseSelectExpressionOrList(__privateGet(this, _props16).parseContext, selection))
    }));
  }
  distinct() {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithDistinct(__privateGet(this, _props16).queryNode)
    }));
  }
  forUpdate() {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithModifier(__privateGet(this, _props16).queryNode, "ForUpdate")
    }));
  }
  forShare() {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithModifier(__privateGet(this, _props16).queryNode, "ForShare")
    }));
  }
  forKeyShare() {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithModifier(__privateGet(this, _props16).queryNode, "ForKeyShare")
    }));
  }
  forNoKeyUpdate() {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithModifier(__privateGet(this, _props16).queryNode, "ForNoKeyUpdate")
    }));
  }
  skipLocked() {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithModifier(__privateGet(this, _props16).queryNode, "SkipLocked")
    }));
  }
  noWait() {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithModifier(__privateGet(this, _props16).queryNode, "NoWait")
    }));
  }
  selectAll(table) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithSelections(__privateGet(this, _props16).queryNode, parseSelectAll(table))
    }));
  }
  innerJoin(...args) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props16).queryNode, parseJoin(__privateGet(this, _props16).parseContext, "InnerJoin", args))
    }));
  }
  leftJoin(...args) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props16).queryNode, parseJoin(__privateGet(this, _props16).parseContext, "LeftJoin", args))
    }));
  }
  rightJoin(...args) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props16).queryNode, parseJoin(__privateGet(this, _props16).parseContext, "RightJoin", args))
    }));
  }
  fullJoin(...args) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props16).queryNode, parseJoin(__privateGet(this, _props16).parseContext, "FullJoin", args))
    }));
  }
  orderBy(orderBy, direction) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithOrderByItem(__privateGet(this, _props16).queryNode, parseOrderBy(__privateGet(this, _props16).parseContext, orderBy, direction))
    }));
  }
  groupBy(groupBy) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithGroupByItems(__privateGet(this, _props16).queryNode, parseGroupBy(__privateGet(this, _props16).parseContext, groupBy))
    }));
  }
  limit(limit) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithLimit(__privateGet(this, _props16).queryNode, LimitNode.create(limit))
    }));
  }
  offset(offset) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithOffset(__privateGet(this, _props16).queryNode, OffsetNode.create(offset))
    }));
  }
  union(expression) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithUnion(__privateGet(this, _props16).queryNode, parseUnion(expression, false))
    }));
  }
  unionAll(expression) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      queryNode: SelectQueryNode.cloneWithUnion(__privateGet(this, _props16).queryNode, parseUnion(expression, true))
    }));
  }
  call(func) {
    return func(this);
  }
  if(condition, func) {
    if (condition) {
      return func(this);
    }
    return new _SelectQueryBuilder(__spreadValues({}, __privateGet(this, _props16)));
  }
  as(alias) {
    return new AliasedQueryBuilder(this, alias);
  }
  castTo() {
    return new _SelectQueryBuilder(__privateGet(this, _props16));
  }
  withPlugin(plugin) {
    return new _SelectQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props16)), {
      executor: __privateGet(this, _props16).executor.withPlugin(plugin)
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props16).executor.transformQuery(__privateGet(this, _props16).queryNode, __privateGet(this, _props16).queryId);
  }
  compile() {
    return __privateGet(this, _props16).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props16).queryId);
  }
  async execute() {
    const compildQuery = this.compile();
    const query = compildQuery.query;
    const result = await __privateGet(this, _props16).executor.executeQuery(compildQuery, __privateGet(this, _props16).queryId);
    return result.rows;
  }
  async executeTakeFirst() {
    const [result] = await this.execute();
    return result;
  }
  async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
    const result = await this.executeTakeFirst();
    if (result === void 0) {
      throw new errorConstructor(this.toOperationNode());
    }
    return result;
  }
};
var SelectQueryBuilder = _SelectQueryBuilder;
_props16 = new WeakMap();
preventAwait(SelectQueryBuilder, "don't await SelectQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.");
var _queryBuilder, _alias2;
var AliasedQueryBuilder = class {
  constructor(queryBuilder, alias) {
    __privateAdd(this, _queryBuilder, void 0);
    __privateAdd(this, _alias2, void 0);
    __privateSet(this, _queryBuilder, queryBuilder);
    __privateSet(this, _alias2, alias);
  }
  get alias() {
    return __privateGet(this, _alias2);
  }
  toOperationNode() {
    const node = __privateGet(this, _queryBuilder).toOperationNode();
    if (SelectQueryNode.is(node)) {
      return AliasNode.create(node, __privateGet(this, _alias2));
    }
    throw new Error("only select queries can be aliased");
  }
};
_queryBuilder = new WeakMap();
_alias2 = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/values-node.js
var ValuesNode = freeze({
  is(node) {
    return node.kind === "ValuesNode";
  },
  create(values) {
    return freeze({
      kind: "ValuesNode",
      values: freeze(values)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/insert-values-parser.js
function parseInsertObjectOrList(ctx, args) {
  return parseInsertColumnsAndValues(ctx, Array.isArray(args) ? args : [args]);
}
function parseInsertColumnsAndValues(ctx, rows) {
  const columns = parseColumnNamesAndIndexes(rows);
  return [
    freeze([...columns.keys()].map(ColumnNode.create)),
    ValuesNode.create(rows.map((row) => parseRowValues(ctx, row, columns)))
  ];
}
function parseColumnNamesAndIndexes(rows) {
  const columns = new Map();
  for (const row of rows) {
    const cols = Object.keys(row);
    for (const col of cols) {
      if (!columns.has(col) && row[col] !== void 0) {
        columns.set(col, columns.size);
      }
    }
  }
  return columns;
}
function parseRowValues(ctx, row, columns) {
  const rowColumns = Object.keys(row);
  const rowValues = new Array(columns.size).fill(null);
  for (const col of rowColumns) {
    const columnIdx = columns.get(col);
    const value = row[col];
    if (columnIdx !== void 0) {
      rowValues[columnIdx] = value;
    }
  }
  if (rowValues.some(isComplexExpression)) {
    return ValueListNode.create(rowValues.map((it) => parseValueExpression(ctx, it)));
  }
  return PrimitiveValueListNode.create(rowValues);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/column-update-node.js
var ColumnUpdateNode = freeze({
  is(node) {
    return node.kind === "ColumnUpdateNode";
  },
  create(column, value) {
    return freeze({
      kind: "ColumnUpdateNode",
      column,
      value
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/update-set-parser.js
function parseUpdateObject(ctx, row) {
  return Object.entries(row).filter(([_, value]) => value !== void 0).map(([key, value]) => {
    return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(ctx, value));
  });
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js
var OnDuplicateKeyNode = freeze({
  is(node) {
    return node.kind === "OnDuplicateKeyNode";
  },
  create(updates) {
    return freeze({
      kind: "OnDuplicateKeyNode",
      updates
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/insert-result.js
var _insertId;
var InsertResult = class {
  constructor(insertId) {
    __privateAdd(this, _insertId, void 0);
    __privateSet(this, _insertId, insertId);
  }
  get insertId() {
    return __privateGet(this, _insertId);
  }
};
_insertId = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/on-conflict-node.js
var OnConflictNode = freeze({
  is(node) {
    return node.kind === "OnConflictNode";
  },
  create() {
    return freeze({
      kind: "OnConflictNode"
    });
  },
  cloneWith(node, props) {
    return freeze(__spreadValues(__spreadValues({}, node), props));
  },
  cloneWithIndexWhere(node, filter) {
    return freeze(__spreadProps(__spreadValues({}, node), {
      indexWhere: node.indexWhere ? WhereNode.cloneWithFilter(node.indexWhere, "And", filter) : WhereNode.create(filter)
    }));
  },
  cloneWithIndexOrWhere(node, filter) {
    return freeze(__spreadProps(__spreadValues({}, node), {
      indexWhere: node.indexWhere ? WhereNode.cloneWithFilter(node.indexWhere, "Or", filter) : WhereNode.create(filter)
    }));
  },
  cloneWithUpdateWhere(node, filter) {
    return freeze(__spreadProps(__spreadValues({}, node), {
      updateWhere: node.updateWhere ? WhereNode.cloneWithFilter(node.updateWhere, "And", filter) : WhereNode.create(filter)
    }));
  },
  cloneWithUpdateOrWhere(node, filter) {
    return freeze(__spreadProps(__spreadValues({}, node), {
      updateWhere: node.updateWhere ? WhereNode.cloneWithFilter(node.updateWhere, "Or", filter) : WhereNode.create(filter)
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js
var _props17;
var _OnConflictBuilder = class {
  constructor(props) {
    __privateAdd(this, _props17, void 0);
    __privateSet(this, _props17, freeze(props));
  }
  column(column) {
    const columnNode = ColumnNode.create(column);
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWith(__privateGet(this, _props17).onConflictNode, {
        columns: __privateGet(this, _props17).onConflictNode.columns ? freeze([...__privateGet(this, _props17).onConflictNode.columns, columnNode]) : freeze([columnNode])
      })
    }));
  }
  columns(columns) {
    const columnNodes = columns.map(ColumnNode.create);
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWith(__privateGet(this, _props17).onConflictNode, {
        columns: __privateGet(this, _props17).onConflictNode.columns ? freeze([...__privateGet(this, _props17).onConflictNode.columns, ...columnNodes]) : freeze(columnNodes)
      })
    }));
  }
  constraint(constraintName) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWith(__privateGet(this, _props17).onConflictNode, {
        constraint: IdentifierNode.create(constraintName)
      })
    }));
  }
  expression(expression) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWith(__privateGet(this, _props17).onConflictNode, {
        indexExpression: expression.toOperationNode()
      })
    }));
  }
  where(...args) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWithIndexWhere(__privateGet(this, _props17).onConflictNode, parseWhereFilter(__privateGet(this, _props17).parseContext, args))
    }));
  }
  whereRef(lhs, op, rhs) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWithIndexWhere(__privateGet(this, _props17).onConflictNode, parseReferenceFilter(__privateGet(this, _props17).parseContext, lhs, op, rhs))
    }));
  }
  orWhere(...args) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWithIndexOrWhere(__privateGet(this, _props17).onConflictNode, parseWhereFilter(__privateGet(this, _props17).parseContext, args))
    }));
  }
  orWhereRef(lhs, op, rhs) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWithIndexOrWhere(__privateGet(this, _props17).onConflictNode, parseReferenceFilter(__privateGet(this, _props17).parseContext, lhs, op, rhs))
    }));
  }
  whereExists(arg) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWithIndexWhere(__privateGet(this, _props17).onConflictNode, parseExistFilter(__privateGet(this, _props17).parseContext, arg))
    }));
  }
  whereNotExists(arg) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWithIndexWhere(__privateGet(this, _props17).onConflictNode, parseNotExistFilter(__privateGet(this, _props17).parseContext, arg))
    }));
  }
  orWhereExists(arg) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWithIndexOrWhere(__privateGet(this, _props17).onConflictNode, parseExistFilter(__privateGet(this, _props17).parseContext, arg))
    }));
  }
  orWhereNotExists(arg) {
    return new _OnConflictBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWithIndexOrWhere(__privateGet(this, _props17).onConflictNode, parseNotExistFilter(__privateGet(this, _props17).parseContext, arg))
    }));
  }
  doNothing() {
    return new OnConflictDoNothingBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWith(__privateGet(this, _props17).onConflictNode, {
        doNothing: true
      })
    }));
  }
  doUpdateSet(updates) {
    return new OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props17)), {
      onConflictNode: OnConflictNode.cloneWith(__privateGet(this, _props17).onConflictNode, {
        updates: parseUpdateObject(__privateGet(this, _props17).parseContext, updates)
      })
    }));
  }
};
var OnConflictBuilder = _OnConflictBuilder;
_props17 = new WeakMap();
preventAwait(OnConflictBuilder, "don't await OnConflictBuilder instances.");
var _props18;
var OnConflictDoNothingBuilder = class {
  constructor(props) {
    __privateAdd(this, _props18, void 0);
    __privateSet(this, _props18, freeze(props));
  }
  toOperationNode() {
    return __privateGet(this, _props18).onConflictNode;
  }
};
_props18 = new WeakMap();
preventAwait(OnConflictDoNothingBuilder, "don't await OnConflictDoNothingBuilder instances.");
var _props19;
var _OnConflictUpdateBuilder = class {
  constructor(props) {
    __privateAdd(this, _props19, void 0);
    __privateSet(this, _props19, freeze(props));
  }
  where(...args) {
    return new _OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props19)), {
      onConflictNode: OnConflictNode.cloneWithUpdateWhere(__privateGet(this, _props19).onConflictNode, parseWhereFilter(__privateGet(this, _props19).parseContext, args))
    }));
  }
  whereRef(lhs, op, rhs) {
    return new _OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props19)), {
      onConflictNode: OnConflictNode.cloneWithUpdateWhere(__privateGet(this, _props19).onConflictNode, parseReferenceFilter(__privateGet(this, _props19).parseContext, lhs, op, rhs))
    }));
  }
  orWhere(...args) {
    return new _OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props19)), {
      onConflictNode: OnConflictNode.cloneWithUpdateOrWhere(__privateGet(this, _props19).onConflictNode, parseWhereFilter(__privateGet(this, _props19).parseContext, args))
    }));
  }
  orWhereRef(lhs, op, rhs) {
    return new _OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props19)), {
      onConflictNode: OnConflictNode.cloneWithUpdateOrWhere(__privateGet(this, _props19).onConflictNode, parseReferenceFilter(__privateGet(this, _props19).parseContext, lhs, op, rhs))
    }));
  }
  whereExists(arg) {
    return new _OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props19)), {
      onConflictNode: OnConflictNode.cloneWithUpdateWhere(__privateGet(this, _props19).onConflictNode, parseExistFilter(__privateGet(this, _props19).parseContext, arg))
    }));
  }
  whereNotExists(arg) {
    return new _OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props19)), {
      onConflictNode: OnConflictNode.cloneWithUpdateWhere(__privateGet(this, _props19).onConflictNode, parseNotExistFilter(__privateGet(this, _props19).parseContext, arg))
    }));
  }
  orWhereExists(arg) {
    return new _OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props19)), {
      onConflictNode: OnConflictNode.cloneWithUpdateOrWhere(__privateGet(this, _props19).onConflictNode, parseExistFilter(__privateGet(this, _props19).parseContext, arg))
    }));
  }
  orWhereNotExists(arg) {
    return new _OnConflictUpdateBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props19)), {
      onConflictNode: OnConflictNode.cloneWithUpdateOrWhere(__privateGet(this, _props19).onConflictNode, parseNotExistFilter(__privateGet(this, _props19).parseContext, arg))
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props19).onConflictNode;
  }
};
var OnConflictUpdateBuilder = _OnConflictUpdateBuilder;
_props19 = new WeakMap();
preventAwait(OnConflictUpdateBuilder, "don't await OnConflictUpdateBuilder instances.");

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/insert-query-builder.js
var _props20;
var _InsertQueryBuilder = class {
  constructor(props) {
    __privateAdd(this, _props20, void 0);
    __privateSet(this, _props20, freeze(props));
  }
  values(args) {
    const [columns, values] = parseInsertObjectOrList(__privateGet(this, _props20).parseContext, args);
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      queryNode: InsertQueryNode.cloneWith(__privateGet(this, _props20).queryNode, {
        columns,
        values
      })
    }));
  }
  columns(columns) {
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      queryNode: InsertQueryNode.cloneWith(__privateGet(this, _props20).queryNode, {
        columns: freeze(columns.map(ColumnNode.create))
      })
    }));
  }
  expression(expression) {
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      queryNode: InsertQueryNode.cloneWith(__privateGet(this, _props20).queryNode, {
        values: parseComplexExpression(__privateGet(this, _props20).parseContext, expression)
      })
    }));
  }
  ignore() {
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      queryNode: InsertQueryNode.cloneWith(__privateGet(this, _props20).queryNode, {
        ignore: true
      })
    }));
  }
  onConflict(callback) {
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      queryNode: InsertQueryNode.cloneWith(__privateGet(this, _props20).queryNode, {
        onConflict: callback(new OnConflictBuilder({
          onConflictNode: OnConflictNode.create(),
          parseContext: __privateGet(this, _props20).parseContext
        })).toOperationNode()
      })
    }));
  }
  onDuplicateKeyUpdate(updates) {
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      queryNode: InsertQueryNode.cloneWith(__privateGet(this, _props20).queryNode, {
        onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateObject(__privateGet(this, _props20).parseContext, updates))
      })
    }));
  }
  returning(selection) {
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      queryNode: QueryNode.cloneWithReturning(__privateGet(this, _props20).queryNode, parseSelectExpressionOrList(__privateGet(this, _props20).parseContext, selection))
    }));
  }
  returningAll() {
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      queryNode: QueryNode.cloneWithReturning(__privateGet(this, _props20).queryNode, parseSelectAll())
    }));
  }
  call(func) {
    return func(this);
  }
  if(condition, func) {
    if (condition) {
      return func(this);
    }
    return new _InsertQueryBuilder(__spreadValues({}, __privateGet(this, _props20)));
  }
  castTo() {
    return new _InsertQueryBuilder(__privateGet(this, _props20));
  }
  withPlugin(plugin) {
    return new _InsertQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props20)), {
      executor: __privateGet(this, _props20).executor.withPlugin(plugin)
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props20).executor.transformQuery(__privateGet(this, _props20).queryNode, __privateGet(this, _props20).queryId);
  }
  compile() {
    return __privateGet(this, _props20).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props20).queryId);
  }
  async execute() {
    const compildQuery = this.compile();
    const query = compildQuery.query;
    const result = await __privateGet(this, _props20).executor.executeQuery(compildQuery, __privateGet(this, _props20).queryId);
    if (__privateGet(this, _props20).parseContext.adapter.supportsReturning && query.returning) {
      return result.rows;
    } else {
      return [new InsertResult(result.insertId)];
    }
  }
  async executeTakeFirst() {
    const [result] = await this.execute();
    return result;
  }
  async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
    const result = await this.executeTakeFirst();
    if (result === void 0) {
      throw new errorConstructor(this.toOperationNode());
    }
    return result;
  }
};
var InsertQueryBuilder = _InsertQueryBuilder;
_props20 = new WeakMap();
preventAwait(InsertQueryBuilder, "don't await InsertQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.");

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/delete-result.js
var _numDeletedRows;
var DeleteResult = class {
  constructor(numDeletedRows) {
    __privateAdd(this, _numDeletedRows, void 0);
    __privateSet(this, _numDeletedRows, numDeletedRows);
  }
  get numDeletedRows() {
    return __privateGet(this, _numDeletedRows);
  }
};
_numDeletedRows = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/delete-query-builder.js
var _props21;
var _DeleteQueryBuilder = class {
  constructor(props) {
    __privateAdd(this, _props21, void 0);
    __privateSet(this, _props21, freeze(props));
  }
  where(...args) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props21).queryNode, parseWhereFilter(__privateGet(this, _props21).parseContext, args))
    }));
  }
  whereRef(lhs, op, rhs) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props21).queryNode, parseReferenceFilter(__privateGet(this, _props21).parseContext, lhs, op, rhs))
    }));
  }
  orWhere(...args) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props21).queryNode, parseWhereFilter(__privateGet(this, _props21).parseContext, args))
    }));
  }
  orWhereRef(lhs, op, rhs) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props21).queryNode, parseReferenceFilter(__privateGet(this, _props21).parseContext, lhs, op, rhs))
    }));
  }
  whereExists(arg) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props21).queryNode, parseExistFilter(__privateGet(this, _props21).parseContext, arg))
    }));
  }
  whereNotExists(arg) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props21).queryNode, parseNotExistFilter(__privateGet(this, _props21).parseContext, arg))
    }));
  }
  orWhereExists(arg) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props21).queryNode, parseExistFilter(__privateGet(this, _props21).parseContext, arg))
    }));
  }
  orWhereNotExists(arg) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props21).queryNode, parseNotExistFilter(__privateGet(this, _props21).parseContext, arg))
    }));
  }
  innerJoin(...args) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props21).queryNode, parseJoin(__privateGet(this, _props21).parseContext, "InnerJoin", args))
    }));
  }
  leftJoin(...args) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props21).queryNode, parseJoin(__privateGet(this, _props21).parseContext, "LeftJoin", args))
    }));
  }
  rightJoin(...args) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props21).queryNode, parseJoin(__privateGet(this, _props21).parseContext, "RightJoin", args))
    }));
  }
  fullJoin(...args) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props21).queryNode, parseJoin(__privateGet(this, _props21).parseContext, "FullJoin", args))
    }));
  }
  returning(selection) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithReturning(__privateGet(this, _props21).queryNode, parseSelectExpressionOrList(__privateGet(this, _props21).parseContext, selection))
    }));
  }
  returningAll() {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: QueryNode.cloneWithReturning(__privateGet(this, _props21).queryNode, parseSelectAll())
    }));
  }
  orderBy(orderBy, direction) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: DeleteQueryNode.cloneWithOrderByItem(__privateGet(this, _props21).queryNode, parseOrderBy(__privateGet(this, _props21).parseContext, orderBy, direction))
    }));
  }
  limit(limit) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      queryNode: DeleteQueryNode.cloneWithLimit(__privateGet(this, _props21).queryNode, LimitNode.create(limit))
    }));
  }
  call(func) {
    return func(this);
  }
  if(condition, func) {
    if (condition) {
      return func(this);
    }
    return new _DeleteQueryBuilder(__spreadValues({}, __privateGet(this, _props21)));
  }
  castTo() {
    return new _DeleteQueryBuilder(__privateGet(this, _props21));
  }
  withPlugin(plugin) {
    return new _DeleteQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props21)), {
      executor: __privateGet(this, _props21).executor.withPlugin(plugin)
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props21).executor.transformQuery(__privateGet(this, _props21).queryNode, __privateGet(this, _props21).queryId);
  }
  compile() {
    return __privateGet(this, _props21).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props21).queryId);
  }
  async execute() {
    const compildQuery = this.compile();
    const query = compildQuery.query;
    const result = await __privateGet(this, _props21).executor.executeQuery(compildQuery, __privateGet(this, _props21).queryId);
    if (__privateGet(this, _props21).parseContext.adapter.supportsReturning && query.returning) {
      return result.rows;
    } else {
      return [new DeleteResult(result.numUpdatedOrDeletedRows)];
    }
  }
  async executeTakeFirst() {
    const [result] = await this.execute();
    return result;
  }
  async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
    const result = await this.executeTakeFirst();
    if (result === void 0) {
      throw new errorConstructor(this.toOperationNode());
    }
    return result;
  }
};
var DeleteQueryBuilder = _DeleteQueryBuilder;
_props21 = new WeakMap();
preventAwait(DeleteQueryBuilder, "don't await DeleteQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.");

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/update-result.js
var _numUpdatedRows;
var UpdateResult = class {
  constructor(numUpdatedRows) {
    __privateAdd(this, _numUpdatedRows, void 0);
    __privateSet(this, _numUpdatedRows, numUpdatedRows);
  }
  get numUpdatedRows() {
    return __privateGet(this, _numUpdatedRows);
  }
};
_numUpdatedRows = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/update-query-builder.js
var _props22;
var _UpdateQueryBuilder = class {
  constructor(props) {
    __privateAdd(this, _props22, void 0);
    __privateSet(this, _props22, freeze(props));
  }
  where(...args) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props22).queryNode, parseWhereFilter(__privateGet(this, _props22).parseContext, args))
    }));
  }
  whereRef(lhs, op, rhs) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props22).queryNode, parseReferenceFilter(__privateGet(this, _props22).parseContext, lhs, op, rhs))
    }));
  }
  orWhere(...args) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props22).queryNode, parseWhereFilter(__privateGet(this, _props22).parseContext, args))
    }));
  }
  orWhereRef(lhs, op, rhs) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props22).queryNode, parseReferenceFilter(__privateGet(this, _props22).parseContext, lhs, op, rhs))
    }));
  }
  whereExists(arg) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props22).queryNode, parseExistFilter(__privateGet(this, _props22).parseContext, arg))
    }));
  }
  whereNotExists(arg) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithWhere(__privateGet(this, _props22).queryNode, parseNotExistFilter(__privateGet(this, _props22).parseContext, arg))
    }));
  }
  orWhereExists(arg) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props22).queryNode, parseExistFilter(__privateGet(this, _props22).parseContext, arg))
    }));
  }
  orWhereNotExists(arg) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithOrWhere(__privateGet(this, _props22).queryNode, parseNotExistFilter(__privateGet(this, _props22).parseContext, arg))
    }));
  }
  innerJoin(...args) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props22).queryNode, parseJoin(__privateGet(this, _props22).parseContext, "InnerJoin", args))
    }));
  }
  leftJoin(...args) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props22).queryNode, parseJoin(__privateGet(this, _props22).parseContext, "LeftJoin", args))
    }));
  }
  rightJoin(...args) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props22).queryNode, parseJoin(__privateGet(this, _props22).parseContext, "RightJoin", args))
    }));
  }
  fullJoin(...args) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithJoin(__privateGet(this, _props22).queryNode, parseJoin(__privateGet(this, _props22).parseContext, "FullJoin", args))
    }));
  }
  set(row) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: UpdateQueryNode.cloneWithUpdates(__privateGet(this, _props22).queryNode, parseUpdateObject(__privateGet(this, _props22).parseContext, row))
    }));
  }
  returning(selection) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithReturning(__privateGet(this, _props22).queryNode, parseSelectExpressionOrList(__privateGet(this, _props22).parseContext, selection))
    }));
  }
  returningAll() {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      queryNode: QueryNode.cloneWithReturning(__privateGet(this, _props22).queryNode, parseSelectAll())
    }));
  }
  call(func) {
    return func(this);
  }
  if(condition, func) {
    if (condition) {
      return func(this);
    }
    return new _UpdateQueryBuilder(__spreadValues({}, __privateGet(this, _props22)));
  }
  castTo() {
    return new _UpdateQueryBuilder(__privateGet(this, _props22));
  }
  withPlugin(plugin) {
    return new _UpdateQueryBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props22)), {
      executor: __privateGet(this, _props22).executor.withPlugin(plugin)
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props22).executor.transformQuery(__privateGet(this, _props22).queryNode, __privateGet(this, _props22).queryId);
  }
  compile() {
    return __privateGet(this, _props22).executor.compileQuery(this.toOperationNode(), __privateGet(this, _props22).queryId);
  }
  async execute() {
    const compildQuery = this.compile();
    const query = compildQuery.query;
    const result = await __privateGet(this, _props22).executor.executeQuery(compildQuery, __privateGet(this, _props22).queryId);
    if (__privateGet(this, _props22).parseContext.adapter.supportsReturning && query.returning) {
      return result.rows;
    } else {
      return [new UpdateResult(result.numUpdatedOrDeletedRows)];
    }
  }
  async executeTakeFirst() {
    const [result] = await this.execute();
    return result;
  }
  async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
    const result = await this.executeTakeFirst();
    if (result === void 0) {
      throw new errorConstructor(this.toOperationNode());
    }
    return result;
  }
};
var UpdateQueryBuilder = _UpdateQueryBuilder;
_props22 = new WeakMap();
preventAwait(UpdateQueryBuilder, "don't await UpdateQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.");

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js
var CommonTableExpressionNode = freeze({
  is(node) {
    return node.kind === "CommonTableExpressionNode";
  },
  create(name, expression) {
    return freeze({
      kind: "CommonTableExpressionNode",
      name,
      expression
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js
var CommonTableExpressionNameNode = freeze({
  is(node) {
    return node.kind === "CommonTableExpressionNameNode";
  },
  create(tableName, columnNames) {
    return freeze({
      kind: "CommonTableExpressionNameNode",
      table: TableNode.create(tableName),
      columns: columnNames ? freeze(columnNames.map(ColumnNode.create)) : void 0
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/with-parser.js
function parseCommonTableExpression(ctx, name, expression) {
  const builder = expression(ctx.createQueryCreator());
  return CommonTableExpressionNode.create(parseCommonTableExpressionName(name), builder.toOperationNode());
}
function parseCommonTableExpressionName(name) {
  if (name.includes("(")) {
    const parts = name.split(/[\(\)]/);
    const table = parts[0];
    const columns = parts[1].split(",").map((it) => it.trim());
    return CommonTableExpressionNameNode.create(table, columns);
  } else {
    return CommonTableExpressionNameNode.create(name);
  }
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/with-node.js
var WithNode = freeze({
  is(node) {
    return node.kind === "WithNode";
  },
  create(expression, params) {
    return freeze(__spreadValues({
      kind: "WithNode",
      expressions: freeze([expression])
    }, params));
  },
  cloneWithExpression(withNode, expression) {
    return freeze(__spreadProps(__spreadValues({}, withNode), {
      expressions: freeze([...withNode.expressions, expression])
    }));
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-creator.js
var _props23;
var _QueryCreator = class {
  constructor(props) {
    __privateAdd(this, _props23, void 0);
    __privateSet(this, _props23, freeze(props));
  }
  selectFrom(from) {
    return new SelectQueryBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _props23).executor,
      parseContext: __privateGet(this, _props23).parseContext,
      queryNode: SelectQueryNode.create(parseTableExpressionOrList(__privateGet(this, _props23).parseContext, from), __privateGet(this, _props23).withNode)
    });
  }
  insertInto(table) {
    return new InsertQueryBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _props23).executor,
      parseContext: __privateGet(this, _props23).parseContext,
      queryNode: InsertQueryNode.create(parseTable(table), __privateGet(this, _props23).withNode)
    });
  }
  deleteFrom(table) {
    return new DeleteQueryBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _props23).executor,
      parseContext: __privateGet(this, _props23).parseContext,
      queryNode: DeleteQueryNode.create(parseTableExpression(__privateGet(this, _props23).parseContext, table), __privateGet(this, _props23).withNode)
    });
  }
  updateTable(table) {
    return new UpdateQueryBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _props23).executor,
      parseContext: __privateGet(this, _props23).parseContext,
      queryNode: UpdateQueryNode.create(parseTableExpression(__privateGet(this, _props23).parseContext, table), __privateGet(this, _props23).withNode)
    });
  }
  with(name, expression) {
    const cte = parseCommonTableExpression(__privateGet(this, _props23).parseContext, name, expression);
    return new _QueryCreator(__spreadProps(__spreadValues({}, __privateGet(this, _props23)), {
      withNode: __privateGet(this, _props23).withNode ? WithNode.cloneWithExpression(__privateGet(this, _props23).withNode, cte) : WithNode.create(cte)
    }));
  }
  withRecursive(name, expression) {
    const cte = parseCommonTableExpression(__privateGet(this, _props23).parseContext, name, expression);
    return new _QueryCreator(__spreadProps(__spreadValues({}, __privateGet(this, _props23)), {
      withNode: __privateGet(this, _props23).withNode ? WithNode.cloneWithExpression(__privateGet(this, _props23).withNode, cte) : WithNode.create(cte, { recursive: true })
    }));
  }
  withSchema(schema) {
    return new _QueryCreator(__spreadProps(__spreadValues({}, __privateGet(this, _props23)), {
      executor: __privateGet(this, _props23).executor.withPluginAtFront(new WithSchemaPlugin(schema))
    }));
  }
  raw(sql, parameters) {
    return new RawBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _props23).executor,
      sql,
      parameters
    });
  }
};
var QueryCreator = _QueryCreator;
_props23 = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-executor/default-query-executor.js
var _compiler, _connectionProvider;
var _DefaultQueryExecutor = class extends QueryExecutor {
  constructor(compiler, connectionProvider, plugins = []) {
    super(plugins);
    __privateAdd(this, _compiler, void 0);
    __privateAdd(this, _connectionProvider, void 0);
    __privateSet(this, _compiler, compiler);
    __privateSet(this, _connectionProvider, connectionProvider);
  }
  compileQuery(node) {
    return __privateGet(this, _compiler).compileQuery(node);
  }
  async executeQueryImpl(compiledQuery) {
    return __privateGet(this, _connectionProvider).withConnection((connection) => {
      return connection.executeQuery(compiledQuery);
    });
  }
  withPlugin(plugin) {
    return new _DefaultQueryExecutor(__privateGet(this, _compiler), __privateGet(this, _connectionProvider), [
      ...this.plugins,
      plugin
    ]);
  }
  withPluginAtFront(plugin) {
    return new _DefaultQueryExecutor(__privateGet(this, _compiler), __privateGet(this, _connectionProvider), [
      plugin,
      ...this.plugins
    ]);
  }
  withConnectionProvider(connectionProvider) {
    return new _DefaultQueryExecutor(__privateGet(this, _compiler), connectionProvider, [
      ...this.plugins
    ]);
  }
  withoutPlugins() {
    return new _DefaultQueryExecutor(__privateGet(this, _compiler), __privateGet(this, _connectionProvider), []);
  }
};
var DefaultQueryExecutor = _DefaultQueryExecutor;
_compiler = new WeakMap();
_connectionProvider = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/util/performance-now.js
function performanceNow() {
  if (typeof performance !== "undefined" && isFunction(performance.now)) {
    return performance.now();
  } else {
    return Date.now();
  }
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/driver/runtime-driver.js
var _driver2, _log, _initPromise, _destroyPromise, _connections, _needsLogging, needsLogging_fn, _addLogging, addLogging_fn, _logError, logError_fn, _logQuery, logQuery_fn, _calculateDurationMillis, calculateDurationMillis_fn;
var RuntimeDriver = class {
  constructor(driver, log) {
    __privateAdd(this, _needsLogging);
    __privateAdd(this, _addLogging);
    __privateAdd(this, _logError);
    __privateAdd(this, _logQuery);
    __privateAdd(this, _calculateDurationMillis);
    __privateAdd(this, _driver2, void 0);
    __privateAdd(this, _log, void 0);
    __privateAdd(this, _initPromise, void 0);
    __privateAdd(this, _destroyPromise, void 0);
    __privateAdd(this, _connections, new WeakSet());
    __privateSet(this, _driver2, driver);
    __privateSet(this, _log, log);
  }
  async init() {
    if (!__privateGet(this, _initPromise)) {
      __privateSet(this, _initPromise, __privateGet(this, _driver2).init().catch((err) => {
        __privateSet(this, _initPromise, void 0);
        return Promise.reject(err);
      }));
    }
    await __privateGet(this, _initPromise);
  }
  async acquireConnection() {
    await this.init();
    const connection = await __privateGet(this, _driver2).acquireConnection();
    if (!__privateGet(this, _connections).has(connection)) {
      if (__privateMethod(this, _needsLogging, needsLogging_fn).call(this)) {
        __privateMethod(this, _addLogging, addLogging_fn).call(this, connection);
      }
      __privateGet(this, _connections).add(connection);
    }
    return connection;
  }
  async releaseConnection(connection) {
    await __privateGet(this, _driver2).releaseConnection(connection);
  }
  beginTransaction(connection, settings) {
    return __privateGet(this, _driver2).beginTransaction(connection, settings);
  }
  commitTransaction(connection) {
    return __privateGet(this, _driver2).commitTransaction(connection);
  }
  rollbackTransaction(connection) {
    return __privateGet(this, _driver2).rollbackTransaction(connection);
  }
  async destroy() {
    if (!__privateGet(this, _initPromise)) {
      return;
    }
    await __privateGet(this, _initPromise);
    if (!__privateGet(this, _destroyPromise)) {
      __privateSet(this, _destroyPromise, __privateGet(this, _driver2).destroy().catch((err) => {
        __privateSet(this, _destroyPromise, void 0);
        return Promise.reject(err);
      }));
    }
    await __privateGet(this, _destroyPromise);
  }
};
_driver2 = new WeakMap();
_log = new WeakMap();
_initPromise = new WeakMap();
_destroyPromise = new WeakMap();
_connections = new WeakMap();
_needsLogging = new WeakSet();
needsLogging_fn = function() {
  return __privateGet(this, _log).isLevelEnabled("query") || __privateGet(this, _log).isLevelEnabled("error");
};
_addLogging = new WeakSet();
addLogging_fn = function(connection) {
  const executeQuery = connection.executeQuery;
  connection.executeQuery = async (compiledQuery) => {
    const startTime = performanceNow();
    try {
      return await executeQuery.call(connection, compiledQuery);
    } catch (error) {
      __privateMethod(this, _logError, logError_fn).call(this, error);
      throw error;
    } finally {
      __privateMethod(this, _logQuery, logQuery_fn).call(this, compiledQuery, startTime);
    }
  };
};
_logError = new WeakSet();
logError_fn = function(error) {
  __privateGet(this, _log).error(() => ({
    level: "error",
    error
  }));
};
_logQuery = new WeakSet();
logQuery_fn = function(compiledQuery, startTime) {
  __privateGet(this, _log).query(() => ({
    level: "query",
    query: compiledQuery,
    queryDurationMillis: __privateMethod(this, _calculateDurationMillis, calculateDurationMillis_fn).call(this, startTime)
  }));
};
_calculateDurationMillis = new WeakSet();
calculateDurationMillis_fn = function(startTime) {
  return performanceNow() - startTime;
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/driver/single-connection-provider.js
var _connection, _runningPromise, _run, run_fn;
var SingleConnectionProvider = class {
  constructor(connection) {
    __privateAdd(this, _run);
    __privateAdd(this, _connection, void 0);
    __privateAdd(this, _runningPromise, void 0);
    __privateSet(this, _connection, connection);
  }
  async withConnection(runner) {
    while (__privateGet(this, _runningPromise)) {
      await __privateGet(this, _runningPromise);
    }
    const promise = __privateMethod(this, _run, run_fn).call(this, runner);
    __privateSet(this, _runningPromise, promise.then(() => {
      __privateSet(this, _runningPromise, void 0);
    }).catch(() => {
      __privateSet(this, _runningPromise, void 0);
    }));
    return promise;
  }
};
_connection = new WeakMap();
_runningPromise = new WeakMap();
_run = new WeakSet();
run_fn = async function(runner) {
  return await runner(__privateGet(this, _connection));
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/driver/driver.js
var TRANSACTION_ISOLATION_LEVELS = [
  "read uncommitted",
  "read committed",
  "repeatable read",
  "serializable"
];

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/join-builder.js
var _props24;
var _JoinBuilder = class {
  constructor(props) {
    __privateAdd(this, _props24, void 0);
    __privateSet(this, _props24, freeze(props));
  }
  on(...args) {
    return new _JoinBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props24)), {
      joinNode: JoinNode.cloneWithOn(__privateGet(this, _props24).joinNode, parseOnFilter(__privateGet(this, _props24).parseContext, args))
    }));
  }
  orOn(...args) {
    return new _JoinBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props24)), {
      joinNode: JoinNode.cloneWithOrOn(__privateGet(this, _props24).joinNode, parseOnFilter(__privateGet(this, _props24).parseContext, args))
    }));
  }
  onRef(lhs, op, rhs) {
    return new _JoinBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props24)), {
      joinNode: JoinNode.cloneWithOn(__privateGet(this, _props24).joinNode, parseReferenceFilter(__privateGet(this, _props24).parseContext, lhs, op, rhs))
    }));
  }
  orOnRef(lhs, op, rhs) {
    return new _JoinBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props24)), {
      joinNode: JoinNode.cloneWithOrOn(__privateGet(this, _props24).joinNode, parseReferenceFilter(__privateGet(this, _props24).parseContext, lhs, op, rhs))
    }));
  }
  onExists(arg) {
    return new _JoinBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props24)), {
      joinNode: JoinNode.cloneWithOn(__privateGet(this, _props24).joinNode, parseExistFilter(__privateGet(this, _props24).parseContext, arg))
    }));
  }
  onNotExists(arg) {
    return new _JoinBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props24)), {
      joinNode: JoinNode.cloneWithOn(__privateGet(this, _props24).joinNode, parseNotExistFilter(__privateGet(this, _props24).parseContext, arg))
    }));
  }
  orOnExists(arg) {
    return new _JoinBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props24)), {
      joinNode: JoinNode.cloneWithOrOn(__privateGet(this, _props24).joinNode, parseExistFilter(__privateGet(this, _props24).parseContext, arg))
    }));
  }
  orOnNotExists(arg) {
    return new _JoinBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props24)), {
      joinNode: JoinNode.cloneWithOrOn(__privateGet(this, _props24).joinNode, parseNotExistFilter(__privateGet(this, _props24).parseContext, arg))
    }));
  }
  toOperationNode() {
    return __privateGet(this, _props24).joinNode;
  }
};
var JoinBuilder = _JoinBuilder;
_props24 = new WeakMap();
preventAwait(JoinBuilder, "don't await JoinBuilder instances. They are never executed directly and are always just a part of a query.");

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/function-builder.js
var _props25, _oneArgFunction, oneArgFunction_fn;
var FunctionBuilder = class {
  constructor(props) {
    __privateAdd(this, _oneArgFunction);
    __privateAdd(this, _props25, void 0);
    __privateSet(this, _props25, freeze(props));
    this.min = this.min.bind(this);
    this.max = this.max.bind(this);
    this.avg = this.avg.bind(this);
    this.sum = this.sum.bind(this);
    this.count = this.count.bind(this);
  }
  max(column) {
    return __privateMethod(this, _oneArgFunction, oneArgFunction_fn).call(this, "max", column);
  }
  min(column) {
    return __privateMethod(this, _oneArgFunction, oneArgFunction_fn).call(this, "min", column);
  }
  avg(column) {
    return __privateMethod(this, _oneArgFunction, oneArgFunction_fn).call(this, "avg", column);
  }
  sum(column) {
    return __privateMethod(this, _oneArgFunction, oneArgFunction_fn).call(this, "sum", column);
  }
  count(column) {
    return __privateMethod(this, _oneArgFunction, oneArgFunction_fn).call(this, "count", column);
  }
};
_props25 = new WeakMap();
_oneArgFunction = new WeakSet();
oneArgFunction_fn = function(fn, column) {
  return new RawBuilder({
    queryId: createQueryId(),
    executor: __privateGet(this, _props25).executor,
    sql: `${fn}(??)`,
    parameters: [column]
  });
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-builder/expression-builder.js
var _props26;
var _ExpressionBuilder = class {
  constructor(props) {
    __privateAdd(this, _props26, void 0);
    __privateSet(this, _props26, freeze(props));
  }
  get fn() {
    return new FunctionBuilder({ executor: __privateGet(this, _props26).executor });
  }
  selectFrom(table) {
    return new SelectQueryBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _props26).executor,
      parseContext: __privateGet(this, _props26).parseContext,
      queryNode: SelectQueryNode.create(parseTableExpressionOrList(__privateGet(this, _props26).parseContext, table))
    });
  }
  withSchema(schema) {
    return new _ExpressionBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props26)), {
      executor: __privateGet(this, _props26).executor.withPluginAtFront(new WithSchemaPlugin(schema))
    }));
  }
  raw(sql, parameters) {
    return new RawBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _props26).executor,
      sql,
      parameters
    });
  }
  ref(reference) {
    return this.raw("??", [reference]);
  }
};
var ExpressionBuilder = _ExpressionBuilder;
_props26 = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/parser/parse-context.js
var _adapter, _noopExecutor;
var DefaultParseContext = class {
  constructor(adapter) {
    __privateAdd(this, _adapter, void 0);
    __privateAdd(this, _noopExecutor, void 0);
    __privateSet(this, _adapter, adapter);
    __privateSet(this, _noopExecutor, new NoopQueryExecutor());
  }
  get adapter() {
    return __privateGet(this, _adapter);
  }
  createSelectQueryBuilder() {
    return new SelectQueryBuilder({
      queryId: createQueryId(),
      executor: __privateGet(this, _noopExecutor),
      parseContext: this,
      queryNode: SelectQueryNode.create(parseTableExpressionOrList(this, []))
    });
  }
  createExpressionBuilder() {
    return new ExpressionBuilder({
      executor: __privateGet(this, _noopExecutor),
      parseContext: this
    });
  }
  createQueryCreator() {
    return new QueryCreator({
      executor: __privateGet(this, _noopExecutor),
      parseContext: this
    });
  }
  createJoinBuilder(joinType, table) {
    return new JoinBuilder({
      joinNode: JoinNode.create(joinType, parseTableExpression(this, table)),
      parseContext: this
    });
  }
};
_adapter = new WeakMap();
_noopExecutor = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/util/log.js
var LOG_LEVELS = freeze(["query", "error"]);
var _levels, _logger;
var Log = class {
  constructor(config) {
    __privateAdd(this, _levels, void 0);
    __privateAdd(this, _logger, void 0);
    if (isFunction(config)) {
      __privateSet(this, _logger, config);
      __privateSet(this, _levels, freeze({
        query: true,
        error: true
      }));
    } else {
      __privateSet(this, _logger, defaultLogger);
      __privateSet(this, _levels, freeze({
        query: config.includes("query"),
        error: config.includes("error")
      }));
    }
  }
  isLevelEnabled(level) {
    return __privateGet(this, _levels)[level];
  }
  query(getEvent) {
    if (__privateGet(this, _levels).query) {
      __privateGet(this, _logger).call(this, getEvent());
    }
  }
  error(getEvent) {
    if (__privateGet(this, _levels).error) {
      __privateGet(this, _logger).call(this, getEvent());
    }
  }
};
_levels = new WeakMap();
_logger = new WeakMap();
function defaultLogger(event) {
  var _a;
  if (event.level === "query") {
    console.log(`kysely:query: ${event.query.sql}`);
    console.log(`kysely:query: duration: ${event.queryDurationMillis.toFixed(1)}ms`);
  } else if (event.level === "error") {
    if (event.error instanceof Error) {
      console.error(`kysely:error: ${(_a = event.error.stack) != null ? _a : event.error.message}`);
    } else {
      console.error(`kysely:error: ${event}`);
    }
  }
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/util/private-symbols.js
var PRIVATE_ADAPTER = Symbol();

// dist/RDS_migrator/node_modules/kysely/dist/esm/kysely.js
var _props27;
var _Kysely = class extends QueryCreator {
  constructor(args) {
    var _a, _b;
    let superProps;
    let props;
    if (isKyselyProps(args)) {
      superProps = { executor: args.executor, parseContext: args.parseContext };
      props = __spreadValues({}, args);
    } else {
      const dialect = args.dialect;
      const driver = dialect.createDriver();
      const compiler = dialect.createQueryCompiler();
      const adapter = dialect.createAdapter();
      const log = new Log((_a = args.log) != null ? _a : []);
      const parseContext = new DefaultParseContext(adapter);
      const runtimeDriver = new RuntimeDriver(driver, log);
      const connectionProvider = new DefaultConnectionProvider(runtimeDriver);
      const executor = new DefaultQueryExecutor(compiler, connectionProvider, (_b = args.plugins) != null ? _b : []);
      superProps = { executor, parseContext };
      props = {
        config: args,
        executor,
        dialect,
        driver: runtimeDriver,
        parseContext
      };
    }
    super(superProps);
    __privateAdd(this, _props27, void 0);
    __privateSet(this, _props27, freeze(props));
  }
  get schema() {
    return new SchemaModule(__privateGet(this, _props27).executor);
  }
  get dynamic() {
    return new DynamicModule();
  }
  get introspection() {
    return __privateGet(this, _props27).dialect.createIntrospector(this.withoutPlugins());
  }
  get fn() {
    return new FunctionBuilder({ executor: __privateGet(this, _props27).executor });
  }
  transaction() {
    return new TransactionBuilder(__spreadValues({}, __privateGet(this, _props27)));
  }
  connection() {
    return new ConnectionBuilder(__spreadValues({}, __privateGet(this, _props27)));
  }
  withPlugin(plugin) {
    return new _Kysely(__spreadProps(__spreadValues({}, __privateGet(this, _props27)), {
      executor: __privateGet(this, _props27).executor.withPlugin(plugin)
    }));
  }
  withoutPlugins() {
    return new _Kysely(__spreadProps(__spreadValues({}, __privateGet(this, _props27)), {
      executor: __privateGet(this, _props27).executor.withoutPlugins()
    }));
  }
  withTables() {
    return new _Kysely(__spreadValues({}, __privateGet(this, _props27)));
  }
  async destroy() {
    await __privateGet(this, _props27).driver.destroy();
  }
  get isTransaction() {
    return false;
  }
  get [PRIVATE_ADAPTER]() {
    return __privateGet(this, _props27).parseContext.adapter;
  }
};
var Kysely = _Kysely;
_props27 = new WeakMap();
var _props28;
var _Transaction = class extends Kysely {
  constructor(props) {
    super(props);
    __privateAdd(this, _props28, void 0);
    __privateSet(this, _props28, props);
  }
  get isTransaction() {
    return true;
  }
  transaction() {
    throw new Error("calling the transaction method for a Transaction is not supported");
  }
  connection() {
    throw new Error("calling the connection method for a Transaction is not supported");
  }
  async destroy() {
    throw new Error("calling the destroy method for a Transaction is not supported");
  }
  withPlugin(plugin) {
    return new _Transaction(__spreadProps(__spreadValues({}, __privateGet(this, _props28)), {
      executor: __privateGet(this, _props28).executor.withPlugin(plugin)
    }));
  }
  withoutPlugins() {
    return new _Transaction(__spreadProps(__spreadValues({}, __privateGet(this, _props28)), {
      executor: __privateGet(this, _props28).executor.withoutPlugins()
    }));
  }
  withTables() {
    return new _Transaction(__spreadValues({}, __privateGet(this, _props28)));
  }
};
var Transaction = _Transaction;
_props28 = new WeakMap();
function isKyselyProps(obj) {
  return isObject(obj) && isObject(obj.config) && isObject(obj.driver) && isObject(obj.executor) && isObject(obj.dialect) && isObject(obj.parseContext);
}
var _props29;
var ConnectionBuilder = class {
  constructor(props) {
    __privateAdd(this, _props29, void 0);
    __privateSet(this, _props29, freeze(props));
  }
  async execute(callback) {
    const connection = await __privateGet(this, _props29).driver.acquireConnection();
    const connectionProvider = new SingleConnectionProvider(connection);
    const db = new Kysely(__spreadProps(__spreadValues({}, __privateGet(this, _props29)), {
      executor: __privateGet(this, _props29).executor.withConnectionProvider(connectionProvider)
    }));
    try {
      return await callback(db);
    } finally {
      await __privateGet(this, _props29).driver.releaseConnection(connection);
    }
  }
};
_props29 = new WeakMap();
preventAwait(ConnectionBuilder, "don't await ConnectionBuilder instances directly. To execute the query you need to call the `execute` method");
var _props30;
var _TransactionBuilder = class {
  constructor(props) {
    __privateAdd(this, _props30, void 0);
    __privateSet(this, _props30, freeze(props));
  }
  setIsolationLevel(isolationLevel) {
    return new _TransactionBuilder(__spreadProps(__spreadValues({}, __privateGet(this, _props30)), {
      isolationLevel
    }));
  }
  async execute(callback) {
    const _a = __privateGet(this, _props30), { isolationLevel } = _a, kyselyProps = __objRest(_a, ["isolationLevel"]);
    const settings = { isolationLevel };
    validateTransactionSettings(settings);
    const connection = await __privateGet(this, _props30).driver.acquireConnection();
    const connectionProvider = new SingleConnectionProvider(connection);
    const transaction = new Transaction(__spreadProps(__spreadValues({}, kyselyProps), {
      executor: __privateGet(this, _props30).executor.withConnectionProvider(connectionProvider)
    }));
    try {
      await __privateGet(this, _props30).driver.beginTransaction(connection, settings);
      const result = await callback(transaction);
      await __privateGet(this, _props30).driver.commitTransaction(connection);
      return result;
    } catch (error) {
      await __privateGet(this, _props30).driver.rollbackTransaction(connection);
      throw error;
    } finally {
      await __privateGet(this, _props30).driver.releaseConnection(connection);
    }
  }
};
var TransactionBuilder = _TransactionBuilder;
_props30 = new WeakMap();
preventAwait(TransactionBuilder, "don't await TransactionBuilder instances directly. To execute the transaction you need to call the `execute` method");
function validateTransactionSettings(settings) {
  if (settings.isolationLevel && !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {
    throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);
  }
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/operation-node-visitor.js
var _visitors;
var OperationNodeVisitor = class {
  constructor() {
    __publicField(this, "nodeStack", []);
    __privateAdd(this, _visitors, freeze({
      AliasNode: this.visitAlias.bind(this),
      ColumnNode: this.visitColumn.bind(this),
      IdentifierNode: this.visitIdentifier.bind(this),
      RawNode: this.visitRaw.bind(this),
      ReferenceNode: this.visitReference.bind(this),
      SelectQueryNode: this.visitSelectQuery.bind(this),
      SelectionNode: this.visitSelection.bind(this),
      TableNode: this.visitTable.bind(this),
      FromNode: this.visitFrom.bind(this),
      SelectAllNode: this.visitSelectAll.bind(this),
      FilterNode: this.visitFilter.bind(this),
      AndNode: this.visitAnd.bind(this),
      OrNode: this.visitOr.bind(this),
      ValueNode: this.visitValue.bind(this),
      ValueListNode: this.visitValueList.bind(this),
      PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),
      ParensNode: this.visitParens.bind(this),
      JoinNode: this.visitJoin.bind(this),
      OperatorNode: this.visitOperator.bind(this),
      WhereNode: this.visitWhere.bind(this),
      InsertQueryNode: this.visitInsertQuery.bind(this),
      DeleteQueryNode: this.visitDeleteQuery.bind(this),
      ReturningNode: this.visitReturning.bind(this),
      CreateTableNode: this.visitCreateTable.bind(this),
      AddColumnNode: this.visitAddColumn.bind(this),
      ColumnDefinitionNode: this.visitColumnDefinition.bind(this),
      DropTableNode: this.visitDropTable.bind(this),
      DataTypeNode: this.visitDataType.bind(this),
      OrderByNode: this.visitOrderBy.bind(this),
      OrderByItemNode: this.visitOrderByItem.bind(this),
      GroupByNode: this.visitGroupBy.bind(this),
      GroupByItemNode: this.visitGroupByItem.bind(this),
      UpdateQueryNode: this.visitUpdateQuery.bind(this),
      ColumnUpdateNode: this.visitColumnUpdate.bind(this),
      LimitNode: this.visitLimit.bind(this),
      OffsetNode: this.visitOffset.bind(this),
      OnConflictNode: this.visitOnConflict.bind(this),
      OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),
      CreateIndexNode: this.visitCreateIndex.bind(this),
      DropIndexNode: this.visitDropIndex.bind(this),
      ListNode: this.visitList.bind(this),
      PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),
      UniqueConstraintNode: this.visitUniqueConstraint.bind(this),
      ReferencesNode: this.visitReferences.bind(this),
      CheckConstraintNode: this.visitCheckConstraint.bind(this),
      WithNode: this.visitWith.bind(this),
      CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),
      CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),
      HavingNode: this.visitHaving.bind(this),
      CreateSchemaNode: this.visitCreateSchema.bind(this),
      DropSchemaNode: this.visitDropSchema.bind(this),
      AlterTableNode: this.visitAlterTable.bind(this),
      DropColumnNode: this.visitDropColumn.bind(this),
      RenameColumnNode: this.visitRenameColumn.bind(this),
      AlterColumnNode: this.visitAlterColumn.bind(this),
      ModifyColumnNode: this.visitModifyColumn.bind(this),
      AddConstraintNode: this.visitAddConstraint.bind(this),
      DropConstraintNode: this.visitDropConstraint.bind(this),
      ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),
      UnionNode: this.visitUnion.bind(this),
      CreateViewNode: this.visitCreateView.bind(this),
      DropViewNode: this.visitDropView.bind(this),
      GeneratedNode: this.visitGenerated.bind(this),
      DefaultValueNode: this.visitDefaultValue.bind(this),
      OnNode: this.visitOn.bind(this),
      ValuesNode: this.visitValues.bind(this)
    }));
    __publicField(this, "visitNode", (node) => {
      this.nodeStack.push(node);
      __privateGet(this, _visitors)[node.kind](node);
      this.nodeStack.pop();
    });
  }
  get parentNode() {
    return this.nodeStack[this.nodeStack.length - 2];
  }
};
_visitors = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js
var _sql, _parameters;
var DefaultQueryCompiler = class extends OperationNodeVisitor {
  constructor() {
    super(...arguments);
    __privateAdd(this, _sql, "");
    __privateAdd(this, _parameters, []);
  }
  get numParameters() {
    return __privateGet(this, _parameters).length;
  }
  compileQuery(node) {
    __privateSet(this, _sql, "");
    __privateSet(this, _parameters, []);
    this.visitNode(node);
    return freeze({
      query: node,
      sql: this.getSql(),
      parameters: [...__privateGet(this, _parameters)]
    });
  }
  getSql() {
    return __privateGet(this, _sql);
  }
  visitSelectQuery(node) {
    const wrapInParens = this.parentNode !== void 0 && !InsertQueryNode.is(this.parentNode) && !CreateViewNode.is(this.parentNode) && !UnionNode.is(this.parentNode);
    if (wrapInParens) {
      this.append("(");
    }
    if (node.with) {
      this.visitNode(node.with);
      this.append(" ");
    }
    this.append("select ");
    if (node.distinctOnSelections) {
      this.compileDistinctOn(node.distinctOnSelections);
      this.append(" ");
    }
    if (node.distinct) {
      this.append("distinct");
      this.append(" ");
    }
    if (node.selections) {
      this.compileList(node.selections);
      this.append(" ");
    }
    this.visitNode(node.from);
    if (node.joins) {
      this.append(" ");
      this.compileList(node.joins, " ");
    }
    if (node.where) {
      this.append(" ");
      this.visitNode(node.where);
    }
    if (node.groupBy) {
      this.append(" ");
      this.visitNode(node.groupBy);
    }
    if (node.having) {
      this.append(" ");
      this.visitNode(node.having);
    }
    if (node.union) {
      this.append(" ");
      this.compileList(node.union, " ");
    }
    if (node.orderBy) {
      this.append(" ");
      this.visitNode(node.orderBy);
    }
    if (node.limit) {
      this.append(" ");
      this.visitNode(node.limit);
    }
    if (node.offset) {
      this.append(" ");
      this.visitNode(node.offset);
    }
    if (node.modifiers) {
      node.modifiers.forEach((modifier) => {
        this.append(" ");
        this.append(SELECT_MODIFIER_SQL[modifier]);
      });
    }
    if (wrapInParens) {
      this.append(")");
    }
  }
  visitFrom(node) {
    this.append("from ");
    this.compileList(node.froms);
  }
  visitSelection(node) {
    this.visitNode(node.selection);
  }
  visitColumn(node) {
    this.visitNode(node.column);
  }
  compileDistinctOn(selections) {
    this.append("distinct on (");
    this.compileList(selections);
    this.append(")");
  }
  compileList(nodes, separator = ", ") {
    const lastNode = getLast(nodes);
    for (const node of nodes) {
      this.visitNode(node);
      if (node !== lastNode) {
        this.append(separator);
      }
    }
  }
  visitWhere(node) {
    this.append("where ");
    this.visitNode(node.where);
  }
  visitHaving(node) {
    this.append("having ");
    this.visitNode(node.having);
  }
  visitInsertQuery(node) {
    const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;
    if (isSubQuery) {
      this.append("(");
    }
    if (node.with) {
      this.visitNode(node.with);
      this.append(" ");
    }
    this.append("insert");
    if (node.ignore) {
      this.append(" ignore");
    }
    this.append(" into ");
    this.visitNode(node.into);
    if (node.columns) {
      this.append(" (");
      this.compileList(node.columns);
      this.append(")");
    }
    if (node.values) {
      this.append(" ");
      this.visitNode(node.values);
    }
    if (node.onConflict) {
      this.append(" ");
      this.visitNode(node.onConflict);
    }
    if (node.onDuplicateKey) {
      this.append(" ");
      this.visitNode(node.onDuplicateKey);
    }
    if (node.returning) {
      this.append(" ");
      this.visitNode(node.returning);
    }
    if (isSubQuery) {
      this.append(")");
    }
  }
  visitValues(node) {
    this.append("values ");
    this.compileList(node.values);
  }
  visitDeleteQuery(node) {
    const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;
    if (isSubQuery) {
      this.append("(");
    }
    if (node.with) {
      this.visitNode(node.with);
      this.append(" ");
    }
    this.append("delete ");
    this.visitNode(node.from);
    if (node.joins) {
      this.append(" ");
      this.compileList(node.joins, " ");
    }
    if (node.where) {
      this.append(" ");
      this.visitNode(node.where);
    }
    if (node.orderBy) {
      this.append(" ");
      this.visitNode(node.orderBy);
    }
    if (node.limit) {
      this.append(" ");
      this.visitNode(node.limit);
    }
    if (node.returning) {
      this.append(" ");
      this.visitNode(node.returning);
    }
    if (isSubQuery) {
      this.append(")");
    }
  }
  visitReturning(node) {
    this.append("returning ");
    this.compileList(node.selections);
  }
  visitAlias(node) {
    this.visitNode(node.node);
    this.append(" as ");
    this.visitNode(node.alias);
  }
  visitReference(node) {
    this.visitNode(node.table);
    this.append(".");
    this.visitNode(node.column);
  }
  visitSelectAll(_) {
    this.append("*");
  }
  visitIdentifier(node) {
    this.append(this.getLeftIdentifierWrapper());
    this.compileUnwrappedIdentifier(node);
    this.append(this.getRightIdentifierWrapper());
  }
  compileUnwrappedIdentifier(node) {
    this.append(node.identifier);
  }
  visitFilter(node) {
    if (node.left) {
      this.visitNode(node.left);
      this.append(" ");
    }
    this.visitNode(node.op);
    this.append(" ");
    this.visitNode(node.right);
  }
  visitAnd(node) {
    this.visitNode(node.left);
    this.append(" and ");
    this.visitNode(node.right);
  }
  visitOr(node) {
    this.visitNode(node.left);
    this.append(" or ");
    this.visitNode(node.right);
  }
  visitValue(node) {
    if (node.immediate) {
      this.appendImmediateValue(node.value);
    } else {
      this.appendValue(node.value);
    }
  }
  visitValueList(node) {
    this.append("(");
    this.compileList(node.values);
    this.append(")");
  }
  visitPrimitiveValueList(node) {
    this.append("(");
    const { values } = node;
    for (let i = 0; i < values.length; ++i) {
      this.appendValue(values[i]);
      if (i !== values.length - 1) {
        this.append(", ");
      }
    }
    this.append(")");
  }
  visitParens(node) {
    this.append("(");
    this.visitNode(node.node);
    this.append(")");
  }
  visitJoin(node) {
    this.append(JOIN_TYPE_SQL[node.joinType]);
    this.append(" ");
    this.visitNode(node.table);
    if (node.on) {
      this.append(" ");
      this.visitNode(node.on);
    }
  }
  visitOn(node) {
    this.append("on ");
    this.visitNode(node.on);
  }
  visitRaw(node) {
    const { sqlFragments, params } = node;
    for (let i = 0; i < sqlFragments.length; ++i) {
      this.append(sqlFragments[i]);
      if (params.length > i) {
        this.visitNode(params[i]);
      }
    }
  }
  visitOperator(node) {
    this.append(node.operator);
  }
  visitTable(node) {
    if (node.schema) {
      this.visitNode(node.schema);
      this.append(".");
    }
    this.visitNode(node.table);
  }
  visitCreateTable(node) {
    var _a;
    this.append("create ");
    if (node.temporary) {
      this.append("temporary ");
    }
    this.append("table ");
    if (node.ifNotExists) {
      this.append("if not exists ");
    }
    this.visitNode(node.table);
    this.append(" (");
    this.compileList([...node.columns, ...(_a = node.constraints) != null ? _a : []]);
    this.append(")");
    if (node.onCommit) {
      this.append(" on commit ");
      this.append(node.onCommit);
    }
  }
  visitColumnDefinition(node) {
    this.visitNode(node.column);
    this.append(" ");
    this.visitNode(node.dataType);
    if (node.unsigned) {
      this.append(" unsigned");
    }
    if (node.generated) {
      this.append(" ");
      this.visitNode(node.generated);
    }
    if (node.defaultTo) {
      this.append(" ");
      this.visitNode(node.defaultTo);
    }
    if (node.notNull) {
      this.append(" not null");
    }
    if (node.unique) {
      this.append(" unique");
    }
    if (node.primaryKey) {
      this.append(" primary key");
    }
    if (node.autoIncrement) {
      this.append(" ");
      this.append(this.getAutoIncrement());
    }
    if (node.references) {
      this.append(" ");
      this.visitNode(node.references);
    }
    if (node.check) {
      this.append(" ");
      this.visitNode(node.check);
    }
  }
  getAutoIncrement() {
    return "auto_increment";
  }
  visitReferences(node) {
    this.append("references ");
    this.visitNode(node.table);
    this.append(" (");
    this.compileList(node.columns);
    this.append(")");
    if (node.onDelete) {
      this.append(" on delete ");
      this.append(node.onDelete);
    }
    if (node.onUpdate) {
      this.append(" on update ");
      this.append(node.onUpdate);
    }
  }
  visitDropTable(node) {
    this.append("drop table ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.table);
  }
  visitDataType(node) {
    this.append(node.dataType);
  }
  visitOrderBy(node) {
    this.append("order by ");
    this.compileList(node.items);
  }
  visitOrderByItem(node) {
    this.visitNode(node.orderBy);
    if (node.direction) {
      this.append(" ");
      this.visitNode(node.direction);
    }
  }
  visitGroupBy(node) {
    this.append("group by ");
    this.compileList(node.items);
  }
  visitGroupByItem(node) {
    this.visitNode(node.groupBy);
  }
  visitUpdateQuery(node) {
    const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;
    if (isSubQuery) {
      this.append("(");
    }
    if (node.with) {
      this.visitNode(node.with);
      this.append(" ");
    }
    this.append("update ");
    this.visitNode(node.table);
    this.append(" set ");
    if (node.updates) {
      this.compileList(node.updates);
    }
    if (node.joins) {
      this.append(" ");
      this.compileList(node.joins, " ");
    }
    if (node.where) {
      this.append(" ");
      this.visitNode(node.where);
    }
    if (node.returning) {
      this.append(" ");
      this.visitNode(node.returning);
    }
    if (isSubQuery) {
      this.append(")");
    }
  }
  visitColumnUpdate(node) {
    this.visitNode(node.column);
    this.append(" = ");
    this.visitNode(node.value);
  }
  visitLimit(node) {
    this.append("limit ");
    this.visitNode(node.limit);
  }
  visitOffset(node) {
    this.append("offset ");
    this.visitNode(node.offset);
  }
  visitOnConflict(node) {
    this.append("on conflict");
    if (node.columns) {
      this.append(" (");
      this.compileList(node.columns);
      this.append(")");
    } else if (node.constraint) {
      this.append(" on constraint ");
      this.visitNode(node.constraint);
    } else if (node.indexExpression) {
      this.append(" (");
      this.visitNode(node.indexExpression);
      this.append(")");
    }
    if (node.indexWhere) {
      this.append(" ");
      this.visitNode(node.indexWhere);
    }
    if (node.doNothing === true) {
      this.append(" do nothing");
    } else if (node.updates) {
      this.append(" do update set ");
      this.compileList(node.updates);
      if (node.updateWhere) {
        this.append(" ");
        this.visitNode(node.updateWhere);
      }
    }
  }
  visitOnDuplicateKey(node) {
    this.append("on duplicate key update ");
    this.compileList(node.updates);
  }
  visitCreateIndex(node) {
    this.append("create ");
    if (node.unique) {
      this.append("unique ");
    }
    this.append("index ");
    this.visitNode(node.name);
    if (node.table) {
      this.append(" on ");
      this.visitNode(node.table);
    }
    if (node.using) {
      this.append(" using ");
      this.visitNode(node.using);
    }
    if (node.expression) {
      this.append(" (");
      if (RawNode.is(node.expression)) {
        this.append("(");
      }
      this.visitNode(node.expression);
      if (RawNode.is(node.expression)) {
        this.append(")");
      }
      this.append(")");
    }
  }
  visitDropIndex(node) {
    this.append("drop index ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.name);
    if (node.table) {
      this.append(" on ");
      this.visitNode(node.table);
    }
  }
  visitCreateSchema(node) {
    this.append("create schema ");
    if (node.ifNotExists) {
      this.append("if not exists ");
    }
    this.visitNode(node.schema);
  }
  visitDropSchema(node) {
    this.append("drop schema ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.schema);
  }
  visitPrimaryKeyConstraint(node) {
    if (node.name) {
      this.append("constraint ");
      this.visitNode(node.name);
      this.append(" ");
    }
    this.append("primary key (");
    this.compileList(node.columns);
    this.append(")");
  }
  visitUniqueConstraint(node) {
    if (node.name) {
      this.append("constraint ");
      this.visitNode(node.name);
      this.append(" ");
    }
    this.append("unique (");
    this.compileList(node.columns);
    this.append(")");
  }
  visitCheckConstraint(node) {
    if (node.name) {
      this.append("constraint ");
      this.visitNode(node.name);
      this.append(" ");
    }
    this.append("check (");
    this.visitNode(node.expression);
    this.append(")");
  }
  visitForeignKeyConstraint(node) {
    if (node.name) {
      this.append("constraint ");
      this.visitNode(node.name);
      this.append(" ");
    }
    this.append("foreign key (");
    this.compileList(node.columns);
    this.append(") ");
    this.visitNode(node.references);
    if (node.onDelete) {
      this.append(" on delete ");
      this.append(node.onDelete);
    }
    if (node.onUpdate) {
      this.append(" on update ");
      this.append(node.onUpdate);
    }
  }
  visitList(node) {
    this.compileList(node.items);
  }
  visitWith(node) {
    this.append("with ");
    if (node.recursive) {
      this.append("recursive ");
    }
    this.compileList(node.expressions);
  }
  visitCommonTableExpression(node) {
    this.visitNode(node.name);
    this.append(" as ");
    this.visitNode(node.expression);
  }
  visitCommonTableExpressionName(node) {
    this.visitNode(node.table);
    if (node.columns) {
      this.append("(");
      this.compileList(node.columns);
      this.append(")");
    }
  }
  visitAlterTable(node) {
    this.append("alter table ");
    this.visitNode(node.table);
    this.append(" ");
    if (node.renameTo) {
      this.append("rename to ");
      this.visitNode(node.renameTo);
    }
    if (node.setSchema) {
      this.append("set schema ");
      this.visitNode(node.setSchema);
    }
    if (node.addConstraint) {
      this.visitNode(node.addConstraint);
    }
    if (node.dropConstraint) {
      this.visitNode(node.dropConstraint);
    }
    if (node.renameColumn) {
      this.visitNode(node.renameColumn);
    }
    if (node.addColumn) {
      this.visitNode(node.addColumn);
    }
    if (node.dropColumn) {
      this.visitNode(node.dropColumn);
    }
    if (node.alterColumn) {
      this.visitNode(node.alterColumn);
    }
    if (node.modifyColumn) {
      this.visitNode(node.modifyColumn);
    }
  }
  visitAddColumn(node) {
    this.append("add column ");
    this.visitNode(node.column);
  }
  visitRenameColumn(node) {
    this.append("rename column ");
    this.visitNode(node.column);
    this.append(" to ");
    this.visitNode(node.renameTo);
  }
  visitDropColumn(node) {
    this.append("drop column ");
    this.visitNode(node.column);
  }
  visitAlterColumn(node) {
    this.append("alter column ");
    this.visitNode(node.column);
    this.append(" ");
    if (node.dataType) {
      this.append("type ");
      this.visitNode(node.dataType);
      if (node.dataTypeExpression) {
        this.append("using ");
        this.visitNode(node.dataTypeExpression);
      }
    }
    if (node.setDefault) {
      this.append("set default ");
      this.visitNode(node.setDefault);
    }
    if (node.dropDefault) {
      this.append("drop default");
    }
    if (node.setNotNull) {
      this.append("set not null");
    }
    if (node.dropNotNull) {
      this.append("drop not null");
    }
  }
  visitModifyColumn(node) {
    this.append("modify column ");
    this.visitNode(node.column);
  }
  visitAddConstraint(node) {
    this.append("add ");
    this.visitNode(node.constraint);
  }
  visitDropConstraint(node) {
    this.append("drop constraint ");
    this.visitNode(node.constraintName);
  }
  visitUnion(node) {
    this.append("union ");
    if (node.all) {
      this.append("all ");
    }
    this.visitNode(node.union);
  }
  visitCreateView(node) {
    this.append("create ");
    if (node.orReplace) {
      this.append("or replace ");
    }
    if (node.materialized) {
      this.append("materialized ");
    }
    if (node.temporary) {
      this.append("temporary ");
    }
    this.append("view ");
    if (node.ifNotExists) {
      this.append("if not exists ");
    }
    this.visitNode(node.name);
    this.append(" ");
    if (node.columns) {
      this.append("(");
      this.compileList(node.columns);
      this.append(") ");
    }
    if (node.as) {
      this.append("as ");
      this.visitNode(node.as);
    }
  }
  visitDropView(node) {
    this.append("drop ");
    if (node.materialized) {
      this.append("materialized ");
    }
    this.append("view ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.name);
  }
  visitGenerated(node) {
    this.append("generated ");
    if (node.always) {
      this.append("always ");
    }
    if (node.byDefault) {
      this.append("by default ");
    }
    this.append("as ");
    if (node.identity) {
      this.append("identity");
    }
    if (node.expression) {
      this.append("(");
      this.visitNode(node.expression);
      this.append(")");
    }
    if (node.stored) {
      this.append(" stored");
    }
  }
  visitDefaultValue(node) {
    this.append("default ");
    this.visitNode(node.defaultValue);
  }
  append(str) {
    __privateSet(this, _sql, __privateGet(this, _sql) + str);
  }
  appendValue(parameter) {
    this.addParameter(parameter);
    this.append(this.getCurrentParameterPlaceholder());
  }
  getLeftIdentifierWrapper() {
    return '"';
  }
  getRightIdentifierWrapper() {
    return '"';
  }
  getCurrentParameterPlaceholder() {
    return "$" + this.numParameters;
  }
  addParameter(parameter) {
    __privateGet(this, _parameters).push(parameter);
  }
  appendImmediateValue(value) {
    if (isString(value)) {
      this.append(`'${value}'`);
    } else if (isNumber(value) || isBoolean(value)) {
      this.append(value.toString());
    } else if (isNull(value)) {
      this.append("null");
    } else if (isDate(value)) {
      this.appendImmediateValue(value.toISOString());
    } else if (isBigInt(value)) {
      this.appendImmediateValue(value.toString());
    } else {
      throw new Error(`invalid immediate value ${value}`);
    }
  }
};
_sql = new WeakMap();
_parameters = new WeakMap();
var SELECT_MODIFIER_SQL = freeze({
  ForKeyShare: "for key share",
  ForNoKeyUpdate: "for no key update",
  ForUpdate: "for update",
  ForShare: "for share",
  NoWait: "nowait",
  SkipLocked: "skip locked"
});
var JOIN_TYPE_SQL = freeze({
  InnerJoin: "inner join",
  LeftJoin: "left join",
  RightJoin: "right join",
  FullJoin: "full join"
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/query-compiler/compiled-query.js
var CompiledQuery = freeze({
  raw(sql) {
    return freeze({
      sql,
      query: RawNode.createWithSql(sql),
      parameters: freeze([])
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/dialect-adapter-base.js
var DialectAdapterBase = class {
  get supportsTransactionalDdl() {
    return false;
  }
  get supportsReturning() {
    return false;
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-query-compiler.js
var PostgresQueryCompiler = class extends DefaultQueryCompiler {
  getCurrentParameterPlaceholder() {
    return "$" + this.numParameters;
  }
  getLeftIdentifierWrapper() {
    return '"';
  }
  getRightIdentifierWrapper() {
    return '"';
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/migration/migrator.js
var MIGRATION_TABLE = "kysely_migration";
var MIGRATION_LOCK_TABLE = "kysely_migration_lock";
var MIGRATION_LOCK_ID = "migration_lock";
var NO_MIGRATIONS = freeze({ __noMigrations__: true });
var _props31, _migrate, migrate_fn, _ensureMigrationTablesExists, ensureMigrationTablesExists_fn, _ensureMigrationTableExists, ensureMigrationTableExists_fn, _ensureMigrationLockTableExists, ensureMigrationLockTableExists_fn, _ensureLockRowExists, ensureLockRowExists_fn, _doesTableExists, doesTableExists_fn, _doesLockRowExists, doesLockRowExists_fn, _runMigrations, runMigrations_fn, _getState, getState_fn, _resolveMigrations, resolveMigrations_fn, _getExecutedMigrations, getExecutedMigrations_fn, _ensureMigrationsNotCorrupted, ensureMigrationsNotCorrupted_fn, _migrateDown, migrateDown_fn, _migrateUp, migrateUp_fn;
var Migrator = class {
  constructor(props) {
    __privateAdd(this, _migrate);
    __privateAdd(this, _ensureMigrationTablesExists);
    __privateAdd(this, _ensureMigrationTableExists);
    __privateAdd(this, _ensureMigrationLockTableExists);
    __privateAdd(this, _ensureLockRowExists);
    __privateAdd(this, _doesTableExists);
    __privateAdd(this, _doesLockRowExists);
    __privateAdd(this, _runMigrations);
    __privateAdd(this, _getState);
    __privateAdd(this, _resolveMigrations);
    __privateAdd(this, _getExecutedMigrations);
    __privateAdd(this, _ensureMigrationsNotCorrupted);
    __privateAdd(this, _migrateDown);
    __privateAdd(this, _migrateUp);
    __privateAdd(this, _props31, void 0);
    __privateSet(this, _props31, freeze(props));
  }
  async getMigrations() {
    const executedMigrations = await __privateMethod(this, _doesTableExists, doesTableExists_fn).call(this, MIGRATION_TABLE) ? await __privateGet(this, _props31).db.selectFrom(MIGRATION_TABLE).select(["name", "timestamp"]).execute() : [];
    const migrations = await __privateMethod(this, _resolveMigrations, resolveMigrations_fn).call(this);
    return migrations.map((_a) => {
      var _b = _a, { name } = _b, migration = __objRest(_b, ["name"]);
      const executed = executedMigrations.find((it) => it.name === name);
      return {
        name,
        migration,
        executedAt: executed ? new Date(executed.timestamp) : void 0
      };
    });
  }
  async migrateToLatest() {
    return __privateMethod(this, _migrate, migrate_fn).call(this, ({ migrations }) => migrations.length - 1);
  }
  async migrateTo(targetMigrationName) {
    return __privateMethod(this, _migrate, migrate_fn).call(this, ({ migrations }) => {
      if (targetMigrationName === NO_MIGRATIONS) {
        return -1;
      }
      const index = migrations.findIndex((it) => it.name === targetMigrationName);
      if (index === -1) {
        throw new Error(`migration "${targetMigrationName}" doesn't exist`);
      }
      return index;
    });
  }
  async migrateUp() {
    return __privateMethod(this, _migrate, migrate_fn).call(this, ({ currentIndex, migrations }) => Math.min(currentIndex + 1, migrations.length - 1));
  }
  async migrateDown() {
    return __privateMethod(this, _migrate, migrate_fn).call(this, ({ currentIndex }) => Math.max(currentIndex - 1, -1));
  }
};
_props31 = new WeakMap();
_migrate = new WeakSet();
migrate_fn = async function(getTargetMigrationIndex) {
  try {
    await __privateMethod(this, _ensureMigrationTablesExists, ensureMigrationTablesExists_fn).call(this);
    return await __privateMethod(this, _runMigrations, runMigrations_fn).call(this, getTargetMigrationIndex);
  } catch (error) {
    if (error instanceof MigrationResultSetError) {
      return error.resultSet;
    }
    return { error };
  }
};
_ensureMigrationTablesExists = new WeakSet();
ensureMigrationTablesExists_fn = async function() {
  await __privateMethod(this, _ensureMigrationTableExists, ensureMigrationTableExists_fn).call(this);
  await __privateMethod(this, _ensureMigrationLockTableExists, ensureMigrationLockTableExists_fn).call(this);
  await __privateMethod(this, _ensureLockRowExists, ensureLockRowExists_fn).call(this);
};
_ensureMigrationTableExists = new WeakSet();
ensureMigrationTableExists_fn = async function() {
  if (!await __privateMethod(this, _doesTableExists, doesTableExists_fn).call(this, MIGRATION_TABLE)) {
    try {
      await __privateGet(this, _props31).db.schema.createTable(MIGRATION_TABLE).ifNotExists().addColumn("name", "varchar(255)", (col) => col.notNull().primaryKey()).addColumn("timestamp", "varchar(255)", (col) => col.notNull()).execute();
    } catch (error) {
      if (!await __privateMethod(this, _doesTableExists, doesTableExists_fn).call(this, MIGRATION_TABLE)) {
        throw error;
      }
    }
  }
};
_ensureMigrationLockTableExists = new WeakSet();
ensureMigrationLockTableExists_fn = async function() {
  if (!await __privateMethod(this, _doesTableExists, doesTableExists_fn).call(this, MIGRATION_LOCK_TABLE)) {
    try {
      await __privateGet(this, _props31).db.schema.createTable(MIGRATION_LOCK_TABLE).ifNotExists().addColumn("id", "varchar(255)", (col) => col.notNull().primaryKey()).addColumn("is_locked", "integer", (col) => col.notNull().defaultTo(0)).execute();
    } catch (error) {
      if (!await __privateMethod(this, _doesTableExists, doesTableExists_fn).call(this, MIGRATION_LOCK_TABLE)) {
        throw error;
      }
    }
  }
};
_ensureLockRowExists = new WeakSet();
ensureLockRowExists_fn = async function() {
  if (!await __privateMethod(this, _doesLockRowExists, doesLockRowExists_fn).call(this)) {
    try {
      await __privateGet(this, _props31).db.insertInto(MIGRATION_LOCK_TABLE).values({ id: MIGRATION_LOCK_ID, is_locked: 0 }).execute();
    } catch (error) {
      if (!await __privateMethod(this, _doesLockRowExists, doesLockRowExists_fn).call(this)) {
        throw error;
      }
    }
  }
};
_doesTableExists = new WeakSet();
doesTableExists_fn = async function(tableName) {
  const metadata = await __privateGet(this, _props31).db.introspection.getMetadata({
    withInternalKyselyTables: true
  });
  return !!metadata.tables.find((it) => it.name === tableName);
};
_doesLockRowExists = new WeakSet();
doesLockRowExists_fn = async function() {
  const lockRow = await __privateGet(this, _props31).db.selectFrom(MIGRATION_LOCK_TABLE).where("id", "=", MIGRATION_LOCK_ID).select("id").executeTakeFirst();
  return !!lockRow;
};
_runMigrations = new WeakSet();
runMigrations_fn = async function(getTargetMigrationIndex) {
  const run = async (db) => {
    try {
      await __privateGet(this, _props31).db[PRIVATE_ADAPTER].acquireMigrationLock(db);
      const state = await __privateMethod(this, _getState, getState_fn).call(this, db);
      if (state.migrations.length === 0) {
        return { results: [] };
      }
      const targetIndex = getTargetMigrationIndex(state);
      if (targetIndex === void 0) {
        return { results: [] };
      }
      if (targetIndex < state.currentIndex) {
        return await __privateMethod(this, _migrateDown, migrateDown_fn).call(this, db, state, targetIndex);
      } else if (targetIndex > state.currentIndex) {
        return await __privateMethod(this, _migrateUp, migrateUp_fn).call(this, db, state, targetIndex);
      }
      return { results: [] };
    } finally {
      await __privateGet(this, _props31).db[PRIVATE_ADAPTER].releaseMigrationLock(db);
    }
  };
  if (__privateGet(this, _props31).db[PRIVATE_ADAPTER].supportsTransactionalDdl) {
    return __privateGet(this, _props31).db.transaction().execute(run);
  } else {
    return __privateGet(this, _props31).db.connection().execute(run);
  }
};
_getState = new WeakSet();
getState_fn = async function(db) {
  const migrations = await __privateMethod(this, _resolveMigrations, resolveMigrations_fn).call(this);
  const executedMigrations = await __privateMethod(this, _getExecutedMigrations, getExecutedMigrations_fn).call(this, db);
  __privateMethod(this, _ensureMigrationsNotCorrupted, ensureMigrationsNotCorrupted_fn).call(this, migrations, executedMigrations);
  return freeze({
    migrations,
    currentIndex: migrations.findIndex((it) => it.name === getLast(executedMigrations))
  });
};
_resolveMigrations = new WeakSet();
resolveMigrations_fn = async function() {
  const allMigrations = await __privateGet(this, _props31).provider.getMigrations();
  return Object.keys(allMigrations).sort().map((name) => __spreadProps(__spreadValues({}, allMigrations[name]), {
    name
  }));
};
_getExecutedMigrations = new WeakSet();
getExecutedMigrations_fn = async function(db) {
  const executedMigrations = await db.selectFrom(MIGRATION_TABLE).select("name").orderBy("name").execute();
  return executedMigrations.map((it) => it.name);
};
_ensureMigrationsNotCorrupted = new WeakSet();
ensureMigrationsNotCorrupted_fn = function(migrations, executedMigrations) {
  for (const executed of executedMigrations) {
    if (!migrations.some((it) => it.name === executed)) {
      throw new Error(`corrupted migrations: previously executed migration ${executed} is missing`);
    }
  }
  for (let i = 0; i < executedMigrations.length; ++i) {
    if (migrations[i].name !== executedMigrations[i]) {
      throw new Error(`corrupted migrations: expected previously executed migration ${executedMigrations[i]} to be at index ${i} but ${migrations[i].name} was found in its place. New migrations must always have a name that comes alphabetically after the last executed migration.`);
    }
  }
};
_migrateDown = new WeakSet();
migrateDown_fn = async function(db, state, targetIndex) {
  const results = [];
  for (let i = state.currentIndex; i > targetIndex; --i) {
    results.push({
      migrationName: state.migrations[i].name,
      direction: "Down",
      status: "NotExecuted"
    });
  }
  for (let i = 0; i < results.length; ++i) {
    const migration = state.migrations.find((it) => it.name === results[i].migrationName);
    try {
      if (migration.down) {
        await migration.down(db);
        await db.deleteFrom(MIGRATION_TABLE).where("name", "=", migration.name).execute();
        results[i] = {
          migrationName: migration.name,
          direction: "Down",
          status: "Success"
        };
      }
    } catch (error) {
      results[i] = {
        migrationName: migration.name,
        direction: "Down",
        status: "Error"
      };
      throw new MigrationResultSetError({
        error,
        results
      });
    }
  }
  return { results };
};
_migrateUp = new WeakSet();
migrateUp_fn = async function(db, state, targetIndex) {
  const results = [];
  for (let i = state.currentIndex + 1; i <= targetIndex; ++i) {
    results.push({
      migrationName: state.migrations[i].name,
      direction: "Up",
      status: "NotExecuted"
    });
  }
  for (let i = 0; i < results.length; ++i) {
    const migration = state.migrations.find((it) => it.name === results[i].migrationName);
    try {
      await migration.up(db);
      await db.insertInto(MIGRATION_TABLE).values({
        name: migration.name,
        timestamp: new Date().toISOString()
      }).execute();
      results[i] = {
        migrationName: migration.name,
        direction: "Up",
        status: "Success"
      };
    } catch (error) {
      results[i] = {
        migrationName: migration.name,
        direction: "Up",
        status: "Error"
      };
      throw new MigrationResultSetError({
        error,
        results
      });
    }
  }
  return { results };
};
var _resultSet;
var MigrationResultSetError = class extends Error {
  constructor(result) {
    super();
    __privateAdd(this, _resultSet, void 0);
    __privateSet(this, _resultSet, result);
  }
  get resultSet() {
    return __privateGet(this, _resultSet);
  }
};
_resultSet = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-introspector.js
var _db, _parseTableMetadata, parseTableMetadata_fn;
var PostgresIntrospector = class {
  constructor(db) {
    __privateAdd(this, _parseTableMetadata);
    __privateAdd(this, _db, void 0);
    __privateSet(this, _db, db);
  }
  async getMetadata(options = { withInternalKyselyTables: false }) {
    let query = __privateGet(this, _db).selectFrom("pg_catalog.pg_attribute as a").innerJoin("pg_catalog.pg_class as c", "a.attrelid", "c.oid").innerJoin("pg_catalog.pg_tables as t", "t.tablename", "c.relname").innerJoin("pg_catalog.pg_type as typ", "a.atttypid", "typ.oid").select([
      "a.attname as column",
      "a.attnotnull as not_null",
      "t.tablename as table",
      "t.schemaname as schema",
      "typ.typname as type"
    ]).where("t.schemaname", "!~", "^pg_").where("t.schemaname", "!=", "information_schema").where("a.attnum", ">=", 0).where("a.attisdropped", "!=", true).castTo();
    if (!options.withInternalKyselyTables) {
      query = query.where("t.tablename", "!=", MIGRATION_TABLE).where("t.tablename", "!=", MIGRATION_LOCK_TABLE);
    }
    const rawColumns = await query.execute();
    return {
      tables: __privateMethod(this, _parseTableMetadata, parseTableMetadata_fn).call(this, rawColumns)
    };
  }
};
_db = new WeakMap();
_parseTableMetadata = new WeakSet();
parseTableMetadata_fn = function(columns) {
  return columns.reduce((tables, it) => {
    let table = tables.find((tbl) => tbl.name === it.table && tbl.schema === it.schema);
    if (!table) {
      table = freeze({
        name: it.table,
        schema: it.schema,
        columns: []
      });
      tables.push(table);
    }
    table.columns.push(freeze({
      name: it.column,
      dataType: it.type,
      isNullable: !it.not_null
    }));
    return tables;
  }, []);
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-adapter.js
var LOCK_ID = "3853314791062309107";
var PostgresAdapter = class extends DialectAdapterBase {
  get supportsTransactionalDdl() {
    return true;
  }
  get supportsReturning() {
    return true;
  }
  async acquireMigrationLock(db) {
    await db.raw(`select pg_advisory_xact_lock(${LOCK_ID})`).execute();
  }
  async releaseMigrationLock() {
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-query-compiler.js
var MysqlQueryCompiler = class extends DefaultQueryCompiler {
  getCurrentParameterPlaceholder() {
    return "?";
  }
  getLeftIdentifierWrapper() {
    return "`";
  }
  getRightIdentifierWrapper() {
    return "`";
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-introspector.js
var _db2, _parseTableMetadata2, parseTableMetadata_fn2;
var MysqlIntrospector = class {
  constructor(db) {
    __privateAdd(this, _parseTableMetadata2);
    __privateAdd(this, _db2, void 0);
    __privateSet(this, _db2, db);
  }
  async getMetadata(options = { withInternalKyselyTables: false }) {
    let query = __privateGet(this, _db2).selectFrom("information_schema.columns").selectAll().where("table_schema", "=", __privateGet(this, _db2).raw("database()")).castTo();
    if (!options.withInternalKyselyTables) {
      query = query.where("table_name", "!=", MIGRATION_TABLE).where("table_name", "!=", MIGRATION_LOCK_TABLE);
    }
    const rawColumns = await query.execute();
    return {
      tables: __privateMethod(this, _parseTableMetadata2, parseTableMetadata_fn2).call(this, rawColumns)
    };
  }
};
_db2 = new WeakMap();
_parseTableMetadata2 = new WeakSet();
parseTableMetadata_fn2 = function(columns) {
  return columns.reduce((tables, it) => {
    let table = tables.find((tbl) => tbl.name === it.TABLE_NAME);
    if (!table) {
      table = freeze({
        name: it.TABLE_NAME,
        columns: []
      });
      tables.push(table);
    }
    table.columns.push(freeze({
      name: it.COLUMN_NAME,
      dataType: it.DATA_TYPE,
      isNullable: it.IS_NULLABLE === "YES"
    }));
    return tables;
  }, []);
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-adapter.js
var LOCK_ID2 = "ea586330-2c93-47c8-908d-981d9d270f9d";
var LOCK_TIMEOUT_SECONDS = 60 * 60;
var MysqlAdapter = class extends DialectAdapterBase {
  get supportsTransactionalDdl() {
    return false;
  }
  get supportsReturning() {
    return false;
  }
  async acquireMigrationLock(db) {
    await db.raw(`select get_lock('${LOCK_ID2}', ${LOCK_TIMEOUT_SECONDS})`).execute();
  }
  async releaseMigrationLock(db) {
    await db.raw(`select release_lock('${LOCK_ID2}')`).execute();
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-query-compiler.js
var SqliteQueryCompiler = class extends DefaultQueryCompiler {
  getCurrentParameterPlaceholder() {
    return "?";
  }
  getLeftIdentifierWrapper() {
    return '"';
  }
  getRightIdentifierWrapper() {
    return '"';
  }
  getAutoIncrement() {
    return "autoincrement";
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-introspector.js
var _db3, _getTableMetadata, getTableMetadata_fn;
var SqliteIntrospector = class {
  constructor(db) {
    __privateAdd(this, _getTableMetadata);
    __privateAdd(this, _db3, void 0);
    __privateSet(this, _db3, db);
  }
  async getMetadata(options = { withInternalKyselyTables: false }) {
    let query = __privateGet(this, _db3).selectFrom("sqlite_schema").where("type", "=", "table").where("name", "not like", "sqlite_%").select("name").castTo();
    if (!options.withInternalKyselyTables) {
      query = query.where("name", "!=", MIGRATION_TABLE).where("name", "!=", MIGRATION_LOCK_TABLE);
    }
    const tables = await query.execute();
    return {
      tables: await Promise.all(tables.map(({ name }) => __privateMethod(this, _getTableMetadata, getTableMetadata_fn).call(this, name)))
    };
  }
};
_db3 = new WeakMap();
_getTableMetadata = new WeakSet();
getTableMetadata_fn = async function(table) {
  const db = __privateGet(this, _db3);
  const columns = await db.selectFrom(db.raw(`PRAGMA_TABLE_INFO(?)`, [table]).as("table_info")).select(["name", "type", "notnull"]).castTo().execute();
  return {
    name: table,
    columns: columns.map((col) => ({
      name: col.name,
      dataType: col.type,
      isNullable: !col.notnull
    }))
  };
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-adapter.js
var SqliteAdapter = class {
  get supportsTransactionalDdl() {
    return false;
  }
  get supportsReturning() {
    return false;
  }
  async acquireMigrationLock() {
  }
  async releaseMigrationLock() {
  }
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/camel-case/camel-case-transformer.js
var _snakeCase;
var SnakeCaseTransformer = class extends OperationNodeTransformer {
  constructor(snakeCase) {
    super();
    __privateAdd(this, _snakeCase, void 0);
    __privateSet(this, _snakeCase, snakeCase);
  }
  transformIdentifier(node) {
    node = super.transformIdentifier(node);
    return __spreadProps(__spreadValues({}, node), {
      identifier: __privateGet(this, _snakeCase).call(this, node.identifier)
    });
  }
};
_snakeCase = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/camel-case/camel-case.js
function createSnakeCaseMapper({ upperCase = false, underscoreBeforeDigits = false, underscoreBetweenUppercaseLetters = false } = {}) {
  return memoize((str) => {
    if (str.length === 0) {
      return str;
    }
    const upper = str.toUpperCase();
    const lower = str.toLowerCase();
    let out = lower[0];
    for (let i = 1, l = str.length; i < l; ++i) {
      const char = str[i];
      const prevChar = str[i - 1];
      const upperChar = upper[i];
      const prevUpperChar = upper[i - 1];
      const lowerChar = lower[i];
      const prevLowerChar = lower[i - 1];
      if (underscoreBeforeDigits && isDigit(char) && !isDigit(prevChar)) {
        out += "_" + char;
        continue;
      }
      if (char === upperChar && upperChar !== lowerChar) {
        const prevCharacterIsUppercase = prevChar === prevUpperChar && prevUpperChar !== prevLowerChar;
        if (underscoreBetweenUppercaseLetters || !prevCharacterIsUppercase) {
          out += "_" + lowerChar;
        } else {
          out += lowerChar;
        }
      } else {
        out += char;
      }
    }
    if (upperCase) {
      return out.toUpperCase();
    } else {
      return out;
    }
  });
}
function createCamelCaseMapper({ upperCase = false } = {}) {
  return memoize((str) => {
    if (str.length === 0) {
      return str;
    }
    if (upperCase && isAllUpperCaseSnakeCase(str)) {
      str = str.toLowerCase();
    }
    let out = str[0];
    for (let i = 1, l = str.length; i < l; ++i) {
      const char = str[i];
      const prevChar = str[i - 1];
      if (char !== "_") {
        if (prevChar === "_") {
          out += char.toUpperCase();
        } else {
          out += char;
        }
      }
    }
    return out;
  });
}
function isAllUpperCaseSnakeCase(str) {
  for (let i = 1, l = str.length; i < l; ++i) {
    const char = str[i];
    if (char !== "_" && char !== char.toUpperCase()) {
      return false;
    }
  }
  return true;
}
function isDigit(char) {
  return char >= "0" && char <= "9";
}
function memoize(func) {
  const cache = new Map();
  return (str) => {
    let mapped = cache.get(str);
    if (!mapped) {
      mapped = func(str);
      cache.set(str, mapped);
    }
    return mapped;
  };
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/camel-case/camel-case-plugin.js
var _camelCase, _snakeCase2, _snakeCaseTransformer;
var CamelCasePlugin = class {
  constructor(opt = {}) {
    __privateAdd(this, _camelCase, void 0);
    __privateAdd(this, _snakeCase2, void 0);
    __privateAdd(this, _snakeCaseTransformer, void 0);
    __privateSet(this, _camelCase, createCamelCaseMapper(opt));
    __privateSet(this, _snakeCase2, createSnakeCaseMapper(opt));
    __privateSet(this, _snakeCaseTransformer, new SnakeCaseTransformer(this.snakeCase.bind(this)));
  }
  transformQuery(args) {
    return __privateGet(this, _snakeCaseTransformer).transformNode(args.node);
  }
  async transformResult(args) {
    if (args.result.rows && Array.isArray(args.result.rows)) {
      return __spreadProps(__spreadValues({}, args.result), {
        rows: args.result.rows.map((row) => this.mapRow(row))
      });
    }
    return args.result;
  }
  mapRow(row) {
    return Object.keys(row).reduce((obj, key) => {
      let value = row[key];
      if (Array.isArray(value)) {
        value = value.map((it) => canMap(it) ? this.mapRow(it) : it);
      } else if (canMap(value)) {
        value = this.mapRow(value);
      }
      obj[this.camelCase(key)] = value;
      return obj;
    }, {});
  }
  snakeCase(str) {
    return __privateGet(this, _snakeCase2).call(this, str);
  }
  camelCase(str) {
    return __privateGet(this, _camelCase).call(this, str);
  }
};
_camelCase = new WeakMap();
_snakeCase2 = new WeakMap();
_snakeCaseTransformer = new WeakMap();
function canMap(obj) {
  return isObject(obj) && !isDate(obj) && !isBuffer(obj);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/deduplicate-joins/deduplicate-joins-transformer.js
var _transformQuery, transformQuery_fn, _deduplicateJoins, deduplicateJoins_fn;
var DeduplicateJoinsTransformer = class extends OperationNodeTransformer {
  constructor() {
    super(...arguments);
    __privateAdd(this, _transformQuery);
    __privateAdd(this, _deduplicateJoins);
  }
  transformSelectQuery(node) {
    return __privateMethod(this, _transformQuery, transformQuery_fn).call(this, super.transformSelectQuery(node));
  }
  transformUpdateQuery(node) {
    return __privateMethod(this, _transformQuery, transformQuery_fn).call(this, super.transformUpdateQuery(node));
  }
  transformDeleteQuery(node) {
    return __privateMethod(this, _transformQuery, transformQuery_fn).call(this, super.transformDeleteQuery(node));
  }
};
_transformQuery = new WeakSet();
transformQuery_fn = function(node) {
  if (!node.joins || node.joins.length === 0) {
    return node;
  }
  return freeze(__spreadProps(__spreadValues({}, node), {
    joins: __privateMethod(this, _deduplicateJoins, deduplicateJoins_fn).call(this, node.joins)
  }));
};
_deduplicateJoins = new WeakSet();
deduplicateJoins_fn = function(joins) {
  const out = [];
  for (let i = 0; i < joins.length; ++i) {
    let foundDuplicate = false;
    for (let j = i + 1; j < joins.length; ++j) {
      if (compare(joins[i], joins[j])) {
        foundDuplicate = true;
        break;
      }
    }
    if (!foundDuplicate) {
      out.push(joins[i]);
    }
  }
  return freeze(out);
};

// dist/RDS_migrator/node_modules/kysely/dist/esm/plugin/deduplicate-joins/deduplicate-joins-plugin.js
var _transformer3;
var DeduplicateJoinsPlugin = class {
  constructor() {
    __privateAdd(this, _transformer3, new DeduplicateJoinsTransformer());
  }
  transformQuery(args) {
    return __privateGet(this, _transformer3).transformNode(args.node);
  }
  transformResult(args) {
    return Promise.resolve(args.result);
  }
};
_transformer3 = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/operation-node/drop-constraint-node.js
var DropConstraintNode = freeze({
  is(node) {
    return node.kind === "DropConstraintNode";
  },
  create(constraintName) {
    return freeze({
      kind: "DropConstraintNode",
      constraintName: IdentifierNode.create(constraintName)
    });
  }
});

// dist/RDS_migrator/node_modules/kysely/dist/esm/migration/file-migration-provider.js
var _migrationFolderPath;
var FileMigrationProvider = class {
  constructor(migrationFolderPath) {
    __privateAdd(this, _migrationFolderPath, void 0);
    __privateSet(this, _migrationFolderPath, migrationFolderPath);
  }
  async getMigrations() {
    const fs = await import("fs/promises");
    const path2 = await import("path");
    const migrations = {};
    const files = await fs.readdir(__privateGet(this, _migrationFolderPath));
    for (const fileName of files) {
      if ((fileName.endsWith(".js") || fileName.endsWith(".ts")) && !fileName.endsWith(".d.ts")) {
        const migration = await import(path2.join(__privateGet(this, _migrationFolderPath), fileName));
        if (isMigration(migration)) {
          migrations[fileName.substring(0, fileName.length - 3)] = migration;
        }
      }
    }
    return migrations;
  }
};
_migrationFolderPath = new WeakMap();
function isMigration(obj) {
  return isObject(obj) && isFunction(obj.up);
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-driver.js
var _config, _connectionMutex, _db4, _connection2;
var SqliteDriver = class {
  constructor(config) {
    __privateAdd(this, _config, void 0);
    __privateAdd(this, _connectionMutex, new ConnectionMutex());
    __privateAdd(this, _db4, void 0);
    __privateAdd(this, _connection2, void 0);
    __privateSet(this, _config, freeze(__spreadValues({}, config)));
  }
  async init() {
    const DatabaseConstructor = await importBetterSqlite3Database();
    const options = {};
    if (isBoolean(__privateGet(this, _config).readonly)) {
      options.readonly = __privateGet(this, _config).readonly;
    }
    if (isBoolean(__privateGet(this, _config).fileMustExist)) {
      options.fileMustExist = __privateGet(this, _config).fileMustExist;
    }
    if (isNumber(__privateGet(this, _config).timeout)) {
      options.timeout = __privateGet(this, _config).timeout;
    }
    if (isFunction(__privateGet(this, _config).verbose)) {
      options.verbose = __privateGet(this, _config).verbose;
    }
    __privateSet(this, _db4, new DatabaseConstructor(__privateGet(this, _config).databasePath, options));
    __privateSet(this, _connection2, new SqliteConnection(__privateGet(this, _db4)));
    if (__privateGet(this, _config).onCreateConnection) {
      await __privateGet(this, _config).onCreateConnection(__privateGet(this, _connection2));
    }
  }
  async acquireConnection() {
    await __privateGet(this, _connectionMutex).lock();
    return __privateGet(this, _connection2);
  }
  async beginTransaction(connection) {
    await connection.executeQuery(CompiledQuery.raw("begin"));
  }
  async commitTransaction(connection) {
    await connection.executeQuery(CompiledQuery.raw("commit"));
  }
  async rollbackTransaction(connection) {
    await connection.executeQuery(CompiledQuery.raw("rollback"));
  }
  async releaseConnection() {
    __privateGet(this, _connectionMutex).unlock();
  }
  async destroy() {
    var _a;
    (_a = __privateGet(this, _db4)) == null ? void 0 : _a.close();
  }
};
_config = new WeakMap();
_connectionMutex = new WeakMap();
_db4 = new WeakMap();
_connection2 = new WeakMap();
async function importBetterSqlite3Database() {
  try {
    const sqliteModule = await import("better-sqlite3");
    if (isFunction(sqliteModule)) {
      return sqliteModule;
    } else {
      return sqliteModule.default;
    }
  } catch (error) {
    throw new Error("SQLite client not installed. Please run `npm install better-sqlite3`");
  }
}
var _db5;
var SqliteConnection = class {
  constructor(db) {
    __privateAdd(this, _db5, void 0);
    __privateSet(this, _db5, db);
  }
  executeQuery(compiledQuery) {
    const { sql, parameters } = compiledQuery;
    const stmt = __privateGet(this, _db5).prepare(sql);
    if (stmt.reader) {
      return Promise.resolve({
        rows: stmt.all(parameters)
      });
    } else {
      const { changes, lastInsertRowid } = stmt.run(parameters);
      return Promise.resolve({
        numUpdatedOrDeletedRows: changes !== void 0 && changes !== null ? BigInt(changes) : void 0,
        insertId: lastInsertRowid !== void 0 && lastInsertRowid !== null ? BigInt(lastInsertRowid) : void 0,
        rows: []
      });
    }
  }
};
_db5 = new WeakMap();
var _promise, _resolve;
var ConnectionMutex = class {
  constructor() {
    __privateAdd(this, _promise, void 0);
    __privateAdd(this, _resolve, void 0);
  }
  async lock() {
    while (__privateGet(this, _promise)) {
      await __privateGet(this, _promise);
    }
    __privateSet(this, _promise, new Promise((resolve) => {
      __privateSet(this, _resolve, resolve);
    }));
  }
  unlock() {
    const resolve = __privateGet(this, _resolve);
    __privateSet(this, _promise, void 0);
    __privateSet(this, _resolve, void 0);
    resolve == null ? void 0 : resolve();
  }
};
_promise = new WeakMap();
_resolve = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js
var _config2;
var SqliteDialect = class {
  constructor(config) {
    __privateAdd(this, _config2, void 0);
    __privateSet(this, _config2, freeze(__spreadValues({}, config)));
  }
  createDriver() {
    return new SqliteDriver(__privateGet(this, _config2));
  }
  createQueryCompiler() {
    return new SqliteQueryCompiler();
  }
  createAdapter() {
    return new SqliteAdapter();
  }
  createIntrospector(db) {
    return new SqliteIntrospector(db);
  }
};
_config2 = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-driver.js
var PRIVATE_RELEASE_METHOD = Symbol();
var _config3, _connections2, _pool, _acquireConnection, acquireConnection_fn;
var MysqlDriver = class {
  constructor(config) {
    __privateAdd(this, _acquireConnection);
    __privateAdd(this, _config3, void 0);
    __privateAdd(this, _connections2, new WeakMap());
    __privateAdd(this, _pool, void 0);
    __privateSet(this, _config3, freeze(__spreadValues({}, config)));
  }
  async init() {
    const poolFactory = await importMysqlPoolFactory();
    __privateSet(this, _pool, poolFactory(__privateGet(this, _config3)));
  }
  async acquireConnection() {
    const rawConnection = await __privateMethod(this, _acquireConnection, acquireConnection_fn).call(this);
    let connection = __privateGet(this, _connections2).get(rawConnection);
    if (!connection) {
      connection = new MysqlConnection(rawConnection);
      __privateGet(this, _connections2).set(rawConnection, connection);
      if (__privateGet(this, _config3).onCreateConnection) {
        await __privateGet(this, _config3).onCreateConnection(connection);
      }
    }
    return connection;
  }
  async beginTransaction(connection, settings) {
    if (settings.isolationLevel) {
      await connection.executeQuery(CompiledQuery.raw(`set transaction isolation level ${settings.isolationLevel}`));
    }
    await connection.executeQuery(CompiledQuery.raw("begin"));
  }
  async commitTransaction(connection) {
    await connection.executeQuery(CompiledQuery.raw("commit"));
  }
  async rollbackTransaction(connection) {
    await connection.executeQuery(CompiledQuery.raw("rollback"));
  }
  async releaseConnection(connection) {
    const mysqlConnection = connection;
    mysqlConnection[PRIVATE_RELEASE_METHOD]();
  }
  async destroy() {
    return new Promise((resolve, reject) => {
      __privateGet(this, _pool).end((err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }
};
_config3 = new WeakMap();
_connections2 = new WeakMap();
_pool = new WeakMap();
_acquireConnection = new WeakSet();
acquireConnection_fn = async function() {
  return new Promise((resolve, reject) => {
    __privateGet(this, _pool).getConnection(async (err, rawConnection) => {
      if (err) {
        reject(err);
      } else {
        resolve(rawConnection);
      }
    });
  });
};
async function importMysqlPoolFactory() {
  try {
    const mysqlModule = await import("mysql2");
    if (isFunction(mysqlModule.createPool)) {
      return mysqlModule.createPool;
    } else {
      return mysqlModule.default.createPool;
    }
  } catch (error) {
    throw new Error("MySQL client not installed. Please run `npm install mysql2`");
  }
}
var _rawConnection, _executeQuery, executeQuery_fn;
var MysqlConnection = class {
  constructor(rawConnection) {
    __privateAdd(this, _executeQuery);
    __privateAdd(this, _rawConnection, void 0);
    __privateSet(this, _rawConnection, rawConnection);
  }
  async executeQuery(compiledQuery) {
    const result = await __privateMethod(this, _executeQuery, executeQuery_fn).call(this, compiledQuery);
    if (isOkPacket(result)) {
      const { insertId, affectedRows } = result;
      return {
        insertId: insertId !== void 0 && insertId !== null && insertId.toString() !== "0" ? BigInt(insertId) : void 0,
        numUpdatedOrDeletedRows: affectedRows !== void 0 && insertId !== null ? BigInt(affectedRows) : void 0,
        rows: []
      };
    } else if (Array.isArray(result)) {
      return {
        rows: result
      };
    }
    return {
      rows: []
    };
  }
  [PRIVATE_RELEASE_METHOD]() {
    __privateGet(this, _rawConnection).release();
  }
};
_rawConnection = new WeakMap();
_executeQuery = new WeakSet();
executeQuery_fn = function(compiledQuery) {
  return new Promise((resolve, reject) => {
    __privateGet(this, _rawConnection).query(compiledQuery.sql, compiledQuery.parameters, (err, result) => {
      if (err) {
        reject(err);
      } else {
        resolve(result);
      }
    });
  });
};
function isOkPacket(obj) {
  return isObject(obj) && "insertId" in obj && "affectedRows" in obj;
}

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js
var _config4;
var MysqlDialect = class {
  constructor(config) {
    __privateAdd(this, _config4, void 0);
    __privateSet(this, _config4, freeze(__spreadValues({}, config)));
  }
  createDriver() {
    return new MysqlDriver(__privateGet(this, _config4));
  }
  createQueryCompiler() {
    return new MysqlQueryCompiler();
  }
  createAdapter() {
    return new MysqlAdapter();
  }
  createIntrospector(db) {
    return new MysqlIntrospector(db);
  }
};
_config4 = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-driver.js
var PRIVATE_RELEASE_METHOD2 = Symbol();
var _config5, _connections3, _pool2;
var PostgresDriver = class {
  constructor(config) {
    __privateAdd(this, _config5, void 0);
    __privateAdd(this, _connections3, new WeakMap());
    __privateAdd(this, _pool2, null);
    __privateSet(this, _config5, freeze(__spreadValues({}, config)));
  }
  async init() {
    const PoolConstructor = await importPgPool();
    __privateSet(this, _pool2, new PoolConstructor(__privateGet(this, _config5)));
  }
  async acquireConnection() {
    const client = await __privateGet(this, _pool2).connect();
    let connection = __privateGet(this, _connections3).get(client);
    if (!connection) {
      connection = new PostgresConnection(client);
      __privateGet(this, _connections3).set(client, connection);
      if (__privateGet(this, _config5).onCreateConnection) {
        await __privateGet(this, _config5).onCreateConnection(connection);
      }
    }
    return connection;
  }
  async beginTransaction(connection, settings) {
    if (settings.isolationLevel) {
      await connection.executeQuery(CompiledQuery.raw(`start transaction isolation level ${settings.isolationLevel}`));
    } else {
      await connection.executeQuery(CompiledQuery.raw("begin"));
    }
  }
  async commitTransaction(connection) {
    await connection.executeQuery(CompiledQuery.raw("commit"));
  }
  async rollbackTransaction(connection) {
    await connection.executeQuery(CompiledQuery.raw("rollback"));
  }
  async releaseConnection(connection) {
    const pgConnection = connection;
    pgConnection[PRIVATE_RELEASE_METHOD2]();
  }
  async destroy() {
    if (__privateGet(this, _pool2)) {
      const pool = __privateGet(this, _pool2);
      __privateSet(this, _pool2, null);
      await pool.end();
    }
  }
};
_config5 = new WeakMap();
_connections3 = new WeakMap();
_pool2 = new WeakMap();
async function importPgPool() {
  try {
    const pgModule = await import("pg");
    if (isFunction(pgModule.Pool)) {
      return pgModule.Pool;
    } else {
      return pgModule.default.Pool;
    }
  } catch (error) {
    throw new Error("Postgres client not installed. Please run `npm install pg`");
  }
}
var _client;
var PostgresConnection = class {
  constructor(client) {
    __privateAdd(this, _client, void 0);
    __privateSet(this, _client, client);
  }
  async executeQuery(compiledQuery) {
    var _a, _b;
    const result = await __privateGet(this, _client).query(compiledQuery.sql, [
      ...compiledQuery.parameters
    ]);
    if (result.command === "UPDATE" || result.command === "DELETE") {
      return {
        numUpdatedOrDeletedRows: BigInt(result.rowCount),
        rows: (_a = result.rows) != null ? _a : []
      };
    }
    return {
      rows: (_b = result.rows) != null ? _b : []
    };
  }
  [PRIVATE_RELEASE_METHOD2]() {
    __privateGet(this, _client).release();
  }
};
_client = new WeakMap();

// dist/RDS_migrator/node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js
var _config6;
var PostgresDialect = class {
  constructor(config) {
    __privateAdd(this, _config6, void 0);
    __privateSet(this, _config6, freeze(__spreadValues({}, config)));
  }
  createDriver() {
    return new PostgresDriver(__privateGet(this, _config6));
  }
  createQueryCompiler() {
    return new PostgresQueryCompiler();
  }
  createAdapter() {
    return new PostgresAdapter();
  }
  createIntrospector(db) {
    return new PostgresIntrospector(db);
  }
};
_config6 = new WeakMap();

// dist/RDS_migrator/node_modules/kysely-data-api/dist/esm/data-api-driver.js
var _config7;
var DataApiDriver = class {
  constructor(config) {
    __privateAdd(this, _config7, void 0);
    __privateSet(this, _config7, config);
  }
  async init() {
  }
  async acquireConnection() {
    return new DataApiConnection(__privateGet(this, _config7));
  }
  async beginTransaction(conn) {
    await conn.beginTransaction();
  }
  async commitTransaction(conn) {
    await conn.commitTransaction();
  }
  async rollbackTransaction(conn) {
    await conn.rollbackTransaction();
  }
  async releaseConnection(_connection3) {
  }
  async destroy() {
  }
};
_config7 = new WeakMap();
var _config8, _transactionId;
var DataApiConnection = class {
  constructor(config) {
    __privateAdd(this, _config8, void 0);
    __privateAdd(this, _transactionId, void 0);
    __privateSet(this, _config8, config);
  }
  async beginTransaction() {
    const r = await __privateGet(this, _config8).client.beginTransaction({
      secretArn: __privateGet(this, _config8).secretArn,
      resourceArn: __privateGet(this, _config8).resourceArn,
      database: __privateGet(this, _config8).database
    }).promise();
    __privateSet(this, _transactionId, r.transactionId);
  }
  async commitTransaction() {
    if (!__privateGet(this, _transactionId))
      throw new Error("Cannot commit a transaction before creating it");
    await __privateGet(this, _config8).client.commitTransaction({
      secretArn: __privateGet(this, _config8).secretArn,
      resourceArn: __privateGet(this, _config8).resourceArn,
      transactionId: __privateGet(this, _transactionId)
    }).promise();
  }
  async rollbackTransaction() {
    if (!__privateGet(this, _transactionId))
      throw new Error("Cannot rollback a transaction before creating it");
    await __privateGet(this, _config8).client.rollbackTransaction({
      secretArn: __privateGet(this, _config8).secretArn,
      resourceArn: __privateGet(this, _config8).resourceArn,
      transactionId: __privateGet(this, _transactionId)
    }).promise();
  }
  async executeQuery(compiledQuery) {
    var _a;
    const r = await __privateGet(this, _config8).client.executeStatement({
      transactionId: __privateGet(this, _transactionId),
      secretArn: __privateGet(this, _config8).secretArn,
      resourceArn: __privateGet(this, _config8).resourceArn,
      sql: compiledQuery.sql,
      parameters: compiledQuery.parameters,
      database: __privateGet(this, _config8).database,
      includeResultMetadata: true
    }).promise();
    if (!r.columnMetadata) {
      return {
        numUpdatedOrDeletedRows: BigInt(r.numberOfRecordsUpdated || 0),
        rows: []
      };
    }
    const rows = (_a = r.records) == null ? void 0 : _a.filter((r2) => r2.length !== 0).map((rec) => Object.fromEntries(rec.map((val, i) => {
      var _a2, _b, _c, _d, _e;
      return [
        r.columnMetadata[i].name,
        (_e = (_d = (_c = (_b = (_a2 = val.stringValue) != null ? _a2 : val.blobValue) != null ? _b : val.longValue) != null ? _c : val.arrayValue) != null ? _d : val.doubleValue) != null ? _e : val.isNull ? null : val.booleanValue
      ];
    })));
    const result = {
      rows: rows || []
    };
    return result;
  }
};
_config8 = new WeakMap();
_transactionId = new WeakMap();

// dist/RDS_migrator/node_modules/kysely-data-api/dist/esm/data-api-query-compiler.js
var PostgresDataApiQueryCompiler = class extends PostgresQueryCompiler {
  appendValue(value) {
    const name = this.numParameters;
    this.append(this.getCurrentParameterPlaceholder());
    this.addParameter({
      name: name.toString(),
      value: serialize(value)
    });
  }
  getCurrentParameterPlaceholder() {
    return ":" + this.numParameters;
  }
};
var MysqlDataApiQueryCompiler = class extends MysqlQueryCompiler {
  appendValue(value) {
    const name = this.numParameters;
    this.append(this.getCurrentParameterPlaceholder());
    this.addParameter({
      name: name.toString(),
      value: serialize(value)
    });
  }
  getCurrentParameterPlaceholder() {
    return ":" + this.numParameters;
  }
};
function serialize(value) {
  if (value == null)
    return { isNull: true };
  switch (typeof value) {
    case "number":
      if (Number.isInteger(value))
        return {
          longValue: value
        };
      else
        return {
          doubleValue: value
        };
    case "bigint":
      return {
        doubleValue: Number(value)
      };
    case "string":
      return {
        stringValue: value
      };
    case "boolean":
      return {
        booleanValue: value
      };
    case "object":
      if (Buffer.isBuffer(value))
        return {
          blobValue: value
        };
      else
        break;
  }
  throw "wtf";
}

// dist/RDS_migrator/node_modules/kysely-data-api/dist/esm/data-api-dialect.js
var _config9;
var DataApiDialect = class {
  constructor(config) {
    __privateAdd(this, _config9, void 0);
    __privateSet(this, _config9, config);
  }
  createAdapter() {
    if (__privateGet(this, _config9).mode === "postgres")
      return new PostgresAdapter();
    if (__privateGet(this, _config9).mode === "mysql")
      return new MysqlAdapter();
    throw new Error("Unknown mode " + __privateGet(this, _config9).mode);
  }
  createDriver() {
    return new DataApiDriver(__privateGet(this, _config9).driver);
  }
  createQueryCompiler() {
    if (__privateGet(this, _config9).mode === "postgres")
      return new PostgresDataApiQueryCompiler();
    if (__privateGet(this, _config9).mode === "mysql")
      return new MysqlDataApiQueryCompiler();
    throw new Error("Unknown mode " + __privateGet(this, _config9).mode);
  }
  createIntrospector(db) {
    if (__privateGet(this, _config9).mode === "postgres")
      return new PostgresIntrospector(db);
    if (__privateGet(this, _config9).mode === "mysql")
      return new MysqlIntrospector(db);
    throw new Error("Unknown mode " + __privateGet(this, _config9).mode);
  }
};
_config9 = new WeakMap();

// dist/RDS_migrator/index.js
var import_rdsdataservice = __toModule(require("aws-sdk/clients/rdsdataservice"));
var import_url = __toModule(require("url"));
"use strict";
async function handler(evt) {
  var _a;
  const db = new Kysely({
    dialect: new DataApiDialect({
      mode: process.env.RDS_ENGINE_MODE,
      driver: {
        client: new import_rdsdataservice.default(),
        database: (evt == null ? void 0 : evt.database) || process.env.RDS_DATABASE,
        secretArn: process.env.RDS_SECRET,
        resourceArn: process.env.RDS_ARN
      }
    })
  });
  const migrator = new Migrator({
    db,
    provider: process.env.LAMBDA_TASK_ROOT ? new FileMigrationProvider(import_path.default.resolve(process.env.RDS_MIGRATIONS_PATH)) : new DynamicFileMigrationProvider(import_path.default.resolve(process.env.RDS_MIGRATIONS_PATH))
  });
  if (!evt.type || evt.type === "latest") {
    const response = await migrator.migrateToLatest();
    return response;
  }
  if (evt.type === "to") {
    if (!evt.data.name)
      return await migrator.migrateTo(NO_MIGRATIONS);
    const result = await migrator.migrateTo(evt.data.name);
    const err = result.error || ((_a = result.results) == null ? void 0 : _a.find((r) => r.status === "Error"));
    if (err)
      throw err;
    return result;
  }
  if (evt.type === "list") {
    return await migrator.getMigrations();
  }
}
var _migrationFolderPath2;
var DynamicFileMigrationProvider = class {
  constructor(migrationFolderPath) {
    __privateAdd(this, _migrationFolderPath2, void 0);
    __privateSet(this, _migrationFolderPath2, migrationFolderPath);
  }
  async getMigrations() {
    const fs = await import("fs/promises");
    const path2 = await import("path");
    const migrations = {};
    const files = await fs.readdir(__privateGet(this, _migrationFolderPath2));
    for (const fileName of files) {
      if ((fileName.endsWith(".js") || fileName.endsWith(".ts")) && !fileName.endsWith(".d.ts")) {
        const fullPath = path2.join(__privateGet(this, _migrationFolderPath2), fileName);
        const copy = fullPath + Date.now().toString() + ".js";
        try {
          await fs.copyFile(fullPath, copy);
          const migration = await import(import_url.default.pathToFileURL(copy).href);
          migrations[fileName.substring(0, fileName.length - 3)] = migration;
        } catch (ex) {
          console.error(ex);
        }
        await fs.rm(copy);
      }
    }
    return migrations;
  }
};
_migrationFolderPath2 = new WeakMap();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
//# sourceMappingURL=index.js.map
